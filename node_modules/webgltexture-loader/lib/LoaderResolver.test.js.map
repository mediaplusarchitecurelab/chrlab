{"version":3,"sources":["../src/LoaderResolver.test.js"],"names":["test","gl","resolver","LoaderResolver","expect","resolve","toBeUndefined","dispose","deleteTexture","registry","LoadersRegistry","FakeLoader","WebGLTextureLoaderSyncHashCache","canLoad","input","inputHash","getNoCache","texture","id","width","height","add","loader","toBeDefined","toBeInstanceOf"],"mappings":";;AAAA;;AACA;;AACA;;;;AAEAA,IAAI,CAAC,0CAAD,EAA6C,MAAM;AACrD,QAAMC,EAAE,GAAG,EAAX;AACA,QAAMC,QAAQ,GAAG,IAAIC,uBAAJ,CAAmBF,EAAnB,CAAjB;AACAG,EAAAA,MAAM,CAACF,QAAQ,CAACG,OAAT,CAAiB,IAAjB,CAAD,CAAN,CAA+BC,aAA/B;AACAF,EAAAA,MAAM,CAACF,QAAQ,CAACG,OAAT,CAAiB,EAAjB,CAAD,CAAN,CAA6BC,aAA7B;AACAF,EAAAA,MAAM,CAACF,QAAQ,CAACG,OAAT,CAAiB,KAAjB,CAAD,CAAN,CAAgCC,aAAhC;AACAJ,EAAAA,QAAQ,CAACK,OAAT;AACD,CAPG,CAAJ;AASAP,IAAI,CAAC,sCAAD,EAAyC,MAAM;AACjD,QAAMC,EAAE,GAAG;AACTO,IAAAA,aAAa,EAAE,MAAM,CAAE;AADd,GAAX;AAGA,QAAMC,QAAQ,GAAG,IAAIC,wBAAJ,EAAjB;;AACA,QAAMC,UAAN,SAAyBC,wCAAzB,CAAyD;AACvDC,IAAAA,OAAO,CAACC,KAAD,EAAQ;AACb,aAAO,OAAOA,KAAP,KAAiB,QAAxB;AACD;;AACDC,IAAAA,SAAS,CAACD,KAAD,EAAQ;AACf,aAAOA,KAAP;AACD;;AACDE,IAAAA,UAAU,CAACF,KAAD,EAAQ;AAChB,aAAO;AAAEG,QAAAA,OAAO,EAAE;AAAEC,UAAAA,EAAE,EAAEJ;AAAN,SAAX;AAA0BK,QAAAA,KAAK,EAAE,CAAjC;AAAoCC,QAAAA,MAAM,EAAE;AAA5C,OAAP;AACD;;AATsD;;AAWzDX,EAAAA,QAAQ,CAACY,GAAT,CAAaV,UAAb;AACA,QAAMT,QAAQ,GAAG,IAAIC,uBAAJ,CAAmBF,EAAnB,EAAuBQ,QAAvB,CAAjB;AACAL,EAAAA,MAAM,CAACF,QAAQ,CAACG,OAAT,CAAiB,IAAjB,CAAD,CAAN,CAA+BC,aAA/B;AACAF,EAAAA,MAAM,CAACF,QAAQ,CAACG,OAAT,CAAiB,KAAjB,CAAD,CAAN,CAAgCC,aAAhC;AACA,QAAMgB,MAAM,GAAGpB,QAAQ,CAACG,OAAT,CAAiB,EAAjB,CAAf;AACAD,EAAAA,MAAM,CAACkB,MAAD,CAAN,CAAeC,WAAf;AACAnB,EAAAA,MAAM,CAACkB,MAAD,CAAN,CAAeE,cAAf,CAA8Bb,UAA9B;AACAT,EAAAA,QAAQ,CAACK,OAAT;AACD,CAxBG,CAAJ","sourcesContent":["import LoaderResolver from \"./LoaderResolver\";\nimport LoadersRegistry from \"./LoadersRegistry\";\nimport WebGLTextureLoaderSyncHashCache from \"./WebGLTextureLoaderSyncHashCache\";\n\ntest(\"an empty LoaderResolver resolves nothing\", () => {\n  const gl = {};\n  const resolver = new LoaderResolver(gl);\n  expect(resolver.resolve(null)).toBeUndefined();\n  expect(resolver.resolve(42)).toBeUndefined();\n  expect(resolver.resolve(\"foo\")).toBeUndefined();\n  resolver.dispose();\n});\n\ntest(\"LoaderResolver works with one loader\", () => {\n  const gl = {\n    deleteTexture: () => {}\n  };\n  const registry = new LoadersRegistry();\n  class FakeLoader extends WebGLTextureLoaderSyncHashCache {\n    canLoad(input) {\n      return typeof input === \"number\";\n    }\n    inputHash(input) {\n      return input;\n    }\n    getNoCache(input) {\n      return { texture: { id: input }, width: 2, height: 2 };\n    }\n  }\n  registry.add(FakeLoader);\n  const resolver = new LoaderResolver(gl, registry);\n  expect(resolver.resolve(null)).toBeUndefined();\n  expect(resolver.resolve(\"foo\")).toBeUndefined();\n  const loader = resolver.resolve(42);\n  expect(loader).toBeDefined();\n  expect(loader).toBeInstanceOf(FakeLoader);\n  resolver.dispose();\n});\n"],"file":"LoaderResolver.test.js"}