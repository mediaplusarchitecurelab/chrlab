"use strict";

var _WebGLTextureLoaderSyncHashCache = _interopRequireDefault(require("./WebGLTextureLoaderSyncHashCache"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

test("simple usage", () => {
  const gl = {
    deleteTexture: () => {}
  };

  class FakeLoader extends _WebGLTextureLoaderSyncHashCache.default {
    canLoad(input) {
      return typeof input === "number";
    }

    inputHash(input) {
      return input;
    }

    getNoCache(input) {
      return {
        texture: {
          id: input
        },
        width: 2,
        height: 2
      };
    }

  }

  const loader = new FakeLoader(gl);
  expect(loader.get(42)).toMatchObject({
    texture: {
      id: 42
    },
    width: 2,
    height: 2
  });
  expect(loader.get(43)).toMatchObject({
    texture: {
      id: 43
    },
    width: 2,
    height: 2
  });
  loader.dispose();
});
//# sourceMappingURL=WebGLTextureLoaderSyncHashCache.test.js.map