{"version":3,"sources":["../src/LoaderResolver.js"],"names":["LoaderResolver","constructor","gl","registry","globalRegistry","loaders","get","map","L","dispose","forEach","l","resolve","input","find","loader","canLoad"],"mappings":";;;;;;;AAGA;;;;;;AAEe,MAAMA,cAAN,CAAqB;AAGlCC,EAAAA,WAAW,CACTC,EADS,EAETC,QAAyB,GAAGC,uBAFnB,EAGT;AAAA;;AACA,SAAKC,OAAL,GAAeF,QAAQ,CAACG,GAAT,GAAeC,GAAf,CAAmBC,CAAC,IAAI,IAAIA,CAAJ,CAAMN,EAAN,CAAxB,CAAf;AACD;;AAEDO,EAAAA,OAAO,GAAG;AACR,SAAKJ,OAAL,CAAaK,OAAb,CAAqBC,CAAC,IAAIA,CAAC,CAACF,OAAF,EAA1B;AACD;;AAEDG,EAAAA,OAAO,CAAIC,KAAJ,EAAsC;AAC3C,WAAO,KAAKR,OAAL,CAAaS,IAAb,CAAkBC,MAAM,IAAIA,MAAM,CAACC,OAAP,CAAeH,KAAf,CAA5B,CAAP;AACD;;AAhBiC","sourcesContent":["//@flow\nimport type LoadersRegistry from \"./LoadersRegistry\";\nimport type WebGLTextureLoader from \"./WebGLTextureLoader\";\nimport globalRegistry from \"./globalRegistry\";\n\nexport default class LoaderResolver {\n  loaders: Array<WebGLTextureLoader<*>>;\n\n  constructor(\n    gl: WebGLRenderingContext,\n    registry: LoadersRegistry = globalRegistry\n  ) {\n    this.loaders = registry.get().map(L => new L(gl));\n  }\n\n  dispose() {\n    this.loaders.forEach(l => l.dispose());\n  }\n\n  resolve<T>(input: T): ?WebGLTextureLoader<T> {\n    return this.loaders.find(loader => loader.canLoad(input));\n  }\n}\n"],"file":"LoaderResolver.js"}