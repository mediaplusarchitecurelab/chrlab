{"version":3,"sources":["../src/WebGLTextureLoaderAsyncHashCache.test.js"],"names":["test","gl","deleteTexture","FakeLoader","WebGLTextureLoaderAsyncHashCache","canLoad","input","inputHash","loadNoCache","promise","Promise","resolve","texture","id","width","height","dispose","loader","res","load","expect","toMatchObject","get","toBe","toBeUndefined"],"mappings":";;AAAA;;;;AAEAA,IAAI,CAAC,+CAAD,EAAkD,YAAY;AAChE,QAAMC,EAAE,GAAG;AACTC,IAAAA,aAAa,EAAE,MAAM,CAAE;AADd,GAAX;;AAGA,QAAMC,UAAN,SAAyBC,yCAAzB,CAA0D;AACxDC,IAAAA,OAAO,CAACC,KAAD,EAAQ;AACb,aAAO,OAAOA,KAAP,KAAiB,QAAxB;AACD;;AACDC,IAAAA,SAAS,CAACD,KAAD,EAAQ;AACf,aAAOA,KAAP;AACD;;AACDE,IAAAA,WAAW,CAACF,KAAD,EAAQ;AACjB,aAAO;AACLG,QAAAA,OAAO,EAAEC,OAAO,CAACC,OAAR,CAAgB;AACvBC,UAAAA,OAAO,EAAE;AAAEC,YAAAA,EAAE,EAAEP;AAAN,WADc;AAEvBQ,UAAAA,KAAK,EAAE,CAFgB;AAGvBC,UAAAA,MAAM,EAAE;AAHe,SAAhB,CADJ;AAMLC,QAAAA,OAAO,EAAE,MAAM,CAAE;AANZ,OAAP;AAQD;;AAhBuD;;AAkB1D,QAAMC,MAAM,GAAG,IAAId,UAAJ,CAAeF,EAAf,CAAf;AACA,MAAIiB,GAAG,GAAG,MAAMD,MAAM,CAACE,IAAP,CAAY,EAAZ,CAAhB;AACAC,EAAAA,MAAM,CAACF,GAAD,CAAN,CAAYG,aAAZ,CAA0B;AACxBT,IAAAA,OAAO,EAAE;AAAEC,MAAAA,EAAE,EAAE;AAAN,KADe;AAExBC,IAAAA,KAAK,EAAE,CAFiB;AAGxBC,IAAAA,MAAM,EAAE;AAHgB,GAA1B;AAKAK,EAAAA,MAAM,CAACH,MAAM,CAACK,GAAP,CAAW,EAAX,CAAD,CAAN,CAAuBC,IAAvB,CAA4BL,GAA5B,EA7BgE,CA8BhE;;AACAE,EAAAA,MAAM,CAACH,MAAM,CAACK,GAAP,CAAW,EAAX,CAAD,CAAN,CAAuBE,aAAvB;AACAN,EAAAA,GAAG,GAAG,MAAMD,MAAM,CAACE,IAAP,CAAY,EAAZ,CAAZ;AACAC,EAAAA,MAAM,CAACF,GAAD,CAAN,CAAYG,aAAZ,CAA0B;AACxBT,IAAAA,OAAO,EAAE;AAAEC,MAAAA,EAAE,EAAE;AAAN,KADe;AAExBC,IAAAA,KAAK,EAAE,CAFiB;AAGxBC,IAAAA,MAAM,EAAE;AAHgB,GAA1B;AAKAK,EAAAA,MAAM,CAACH,MAAM,CAACK,GAAP,CAAW,EAAX,CAAD,CAAN,CAAuBC,IAAvB,CAA4BL,GAA5B;AACAD,EAAAA,MAAM,CAACD,OAAP;AACD,CAxCG,CAAJ","sourcesContent":["import WebGLTextureLoaderAsyncHashCache from \"./WebGLTextureLoaderAsyncHashCache\";\n\ntest(\"WebGLTextureLoaderAsyncHashCache simple usage\", async () => {\n  const gl = {\n    deleteTexture: () => {}\n  };\n  class FakeLoader extends WebGLTextureLoaderAsyncHashCache {\n    canLoad(input) {\n      return typeof input === \"number\";\n    }\n    inputHash(input) {\n      return input;\n    }\n    loadNoCache(input) {\n      return {\n        promise: Promise.resolve({\n          texture: { id: input },\n          width: 2,\n          height: 2\n        }),\n        dispose: () => {}\n      };\n    }\n  }\n  const loader = new FakeLoader(gl);\n  let res = await loader.load(42);\n  expect(res).toMatchObject({\n    texture: { id: 42 },\n    width: 2,\n    height: 2\n  });\n  expect(loader.get(42)).toBe(res);\n  // test with another value\n  expect(loader.get(43)).toBeUndefined();\n  res = await loader.load(43);\n  expect(res).toMatchObject({\n    texture: { id: 43 },\n    width: 2,\n    height: 2\n  });\n  expect(loader.get(43)).toBe(res);\n  loader.dispose();\n});\n"],"file":"WebGLTextureLoaderAsyncHashCache.test.js"}