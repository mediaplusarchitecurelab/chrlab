{"version":3,"sources":["../src/WebGLTextureLoaderAsyncHashCache.js"],"names":["neverEnding","Promise","WebGLTextureLoaderAsyncHashCache","WebGLTextureLoader","Map","inputHash","input","loadNoCache","promise","reject","Error","dispose","gl","promises","results","inputs","disposes","forEach","d","result","disposeTexture","texture","clear","_disposed","deleteTexture","load","hash","maybePromise","get","set","then","has","delete","cancelLoad"],"mappings":"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","sourcesContent":["//@flow\nimport WebGLTextureLoader from \"./WebGLTextureLoader\";\nimport type { TextureAndSize } from \"./WebGLTextureLoader\";\n\nconst neverEnding = new Promise(() => {});\n\n/**\n * A cache implementation of WebGLTextureLoader with a input hash function\n */\nclass WebGLTextureLoaderAsyncHashCache<T> extends WebGLTextureLoader<T> {\n  inputHash(input: T) {\n    return \"\";\n  }\n  // An async load function that does not cache (WebGLTextureLoaderAsyncHashCache do the caching with inputHash). it also should return a dispose function to cancel a pending load\n  loadNoCache(\n    input: T\n  ): { promise: Promise<TextureAndSize>, dispose: Function } {\n    return {\n      promise: Promise.reject(new Error(\"loadNoCache is not implemented\")),\n      dispose: () => {}\n    };\n  }\n\n  disposes: Map<*, Function> = new Map();\n  inputs: Map<*, T> = new Map();\n  promises: Map<*, Promise<TextureAndSize>> = new Map();\n  results: Map<*, TextureAndSize> = new Map();\n\n  _disposed = false;\n  dispose() {\n    const { gl, promises, results, inputs, disposes } = this;\n    disposes.forEach(d => d());\n    results.forEach(result => {\n      this.disposeTexture(result.texture);\n    });\n    promises.clear();\n    results.clear();\n    inputs.clear();\n    disposes.clear();\n    this._disposed = true;\n  }\n\n  disposeTexture(texture: WebGLTexture) {\n    this.gl.deleteTexture(texture);\n  }\n\n  load(input: T) {\n    const hash = this.inputHash(input);\n    const maybePromise = this.promises.get(hash);\n    if (maybePromise) return maybePromise;\n    const d = this.loadNoCache(input);\n    this.disposes.set(hash, d.dispose);\n    const promise = d.promise.then(result => {\n      if (!this.promises.has(hash)) {\n        return neverEnding;\n      }\n      this.disposes.delete(hash);\n      this.results.set(hash, result);\n      return result;\n    });\n    this.promises.set(hash, promise);\n    return promise;\n  }\n\n  get(input: T) {\n    return this.results.get(this.inputHash(input));\n  }\n\n  cancelLoad(input: T) {\n    const hash = this.inputHash(input);\n    this.promises.delete(hash);\n    const dispose = this.disposes.get(hash);\n    if (dispose) {\n      dispose();\n      this.disposes.delete(hash);\n    }\n  }\n}\n\nexport default WebGLTextureLoaderAsyncHashCache;\n"],"file":"WebGLTextureLoaderAsyncHashCache.js"}