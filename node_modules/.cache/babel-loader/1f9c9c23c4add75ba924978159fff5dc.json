{"ast":null,"code":"var _jsxFileName = \"H:\\\\chrlab\\\\src\\\\component\\\\panelComponent\\\\Canvas\\\\Opencvjs\\\\index.js\";\nimport React, { Component } from 'react';\nimport { Header, Button, Grid } from 'semantic-ui-react';\nimport threeEntryPoint from \"./threejs/threeEntryPoint\";\nimport './canvas.css'; //import * as xml_data from '../assets/opencv/haarcascade_frontalface_default.xml';\n//const xml = new XMLParser().parseFromString(xml_data);\n//const express = require('express');\n//const data = require('../assets/opencv/haarcascade_frontalface_default.xml');\n//const faceCascadeFile = '';\n//import * as util from '../assets/utils.js';\n//import opencvfunc from \"./threejs/opencvfunc\";\n\n/*\r\nconst plug_script = (src) => {\r\n  return new Promise(function(resolve, reject){\r\n    let script = document.createElement('script');\r\n    script.src = src;\r\n    script.addEventListener('load', function () {\r\n      resolve();\r\n    });\r\n    script.addEventListener('error', function (e) {\r\n      reject(e);\r\n    });\r\n    document.body.appendChild(script);\r\n  })\r\n};\r\nconst dat_script = plug_script('./threejs/assets/js/libs/dat.gui.min.js');\r\n*/\n\nexport default class CanvasComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDelayChange = e => {\n      this.setState({\n        delay: Number(e.target.value)\n      });\n    };\n\n    this.tick = () => {\n      this.setState({\n        count: this.state.count + 1\n      });\n\n      if (this.state.sel === 'BWANI') {\n        this.exeCT();\n        let dst = new window.cv.Mat(); // grey\n\n        window.cv.cvtColor(this.state.ctx, dst, window.cv.COLOR_RGB2GRAY, 0);\n        window.cv.imshow('canvasElement', dst);\n        dst.delete();\n      } else if (this.state.sel === 'EDGEANI') {\n        this.exeCT(); // load the image from <img>\n        // !!!!all cv = window.cv ro load!!!\n\n        let dst = new window.cv.Mat(); // grey\n\n        window.cv.cvtColor(this.state.ctx, this.state.ctx, window.cv.COLOR_RGB2GRAY, 0);\n        window.cv.Canny(this.state.ctx, dst, 50, 100, 3, false);\n        window.cv.imshow('canvasElement', dst); //this.state.ctx.delete(); \n\n        dst.delete();\n      } else if (this.state.sel === 'FACEANI') {\n        this.exeCT();\n        let dst = new window.cv.Mat(); // grey\n\n        window.cv.cvtColor(this.state.ctx, dst, window.cv.COLOR_RGB2GRAY, 0); // identify\n\n        let faces = new window.cv.RectVector();\n        let eyes = new window.cv.RectVector(); //let eyeCascade = new window.cv.CascadeClassifier();\n        // error message\n        //let utils = new Utils('errorMessage'); //use utils class\n        // load pre-trained classifiers\n        // utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n        //     faceCascade.load(faceCascadeFile); // in the callback, load the cascade from file \n        // });\n        // detect faces\n\n        let msize = new window.cv.Size(0, 0);\n        this.state.faceCascade = new window.cv.CascadeClassifier();\n\n        if (this.state.faceCascadeURL !== null) {\n          //console.log(this.state.faceCascadeFile)\n          this.state.faceCascade.load(this.state.faceCascadeURL);\n          this.state.faceCascade.detectMultiScale(dst, faces, 1.1, 3, 0, msize, msize);\n\n          for (let i = 0; i < faces.size(); ++i) {\n            let roiGray = dst.roi(faces.get(i));\n            let roiSrc = this.state.ctx.roi(faces.get(i));\n            let point1 = new window.cv.Point(faces.get(i).x, faces.get(i).y);\n            let point2 = new window.cv.Point(faces.get(i).x + faces.get(i).width, faces.get(i).y + faces.get(i).height);\n            window.cv.rectangle(this.state.ctx, point1, point2, [255, 0, 0, 255]);\n            roiGray.delete();\n            roiSrc.delete();\n          }\n        }\n        /*\r\n                  this.state.faceCascade.detectMultiScale(dst, faces, 1.1, 3, 0, msize, msize);\r\n                  for (let i = 0; i < faces.size(); ++i) {\r\n                    let roiGray = dst.roi(faces.get(i));\r\n                    let roiSrc = this.state.ctx.roi(faces.get(i));\r\n                    let point1 = new window.cv.Point(faces.get(i).x, faces.get(i).y);\r\n                    let point2 = new window.cv.Point(faces.get(i).x + faces.get(i).width,\r\n                                              faces.get(i).y + faces.get(i).height);\r\n                    window.cv.rectangle(this.state.ctx, point1, point2, [255, 0, 0, 255]);\r\n                    roiGray.delete(); roiSrc.delete();\r\n                    }\r\n                // !!!!all cv = window.cv ro load!!!\r\n        /*\r\n        if (this.state.faceCascadeFile !== null){\r\n            \r\n                  \r\n        /*\r\n            this.state.faceCascade = new window.cv.CascadeClassifier();\r\n            utils.createFileFromUrl(this.state.faceCascadeFile, this.state.faceCascadeFile, () => {\r\n                this.state.faceCascade.load(this.state.faceCascadeFile); // in the callback, load the cascade from file \r\n            });\r\n            \r\n            console.log(this.state.faceCascade);\r\n            this.state.faceCascade = new window.cv.CascadeClassifier();\r\n            this.state.faceCascade.load(this.state.faceCascadeFile);\r\n            this.state.faceCascade.detectMultiScale(dst, faces, 1.1, 3, 0, msize, msize);\r\n            \r\n            for (let i = 0; i < faces.size(); ++i) {\r\n                let roiGray = dst.roi(faces.get(i));\r\n                let roiSrc = this.state.ctx.roi(faces.get(i));\r\n                let point1 = new window.cv.Point(faces.get(i).x, faces.get(i).y);\r\n                let point2 = new window.cv.Point(faces.get(i).x + faces.get(i).width,\r\n                                          faces.get(i).y + faces.get(i).height);\r\n                window.cv.rectangle(this.state.ctx, point1, point2, [255, 0, 0, 255]);\r\n                roiGray.delete(); roiSrc.delete();\r\n            }\r\n            \r\n        }else{\r\n            \r\n            \r\n            \r\n            utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\r\n                this.state.faceCascade = new window.cv.CascadeClassifier();\r\n                this.state.faceCascade.load(faceCascadeFile); // in the callback, load the cascade from file \r\n            });\r\n            \r\n            \r\n            fetch('./assets/opencv/haarcascade_frontalface_default.xml')\r\n            .then(response => response.blob())\r\n            .then(response =>{\r\n                      this.state.faceCascade = new window.cv.CascadeClassifier();\r\n                    this.state.faceCascade.load(response);   \r\n            });\r\n            \r\n            var blob = null;\r\n            var xhr = new XMLHttpRequest();\r\n            xhr.open('GET', './assets/opencv/haarcascade_frontalface_default.xml')\r\n            xhr.responseType = \"xml\"\r\n            xhr.onload = function() \r\n            {\r\n                blob = xhr.response;\r\n                this.state.faceCascade = new window.cv.CascadeClassifier();\r\n                this.state.faceCascade.load(blob);                \r\n            }\r\n            \r\n          }\r\n        \r\n        fetch('./assets/opencv/haarcascade_frontalface_default.xml').then(function(response) {\r\n              if(response.ok) {\r\n                return response.blob();\r\n              }\r\n              throw new Error('Network response was not ok.');\r\n            }).then(function(myBlob) { \r\n                  this.state.faceCascadeFile = window.URL.createObjectURL(myBlob);\r\n                  \r\n              }).catch(function(error) {\r\n              console.log('There has been a problem with your fetch operation: ', error.message);\r\n            });\r\n        /*\r\n        for (let i = 0; i < faces.size(); ++i) {\r\n        }\r\n        for (let i = 0; i < faces.size(); ++i) {\r\n        let roiGray = dst.roi(faces.get(i));\r\n        let roiSrc = this.state.ctx.roi(faces.get(i));\r\n        let point1 = new window.cv.Point(faces.get(i).x, faces.get(i).y);\r\n        let point2 = new window.cv.Point(faces.get(i).x + faces.get(i).width,\r\n                                  faces.get(i).y + faces.get(i).height);\r\n        window.cv.rectangle(this.state.ctx, point1, point2, [255, 0, 0, 255]);\r\n        \r\n        }\r\n        for (let i = 0; i < faces.size(); ++i) {\r\n        let roiGray = dst.roi(faces.get(i));\r\n        let roiSrc = this.state.ctx.roi(faces.get(i));\r\n        let point1 = new window.cv.Point(faces.get(i).x, faces.get(i).y);\r\n        let point2 = new window.cv.Point(faces.get(i).x + faces.get(i).width,\r\n                                  faces.get(i).y + faces.get(i).height);\r\n        window.cv.rectangle(this.state.ctx, point1, point2, [255, 0, 0, 255]);\r\n        // detect eyes in face ROI\r\n        eyeCascade.detectMultiScale(roiGray, eyes);\r\n        for (let j = 0; j < eyes.size(); ++j) {\r\n            let point1 = new window.cv.Point(eyes.get(j).x, eyes.get(j).y);\r\n            let point2 = new window.cv.Point(eyes.get(j).x + eyes.get(j).width,\r\n                                      eyes.get(j).y + eyes.get(i).height);\r\n            window.cv.rectangle(roiSrc, point1, point2, [0, 0, 255, 255]);\r\n        }\r\n        roiGray.delete(); roiSrc.delete();\r\n        }\r\n        */\n\n\n        window.cv.imshow('canvasElement', dst); //this.state.ctx.delete(); \n\n        dst.delete(); //this.state.faceCascade.delete();\n        //eyeCascade.delete(); \n\n        faces.delete();\n        eyes.delete();\n      }\n    };\n\n    this.exeCT = () => {\n      var width = this.state.video.offsetWidth,\n          height = this.state.video.offsetHeight;\n      var canvas = document.getElementById('canvasElement');\n      canvas.width = width;\n      canvas.height = height;\n      var ctx = canvas.getContext('2d');\n      ctx.drawImage(this.state.video, 0, 0, width, height);\n      this.state.ctx = window.cv.imread('canvasElement');\n    };\n\n    this.exeBW = () => {\n      this.exeCT(); // load the image from <img>\n\n      this.state.sel = 'BW'; // !!!!all cv = window.cv ro load!!!\n\n      let dst = new window.cv.Mat(); // grey\n\n      window.cv.cvtColor(this.state.ctx, dst, window.cv.COLOR_RGB2GRAY, 0);\n      window.cv.imshow('canvasElement', dst); //this.state.ctx.delete(); \n\n      dst.delete();\n    };\n\n    this.exeEDGE = () => {\n      this.exeCT(); // load the image from <img>\n\n      this.state.sel = 'EDGE'; // !!!!all cv = window.cv ro load!!!\n\n      let dst = new window.cv.Mat(); // grey\n\n      window.cv.cvtColor(this.state.ctx, this.state.ctx, window.cv.COLOR_RGB2GRAY, 0);\n      window.cv.Canny(this.state.ctx, dst, 50, 100, 3, false);\n      window.cv.imshow('canvasElement', dst); //this.state.ctx.delete(); \n\n      dst.delete();\n    };\n\n    this.exeBWANI = () => {\n      this.state.sel = 'BWANI';\n    };\n\n    this.exeEDGEANI = () => {\n      this.state.sel = 'EDGEANI';\n    };\n\n    this.exeFACEANI = () => {\n      // load the image from <img>\n      this.state.sel = 'FACEANI';\n    };\n\n    this.state = {\n      activeItem: this.props.activeItem,\n      ctx: null,\n      video: null,\n      delay: 100,\n      count: 0,\n      sel: null,\n      faceCascade: null,\n      faceCascadeURL: null\n    }; //console.log(data);\n    //this.state.faceCascadeFile = URL.createObjectURL();\n    //var cv;\n\n    /*\r\n    setTimeout(() => {\r\n        const response = {\r\n          file: './assets/opencv/haarcascade_frontalface_default.xml',\r\n        };\r\n        // server sent the url to the file!\r\n        // now, let's download:\r\n        this.state.faceCascadeFile=response.file;\r\n        // you could also do:\r\n        // window.location.href = response.file;\r\n      }, 100);\r\n      */\n  }\n\n  componentDidMount() {\n    threeEntryPoint(this.threeRootElement);\n\n    if (this.state) {\n      var video = document.querySelector('#videoElement');\n      this.state.video = video;\n      navigator.mediaDevices.getUserMedia({\n        video: true\n      }) // audio:true\n      .then(function (stream) {\n        if (\"srcObject\" in video) {\n          video.srcObject = stream;\n        } else {\n          video.src = window.URL.createObjectURL(stream);\n        } // if webcam execute\n\n\n        video.onloadedmetadata = function (e) {\n          video.play();\n        };\n      }).catch(function (err) {\n        console.log(err.name + \": \" + err.message);\n      });\n    } // load opencv\n\n\n    const script = document.createElement('script');\n    script.type = 'text/javascript';\n\n    if (script.readyState) {\n      //IE\n      script.onreadystatechange = function () {\n        if (script.readyState == \"loaded\" || script.readyState == \"complete\") {\n          script.onreadystatechange = null; //callback();\n        }\n      };\n    } else {\n      //Others\n      script.onload = function () {\n        document.getElementById('loading-opencv').innerHTML = 'opencv loaded...'; //console.log(window.cv);\n        //var src = cv.imread(document.getElementById('src-image'));\n      };\n    }\n\n    script.src = './assets/opencv/opencv.js'; //\"./assets/opencv/opencv.js\";\n\n    document.getElementsByTagName('head')[0].appendChild(script);\n    this.interval = setInterval(this.tick, this.state.delay); //console.log(xml_data);\n\n    /*\r\n    fetch('../assets/opencv/haarcascade_frontalface_default.xml').then(function(response) {\r\n            if(response.ok) {\r\n                return response;\r\n            }\r\n              throw new Error('Network response was not ok.');\r\n        }).catch(function(error) {\r\n            console.log('There has been a problem with your fetch operation: ', error.message);\r\n        }).then(response => {\r\n            //var binaryData = [];\r\n            //binaryData.push(data);\r\n            //this.state.faceCascadeFile = window.URL.createObjectURL(new Blob(binaryData, {type: \"xml\"}));\r\n            //const parser = new DOMParser();\r\n            //const xml = parser.parseFromString(readerData, \"text/xml\");\r\n            this.state.faceCascadeURL = response.url;\r\n        });\r\n        //\r\n    /*\r\n    let request = new XMLHttpRequest();\r\n    request.open('GET', './assets/opencv/haarcascade_frontalface_default.xml', true);\r\n    request.responseType = 'xml';\r\n    request.onload = function(ev) {\r\n        console.log('a');\r\n        request = this;\r\n        if (request.readyState === 4) {\r\n            if (request.status === 200) {\r\n                let data = new Uint8Array(request.response);\r\n                this.state.faceCascadeFile = data;\r\n                //window.cv.FS_createDataFile('/', './assets/opencv/haarcascade_frontalface_default2.xml', data, true, false, false);\r\n                    //callback();\r\n            } else {\r\n                console.error('Failed to load ' + './assets/opencv/haarcascade_frontalface_default.xml' + ' status: ' + request.status);\r\n            }\r\n        }else {\r\n                console.error('Failed to load ' + './assets/opencv/haarcascade_frontalface_default.xml' + ' status: ' + request.status);\r\n        }\r\n    };\r\n      const response = await fetch('../assets/opencv/haarcascade_frontalface_default.xml', {\r\n      method: 'PUT'\r\n    })\r\n    .then(response => this.state.faceCascadeFile = response)\r\n    .catch(error => console.error('Error:', error))\r\n    .then(response => console.log('Success:', response));\r\n    /*\r\n    fetch('../assets/opencv/haarcascade_frontalface_default.xml').then(function(response) {\r\n        if(response.ok) {\r\n            //this.state.faceCascadeFile = response;\r\n            return response;\r\n        }\r\n            throw new Error('Network response was not ok.');\r\n        }).then(function(myBlob) { \r\n            this.state.faceCascadeFile = myBlob;\r\n          }).catch(function(error) {\r\n            console.log('There has been a problem with your fetch operation: ', error.message);\r\n        }); \r\n    /*\r\n        let request = new XMLHttpRequest();\r\n        request.open('GET', './assets/opencv/haarcascade_frontalface_default.xml', true);\r\n        request.responseType = 'arraybuffer';\r\n        request.onload = function(ev) {\r\n            request = this;\r\n            if (request.readyState === 4) {\r\n                if (request.status === 200) {\r\n                    let data = new Uint8Array(request.response);\r\n                    window.cv.FS_createDataFile('/', './assets/opencv/haarcascade_frontalface_default2.xml', data, true, false, false);\r\n                    //callback();\r\n                } else {\r\n                    console.error('Failed to load ' + './assets/opencv/haarcascade_frontalface_default.xml' + ' status: ' + request.status);\r\n                }\r\n            }\r\n        };\r\n        request.send();\r\n        fetch('./assets/opencv/haarcascade_frontalface_default.xml').then(function(response) {\r\n        if(response.ok) {\r\n            return response.text();\r\n        }\r\n            throw new Error('Network response was not ok.');\r\n        }).then(function(myBlob) { \r\n            this.state.faceCascadeFile = window.URL.createObjectURL(myBlob);\r\n          }).catch(function(error) {\r\n            console.log('There has been a problem with your fetch operation: ', error.message);\r\n        }); \r\n    */\n  } // interval //\n\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.delay !== this.state.delay) {\n      clearInterval(this.interval);\n      this.interval = setInterval(this.tick, this.state.delay);\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"panel-canvas\",\n      className: \"panel-canvas\",\n      ref: element => this.threeRootElement = element,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"canvas-gui-container\",\n      style: {\n        position: 'absolute',\n        right: '20px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"infoCanvas\",\n      style: {\n        color: 'red',\n        fontFamily: 'Titillium Web',\n        position: 'fixed'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        position: 'absolute',\n        margin: '20px 20px 20px 20px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      as: \"h2\",\n      key: this.state.activeItem,\n      style: {\n        color: 'black',\n        fontFamily: 'Titillium Web'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 21\n      }\n    }, this.state.activeItem.toUpperCase()), /*#__PURE__*/React.createElement(\"div\", {\n      as: \"h6\",\n      id: \"loading-opencv\",\n      style: {\n        color: 'red',\n        fontFamily: 'Titillium Web',\n        marginTop: '-10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 21\n      }\n    }, \"loading Opencv...\")), /*#__PURE__*/React.createElement(\"video\", {\n      autoPlay: true,\n      id: \"videoElement\",\n      style: {\n        position: 'absolute',\n        display: 'block',\n        marginLeft: '2.5%',\n        marginTop: '80px',\n        height: '60%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"canvas\", {\n      autoPlay: true,\n      id: \"canvasElement\",\n      style: {\n        position: 'absolute',\n        display: 'block',\n        marginLeft: '52.5%',\n        marginTop: '80px',\n        height: '60%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      style: {\n        position: 'absolute',\n        bottom: '5%',\n        width: '132.5%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 25\n      }\n    }, \" \", /*#__PURE__*/React.createElement(Button, {\n      id: \"exeBW\",\n      size: \"mini\",\n      inverted: true,\n      color: \"blue\",\n      onClick: () => this.exeBW(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 49\n      }\n    }, \"BW\"), \" \"), /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 25\n      }\n    }, \" \", /*#__PURE__*/React.createElement(Button, {\n      id: \"exeEdge\",\n      size: \"mini\",\n      inverted: true,\n      color: \"blue\",\n      onClick: () => this.exeEDGE(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 49\n      }\n    }, \"EDGE\"), \" \"), /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 25\n      }\n    }, \" \", /*#__PURE__*/React.createElement(Button, {\n      id: \"exeBWani\",\n      size: \"mini\",\n      inverted: true,\n      color: \"red\",\n      onClick: () => this.exeBWANI(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 49\n      }\n    }, \"BWani\"), \" \"), /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 25\n      }\n    }, \" \", /*#__PURE__*/React.createElement(Button, {\n      id: \"exeEdgeani\",\n      size: \"mini\",\n      inverted: true,\n      color: \"red\",\n      onClick: () => this.exeEDGEANI(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 49\n      }\n    }, \"EDGEani\"), \" \"), /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 25\n      }\n    }, \" \", /*#__PURE__*/React.createElement(Button, {\n      id: \"exeFaceani\",\n      size: \"mini\",\n      inverted: true,\n      color: \"red\",\n      onClick: () => this.exeFACEANI(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 49\n      }\n    }, \"FACEani\"), \" \"))));\n  }\n\n}","map":{"version":3,"sources":["H:/chrlab/src/component/panelComponent/Canvas/Opencvjs/index.js"],"names":["React","Component","Header","Button","Grid","threeEntryPoint","CanvasComponent","constructor","props","handleDelayChange","e","setState","delay","Number","target","value","tick","count","state","sel","exeCT","dst","window","cv","Mat","cvtColor","ctx","COLOR_RGB2GRAY","imshow","delete","Canny","faces","RectVector","eyes","msize","Size","faceCascade","CascadeClassifier","faceCascadeURL","load","detectMultiScale","i","size","roiGray","roi","get","roiSrc","point1","Point","x","y","point2","width","height","rectangle","video","offsetWidth","offsetHeight","canvas","document","getElementById","getContext","drawImage","imread","exeBW","exeEDGE","exeBWANI","exeEDGEANI","exeFACEANI","activeItem","componentDidMount","threeRootElement","querySelector","navigator","mediaDevices","getUserMedia","then","stream","srcObject","src","URL","createObjectURL","onloadedmetadata","play","catch","err","console","log","name","message","script","createElement","type","readyState","onreadystatechange","onload","innerHTML","getElementsByTagName","appendChild","interval","setInterval","componentDidUpdate","prevProps","prevState","clearInterval","componentWillUnmount","render","element","position","right","color","fontFamily","margin","toUpperCase","marginTop","display","marginLeft","bottom"],"mappings":"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","sourcesContent":["\r\nimport React, { Component } from 'react';\r\nimport { Header, Button, Grid} from 'semantic-ui-react';\r\nimport threeEntryPoint from \"./threejs/threeEntryPoint\";\r\nimport './canvas.css';\r\n\r\n//import * as xml_data from '../assets/opencv/haarcascade_frontalface_default.xml';\r\n\r\n//const xml = new XMLParser().parseFromString(xml_data);\r\n//const express = require('express');\r\n//const data = require('../assets/opencv/haarcascade_frontalface_default.xml');\r\n//const faceCascadeFile = '';\r\n//import * as util from '../assets/utils.js';\r\n//import opencvfunc from \"./threejs/opencvfunc\";\r\n/*\r\nconst plug_script = (src) => {\r\n  return new Promise(function(resolve, reject){\r\n    let script = document.createElement('script');\r\n    script.src = src;\r\n    script.addEventListener('load', function () {\r\n      resolve();\r\n    });\r\n    script.addEventListener('error', function (e) {\r\n      reject(e);\r\n    });\r\n    document.body.appendChild(script);\r\n  })\r\n};\r\nconst dat_script = plug_script('./threejs/assets/js/libs/dat.gui.min.js');\r\n*/\r\nexport default class CanvasComponent extends Component {\r\n    \r\n\r\n\tconstructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activeItem: this.props.activeItem,\r\n            ctx: null,\r\n            video:null,\r\n            delay:100,\r\n            count:0,\r\n            sel:null,\r\n            faceCascade:null,\r\n            faceCascadeURL: null\r\n        };\r\n        //console.log(data);\r\n         //this.state.faceCascadeFile = URL.createObjectURL();\r\n        //var cv;\r\n        /*\r\n        setTimeout(() => {\r\n            const response = {\r\n              file: './assets/opencv/haarcascade_frontalface_default.xml',\r\n            };\r\n            // server sent the url to the file!\r\n            // now, let's download:\r\n            this.state.faceCascadeFile=response.file;\r\n            // you could also do:\r\n            // window.location.href = response.file;\r\n          }, 100);\r\n          */\r\n          \r\n          \r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n\t    threeEntryPoint(this.threeRootElement);\r\n\r\n        \r\n        if (this.state){\r\n            var video = document.querySelector('#videoElement');\r\n            this.state.video = video;\r\n            navigator.mediaDevices.getUserMedia({ video: true }) // audio:true\r\n            .then(function(stream) {\r\n                if (\"srcObject\" in video) {\r\n                    video.srcObject = stream;\r\n                } else {\r\n                    video.src = window.URL.createObjectURL(stream);\r\n                }\r\n                // if webcam execute\r\n                video.onloadedmetadata = function(e) {\r\n                    video.play();\r\n                };\r\n            })\r\n            .catch(function(err) {\r\n                console.log(err.name + \": \" + err.message);\r\n            });\r\n        }\r\n\r\n        // load opencv\r\n        const script = document.createElement('script');\r\n        script.type = 'text/javascript';\r\n        if (script.readyState){  //IE\r\n            script.onreadystatechange = function(){\r\n                if (script.readyState == \"loaded\" ||\r\n                        script.readyState == \"complete\"){\r\n                    script.onreadystatechange = null;\r\n                    //callback();\r\n                }\r\n            };\r\n        } else {  //Others\r\n            script.onload = function(){\r\n                document.getElementById('loading-opencv').innerHTML='opencv loaded...';\r\n                //console.log(window.cv);\r\n                //var src = cv.imread(document.getElementById('src-image'));\r\n            };\r\n        }\r\n\r\n\r\n        script.src = './assets/opencv/opencv.js';\r\n        //\"./assets/opencv/opencv.js\";\r\n        document.getElementsByTagName('head')[0].appendChild(script);\r\n          \r\n        this.interval = setInterval(this.tick, this.state.delay);\r\n\r\n        //console.log(xml_data);\r\n        /*\r\n        fetch('../assets/opencv/haarcascade_frontalface_default.xml').then(function(response) {\r\n                if(response.ok) {\r\n                    return response;\r\n                }\r\n\r\n                throw new Error('Network response was not ok.');\r\n            }).catch(function(error) {\r\n                console.log('There has been a problem with your fetch operation: ', error.message);\r\n            }).then(response => {\r\n                //var binaryData = [];\r\n                //binaryData.push(data);\r\n                //this.state.faceCascadeFile = window.URL.createObjectURL(new Blob(binaryData, {type: \"xml\"}));\r\n                //const parser = new DOMParser();\r\n                //const xml = parser.parseFromString(readerData, \"text/xml\");\r\n                this.state.faceCascadeURL = response.url;\r\n            });\r\n            //\r\n/*\r\n        let request = new XMLHttpRequest();\r\n        request.open('GET', './assets/opencv/haarcascade_frontalface_default.xml', true);\r\n        request.responseType = 'xml';\r\n        request.onload = function(ev) {\r\n            console.log('a');\r\n            request = this;\r\n            if (request.readyState === 4) {\r\n                if (request.status === 200) {\r\n                    let data = new Uint8Array(request.response);\r\n                    this.state.faceCascadeFile = data;\r\n                    //window.cv.FS_createDataFile('/', './assets/opencv/haarcascade_frontalface_default2.xml', data, true, false, false);\r\n                        //callback();\r\n                } else {\r\n                    console.error('Failed to load ' + './assets/opencv/haarcascade_frontalface_default.xml' + ' status: ' + request.status);\r\n                }\r\n            }else {\r\n                    console.error('Failed to load ' + './assets/opencv/haarcascade_frontalface_default.xml' + ' status: ' + request.status);\r\n            }\r\n        };\r\n\r\n        const response = await fetch('../assets/opencv/haarcascade_frontalface_default.xml', {\r\n          method: 'PUT'\r\n        })\r\n        .then(response => this.state.faceCascadeFile = response)\r\n        .catch(error => console.error('Error:', error))\r\n        .then(response => console.log('Success:', response));\r\n        /*\r\n        fetch('../assets/opencv/haarcascade_frontalface_default.xml').then(function(response) {\r\n            if(response.ok) {\r\n                //this.state.faceCascadeFile = response;\r\n                return response;\r\n            }\r\n                throw new Error('Network response was not ok.');\r\n            }).then(function(myBlob) { \r\n                this.state.faceCascadeFile = myBlob;\r\n\r\n            }).catch(function(error) {\r\n                console.log('There has been a problem with your fetch operation: ', error.message);\r\n            }); \r\n/*\r\n            let request = new XMLHttpRequest();\r\n            request.open('GET', './assets/opencv/haarcascade_frontalface_default.xml', true);\r\n            request.responseType = 'arraybuffer';\r\n            request.onload = function(ev) {\r\n                request = this;\r\n                if (request.readyState === 4) {\r\n                    if (request.status === 200) {\r\n                        let data = new Uint8Array(request.response);\r\n                        window.cv.FS_createDataFile('/', './assets/opencv/haarcascade_frontalface_default2.xml', data, true, false, false);\r\n                        //callback();\r\n                    } else {\r\n                        console.error('Failed to load ' + './assets/opencv/haarcascade_frontalface_default.xml' + ' status: ' + request.status);\r\n                    }\r\n                }\r\n            };\r\n            request.send();\r\n\r\n\r\n        fetch('./assets/opencv/haarcascade_frontalface_default.xml').then(function(response) {\r\n            if(response.ok) {\r\n                return response.text();\r\n            }\r\n                throw new Error('Network response was not ok.');\r\n            }).then(function(myBlob) { \r\n                this.state.faceCascadeFile = window.URL.createObjectURL(myBlob);\r\n\r\n            }).catch(function(error) {\r\n                console.log('There has been a problem with your fetch operation: ', error.message);\r\n            }); \r\n*/\r\n    }\r\n\r\n    // interval //\r\n    \r\n    componentDidUpdate(prevProps, prevState) {    \r\n        if (prevState.delay !== this.state.delay) {      \r\n            clearInterval(this.interval);      \r\n            this.interval = setInterval(this.tick, this.state.delay);    \r\n        }  \r\n    }\r\n\r\n    handleDelayChange = (e) => {\r\n        this.setState({ delay: Number(e.target.value) });\r\n\r\n    }\r\n\r\n    componentWillUnmount() {    \r\n        clearInterval(this.interval);  \r\n    }  \r\n\r\n    tick = () => {    \r\n        this.setState({      \r\n            count: this.state.count + 1    \r\n        }); \r\n        if (this.state.sel === 'BWANI'){\r\n            this.exeCT();\r\n            let dst = new window.cv.Mat(); // grey\r\n            window.cv.cvtColor(this.state.ctx, dst, window.cv.COLOR_RGB2GRAY, 0);\r\n\r\n            window.cv.imshow('canvasElement', dst);\r\n            dst.delete();\r\n        }else if (this.state.sel === 'EDGEANI'){\r\n            this.exeCT();  // load the image from <img>\r\n            // !!!!all cv = window.cv ro load!!!\r\n            let dst = new window.cv.Mat(); // grey\r\n            window.cv.cvtColor(this.state.ctx, this.state.ctx, window.cv.COLOR_RGB2GRAY, 0);\r\n            window.cv.Canny(this.state.ctx, dst, 50, 100, 3, false); \r\n            window.cv.imshow('canvasElement', dst);\r\n            //this.state.ctx.delete(); \r\n            dst.delete();\r\n\r\n        }else if (this.state.sel === 'FACEANI'){\r\n            this.exeCT();  \r\n            let dst = new window.cv.Mat(); // grey\r\n            window.cv.cvtColor(this.state.ctx, dst, window.cv.COLOR_RGB2GRAY, 0);\r\n        // identify\r\n            let faces = new window.cv.RectVector();\r\n            let eyes = new window.cv.RectVector();\r\n\r\n        //let eyeCascade = new window.cv.CascadeClassifier();\r\n\r\n        // error message\r\n            //let utils = new Utils('errorMessage'); //use utils class\r\n        // load pre-trained classifiers\r\n            \r\n       // utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\r\n       //     faceCascade.load(faceCascadeFile); // in the callback, load the cascade from file \r\n       // });\r\n        \r\n        // detect faces\r\n            let msize = new window.cv.Size(0, 0);\r\n\r\n            this.state.faceCascade = new window.cv.CascadeClassifier();\r\n            if (this.state.faceCascadeURL !== null){\r\n                \r\n                //console.log(this.state.faceCascadeFile)\r\n                this.state.faceCascade.load(this.state.faceCascadeURL);\r\n                this.state.faceCascade.detectMultiScale(dst, faces, 1.1, 3, 0, msize, msize);\r\n                \r\n                for (let i = 0; i < faces.size(); ++i) {\r\n                        let roiGray = dst.roi(faces.get(i));\r\n                        let roiSrc = this.state.ctx.roi(faces.get(i));\r\n                        let point1 = new window.cv.Point(faces.get(i).x, faces.get(i).y);\r\n                        let point2 = new window.cv.Point(faces.get(i).x + faces.get(i).width,\r\n                                                  faces.get(i).y + faces.get(i).height);\r\n                        window.cv.rectangle(this.state.ctx, point1, point2, [255, 0, 0, 255]);\r\n                        roiGray.delete(); roiSrc.delete();\r\n                }\r\n                \r\n            }\r\n            /*\r\n                      this.state.faceCascade.detectMultiScale(dst, faces, 1.1, 3, 0, msize, msize);\r\n                      for (let i = 0; i < faces.size(); ++i) {\r\n                        let roiGray = dst.roi(faces.get(i));\r\n                        let roiSrc = this.state.ctx.roi(faces.get(i));\r\n                        let point1 = new window.cv.Point(faces.get(i).x, faces.get(i).y);\r\n                        let point2 = new window.cv.Point(faces.get(i).x + faces.get(i).width,\r\n                                                  faces.get(i).y + faces.get(i).height);\r\n                        window.cv.rectangle(this.state.ctx, point1, point2, [255, 0, 0, 255]);\r\n                        roiGray.delete(); roiSrc.delete();\r\n                        }\r\n                    // !!!!all cv = window.cv ro load!!!\r\n/*\r\n            if (this.state.faceCascadeFile !== null){\r\n                \r\n                      \r\n/*\r\n                this.state.faceCascade = new window.cv.CascadeClassifier();\r\n                utils.createFileFromUrl(this.state.faceCascadeFile, this.state.faceCascadeFile, () => {\r\n                    this.state.faceCascade.load(this.state.faceCascadeFile); // in the callback, load the cascade from file \r\n                });\r\n                \r\n                console.log(this.state.faceCascade);\r\n                this.state.faceCascade = new window.cv.CascadeClassifier();\r\n                this.state.faceCascade.load(this.state.faceCascadeFile);\r\n                this.state.faceCascade.detectMultiScale(dst, faces, 1.1, 3, 0, msize, msize);\r\n                \r\n                for (let i = 0; i < faces.size(); ++i) {\r\n                    let roiGray = dst.roi(faces.get(i));\r\n                    let roiSrc = this.state.ctx.roi(faces.get(i));\r\n                    let point1 = new window.cv.Point(faces.get(i).x, faces.get(i).y);\r\n                    let point2 = new window.cv.Point(faces.get(i).x + faces.get(i).width,\r\n                                              faces.get(i).y + faces.get(i).height);\r\n                    window.cv.rectangle(this.state.ctx, point1, point2, [255, 0, 0, 255]);\r\n                    roiGray.delete(); roiSrc.delete();\r\n                }\r\n                \r\n            }else{\r\n                \r\n                \r\n                \r\n                utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\r\n                    this.state.faceCascade = new window.cv.CascadeClassifier();\r\n                    this.state.faceCascade.load(faceCascadeFile); // in the callback, load the cascade from file \r\n                });\r\n                \r\n                \r\n                fetch('./assets/opencv/haarcascade_frontalface_default.xml')\r\n                .then(response => response.blob())\r\n                .then(response =>{\r\n\r\n                        this.state.faceCascade = new window.cv.CascadeClassifier();\r\n                        this.state.faceCascade.load(response);   \r\n                });\r\n                \r\n                var blob = null;\r\n                var xhr = new XMLHttpRequest();\r\n                xhr.open('GET', './assets/opencv/haarcascade_frontalface_default.xml')\r\n                xhr.responseType = \"xml\"\r\n                xhr.onload = function() \r\n                {\r\n                    blob = xhr.response;\r\n                    this.state.faceCascade = new window.cv.CascadeClassifier();\r\n                    this.state.faceCascade.load(blob);                \r\n                }\r\n                \r\n\r\n            }\r\n            \r\n            fetch('./assets/opencv/haarcascade_frontalface_default.xml').then(function(response) {\r\n                  if(response.ok) {\r\n                    return response.blob();\r\n                  }\r\n                  throw new Error('Network response was not ok.');\r\n                }).then(function(myBlob) { \r\n                      this.state.faceCascadeFile = window.URL.createObjectURL(myBlob);\r\n                      \r\n\r\n                }).catch(function(error) {\r\n                  console.log('There has been a problem with your fetch operation: ', error.message);\r\n                });\r\n/*\r\n        for (let i = 0; i < faces.size(); ++i) {\r\n\r\n        }\r\n\r\n        for (let i = 0; i < faces.size(); ++i) {\r\n            let roiGray = dst.roi(faces.get(i));\r\n            let roiSrc = this.state.ctx.roi(faces.get(i));\r\n            let point1 = new window.cv.Point(faces.get(i).x, faces.get(i).y);\r\n            let point2 = new window.cv.Point(faces.get(i).x + faces.get(i).width,\r\n                                      faces.get(i).y + faces.get(i).height);\r\n            window.cv.rectangle(this.state.ctx, point1, point2, [255, 0, 0, 255]);\r\n            \r\n\r\n        }\r\n\r\n        for (let i = 0; i < faces.size(); ++i) {\r\n            let roiGray = dst.roi(faces.get(i));\r\n            let roiSrc = this.state.ctx.roi(faces.get(i));\r\n            let point1 = new window.cv.Point(faces.get(i).x, faces.get(i).y);\r\n            let point2 = new window.cv.Point(faces.get(i).x + faces.get(i).width,\r\n                                      faces.get(i).y + faces.get(i).height);\r\n            window.cv.rectangle(this.state.ctx, point1, point2, [255, 0, 0, 255]);\r\n            // detect eyes in face ROI\r\n            eyeCascade.detectMultiScale(roiGray, eyes);\r\n            for (let j = 0; j < eyes.size(); ++j) {\r\n                let point1 = new window.cv.Point(eyes.get(j).x, eyes.get(j).y);\r\n                let point2 = new window.cv.Point(eyes.get(j).x + eyes.get(j).width,\r\n                                          eyes.get(j).y + eyes.get(i).height);\r\n                window.cv.rectangle(roiSrc, point1, point2, [0, 0, 255, 255]);\r\n            }\r\n            roiGray.delete(); roiSrc.delete();\r\n        }\r\n*/\r\n        window.cv.imshow('canvasElement', dst);\r\n\r\n        //this.state.ctx.delete(); \r\n        dst.delete();\r\n        //this.state.faceCascade.delete();\r\n        //eyeCascade.delete(); \r\n        faces.delete(); \r\n        eyes.delete();\r\n        } \r\n    }\r\n  \r\n\r\n\texeCT = () =>{\r\n        var width = this.state.video.offsetWidth, \r\n            height = this.state.video.offsetHeight;\r\n\r\n        var canvas = document.getElementById('canvasElement');\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n\r\n        var ctx = canvas.getContext('2d');\r\n        ctx.drawImage(this.state.video, 0, 0, width, height);\r\n        this.state.ctx = window.cv.imread('canvasElement');\r\n    }\r\n    exeBW = () =>{\r\n        this.exeCT();  // load the image from <img>\r\n        this.state.sel = 'BW';\r\n        // !!!!all cv = window.cv ro load!!!\r\n        let dst = new window.cv.Mat(); // grey\r\n        window.cv.cvtColor(this.state.ctx, dst, window.cv.COLOR_RGB2GRAY, 0);\r\n\r\n        window.cv.imshow('canvasElement', dst);\r\n\r\n        //this.state.ctx.delete(); \r\n        dst.delete();\r\n    }\r\n    exeEDGE = () =>{\r\n        this.exeCT();  // load the image from <img>\r\n        this.state.sel = 'EDGE';\r\n        // !!!!all cv = window.cv ro load!!!\r\n        let dst = new window.cv.Mat(); // grey\r\n        window.cv.cvtColor(this.state.ctx, this.state.ctx, window.cv.COLOR_RGB2GRAY, 0);\r\n        window.cv.Canny(this.state.ctx, dst, 50, 100, 3, false); \r\n\r\n        window.cv.imshow('canvasElement', dst);\r\n\r\n        //this.state.ctx.delete(); \r\n        dst.delete();\r\n    }\r\n    exeBWANI = () =>{\r\n        this.state.sel = 'BWANI';        \r\n    }\r\n\r\n    exeEDGEANI = () =>{\r\n        this.state.sel = 'EDGEANI';        \r\n    }\r\n    exeFACEANI = () =>{\r\n        // load the image from <img>\r\n        this.state.sel = 'FACEANI';\r\n        \r\n    }\r\n    render () {\r\n    \t\r\n        return (\r\n            <div id=\"panel-canvas\" className=\"panel-canvas\" ref={element => this.threeRootElement = element}>    \t\r\n            \t<div id=\"canvas-gui-container\"  style={{position:'absolute', right:'20px'}}>\r\n                    <div id=\"infoCanvas\" style={{color:'red', fontFamily: 'Titillium Web', position:'fixed'}}></div> \r\n                </div>\r\n                <div style={{position:'absolute', margin:'20px 20px 20px 20px'}}>\r\n                    <Header as='h2' key={this.state.activeItem}  style={{color:'black', fontFamily: 'Titillium Web'}}>{this.state.activeItem.toUpperCase()}</Header>                    \r\n                    <div as='h6' id=\"loading-opencv\" style={{color:'red',  fontFamily: 'Titillium Web',marginTop:'-10px'}}>loading Opencv...</div>\r\n                </div>\r\n                <video autoPlay={true} id=\"videoElement\" style={{position:'absolute', display:'block', marginLeft:'2.5%', marginTop:'80px', height:'60%'}}></video>\r\n                <canvas autoPlay={true} id=\"canvasElement\" style={{position:'absolute', display:'block', marginLeft:'52.5%', marginTop:'80px', height:'60%'}}></canvas>\r\n                \r\n                <Grid style={{position: 'absolute', bottom:'5%', width: '132.5%'}}>\r\n                    <Grid.Row>\r\n                        <Grid.Column width={2}> <Button id=\"exeBW\" size='mini' inverted color='blue' onClick={()=>this.exeBW()}>BW</Button> </Grid.Column>\r\n                        <Grid.Column width={2}> <Button id=\"exeEdge\" size='mini' inverted color='blue' onClick={()=>this.exeEDGE()}>EDGE</Button> </Grid.Column>\r\n                        <Grid.Column width={2}> <Button id=\"exeBWani\" size='mini' inverted color='red' onClick={()=>this.exeBWANI()}>BWani</Button> </Grid.Column>\r\n                        <Grid.Column width={2}> <Button id=\"exeEdgeani\" size='mini' inverted color='red' onClick={()=>this.exeEDGEANI()}>EDGEani</Button> </Grid.Column>\r\n                        <Grid.Column width={2}> <Button id=\"exeFaceani\" size='mini' inverted color='red' onClick={()=>this.exeFACEANI()}>FACEani</Button> </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}