{"ast":null,"code":"var _jsxFileName = \"H:\\\\chrlab\\\\src\\\\component\\\\panelComponent\\\\lrpanelComponent.js\";\nimport React from 'react';\nimport { Image, Grid, Header } from 'semantic-ui-react';\nimport Slider from \"react-slick\";\nimport styled from 'styled-components'; // 匯入 slick的css\n\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\"; // stlyed \n//======================panel======================\n\nconst LRPanelContain = styled.div`\n    width:100%;\n    padding:1.5em 1.5em 1.5em 1.5em;\n    top: 1.5em;\n    overflow: 'auto';\n    maxHeight: 75%;\n    .txtcontent{\n      text-align:justify;\n    }\n\t`;\n\nclass LRPanelComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: 0,\n      height: 0,\n      activedata: this.props.activedata\n    };\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  } // ==================RESIZE=======================\n\n\n  updateWindowDimensions() {\n    this.setState({\n      width: window.innerWidth,\n      height: window.innerHeight\n    });\n  }\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  } // ==================LAYOUT=======================\n\n\n  render() {\n    const settings = {\n      dots: true,\n      infinite: true,\n      speed: 500,\n      slidesToShow: 1,\n      slidesToScroll: 1,\n      autoplay: true\n    };\n\n    const panelrender = () => {\n      let til = this.state.activedata.title; //let tilup = til.toUpperCase();\n\n      let cont = this.state.activedata.content;\n      let panelcontent = [];\n      let elements = [];\n\n      if (this.state.activedata !== null) {\n        for (let i = 0; i < this.state.activedata.pic.length; i += 1) {\n          let pix = this.state.activedata.pic[i];\n          elements.push( /*#__PURE__*/React.createElement(Image, {\n            src: `${pix}`,\n            key: `${til}-img-${i}`,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 25\n            }\n          }));\n        }\n      }\n\n      if (this.state.width < 640) {\n        panelcontent.push( /*#__PURE__*/React.createElement(Grid, {\n          key: `${til}-grid`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(Grid.Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Slider, Object.assign({}, settings, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 18\n          }\n        }), elements))), /*#__PURE__*/React.createElement(Grid.Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(Header, {\n          as: \"h2\",\n          style: {\n            fontFamily: 'Titillium Web'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 19\n          }\n        }, til.toUpperCase()), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 19\n          }\n        }, cont))));\n      } else {\n        let cl = this.state.width < 900 ? 8 : 5;\n        panelcontent.push( /*#__PURE__*/React.createElement(Grid, {\n          key: `${til}-grid`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(Grid.Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(Grid.Column, {\n          width: cl,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(Slider, Object.assign({}, settings, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 19\n          }\n        }), elements)), /*#__PURE__*/React.createElement(Grid.Column, {\n          width: 16 - cl,\n          className: \"txtcontent\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(Header, {\n          as: \"h2\",\n          style: {\n            fontFamily: 'Titillium Web'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 17\n          }\n        }, til.toUpperCase()), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 17\n          }\n        }, cont)))));\n      }\n\n      return panelcontent;\n    };\n\n    return /*#__PURE__*/React.createElement(LRPanelContain, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 7\n      }\n    }, this.panelrender());\n  }\n\n}\n\nexport default LRPanelComponent;","map":{"version":3,"sources":["H:/chrlab/src/component/panelComponent/lrpanelComponent.js"],"names":["React","Image","Grid","Header","Slider","styled","LRPanelContain","div","LRPanelComponent","Component","constructor","props","state","width","height","activedata","updateWindowDimensions","bind","setState","window","innerWidth","innerHeight","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render","settings","dots","infinite","speed","slidesToShow","slidesToScroll","autoplay","panelrender","til","title","cont","content","panelcontent","elements","i","pic","length","pix","push","fontFamily","toUpperCase","cl"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Image, Grid, Header } from 'semantic-ui-react';\r\nimport Slider from \"react-slick\";\r\nimport styled from 'styled-components';\r\n\r\n// 匯入 slick的css\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\n\t// stlyed \r\n\t//======================panel======================\r\n\tconst LRPanelContain = styled.div`\r\n    width:100%;\r\n    padding:1.5em 1.5em 1.5em 1.5em;\r\n    top: 1.5em;\r\n    overflow: 'auto';\r\n    maxHeight: 75%;\r\n    .txtcontent{\r\n      text-align:justify;\r\n    }\r\n\t`;\r\n \r\nclass LRPanelComponent extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        width: 0, height: 0,\r\n        activedata: this.props.activedata\r\n    };\r\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n  }\r\n\r\n  // ==================RESIZE=======================\r\n  updateWindowDimensions() {\r\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\r\n  }\r\n  componentDidMount() {\r\n    this.updateWindowDimensions();\r\n    window.addEventListener('resize', this.updateWindowDimensions);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateWindowDimensions);\r\n  }\r\n  // ==================LAYOUT=======================\r\n  render() {\r\n  const settings = {\r\n      dots: true,\r\n      infinite: true,\r\n      speed: 500,\r\n      slidesToShow: 1,\r\n      slidesToScroll: 1,\r\n      autoplay: true\r\n  };\r\n\r\n  const panelrender =()=>{\r\n      let til = this.state.activedata.title;\r\n      //let tilup = til.toUpperCase();\r\n      let cont = this.state.activedata.content;\r\n      let panelcontent=[]; \r\n      let elements =[];\r\n\r\n      if (this.state.activedata!==null){\r\n        for(let i=0;i<this.state.activedata.pic.length;i+=1){\r\n          let pix = this.state.activedata.pic[i];\r\n          elements.push(<Image src={`${pix}`} key={`${til}-img-${i}`}/>);\r\n        }\r\n      }\r\n\r\n      if (this.state.width<640){\r\n        panelcontent.push(\r\n            <Grid key={`${til}-grid`}>\r\n              <Grid.Row>\r\n                <div>\r\n                 <Slider {...settings}>\r\n                    {elements}\r\n                 </Slider>\r\n                </div>\r\n              </Grid.Row>\r\n              <Grid.Row>\r\n                  <Header as='h2' style={{fontFamily: 'Titillium Web'}}>{til.toUpperCase()}</Header>\r\n                  <p>{cont}</p>\r\n              </Grid.Row>\r\n              </Grid>\r\n            );\r\n      }else{\r\n        let cl = (this.state.width<900)?8:5;\r\n        panelcontent.push(\r\n          <Grid key={`${til}-grid`}>\r\n            <Grid.Row>\r\n              <Grid.Column width={cl}>\r\n                  <Slider {...settings}>\r\n                    {elements}\r\n                 </Slider>\r\n              </Grid.Column>\r\n              <Grid.Column width={16-cl} className='txtcontent'>\r\n                <Header as='h2' style={{fontFamily: 'Titillium Web'}}>{til.toUpperCase()}</Header>\r\n                <p>{cont}</p>\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n            </Grid>\r\n          );\r\n      }\r\n\r\n      return panelcontent;\r\n  };\r\n\r\n    return (\r\n      <LRPanelContain>\r\n          {this.panelrender()}\r\n      </LRPanelContain>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default LRPanelComponent;\r\n"]},"metadata":{},"sourceType":"module"}