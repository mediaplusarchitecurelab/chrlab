{"ast":null,"code":"/**\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author szimek / https://github.com/szimek/\n * @author tschw\n */\nimport { RGBAFormat, HalfFloatType, FloatType, UnsignedByteType, LinearEncoding, LinearToneMapping, BackSide } from '../constants.js';\nimport { MathUtils } from '../math/MathUtils.js';\nimport { DataTexture } from '../textures/DataTexture.js';\nimport { Frustum } from '../math/Frustum.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { UniformsLib } from './shaders/UniformsLib.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { Vector4 } from '../math/Vector4.js';\nimport { Scene } from '../scenes/Scene.js';\nimport { WebGLAnimation } from './webgl/WebGLAnimation.js';\nimport { WebGLAttributes } from './webgl/WebGLAttributes.js';\nimport { WebGLBackground } from './webgl/WebGLBackground.js';\nimport { WebGLBufferRenderer } from './webgl/WebGLBufferRenderer.js';\nimport { WebGLCapabilities } from './webgl/WebGLCapabilities.js';\nimport { WebGLClipping } from './webgl/WebGLClipping.js';\nimport { WebGLExtensions } from './webgl/WebGLExtensions.js';\nimport { WebGLGeometries } from './webgl/WebGLGeometries.js';\nimport { WebGLIndexedBufferRenderer } from './webgl/WebGLIndexedBufferRenderer.js';\nimport { WebGLInfo } from './webgl/WebGLInfo.js';\nimport { WebGLMorphtargets } from './webgl/WebGLMorphtargets.js';\nimport { WebGLObjects } from './webgl/WebGLObjects.js';\nimport { WebGLPrograms } from './webgl/WebGLPrograms.js';\nimport { WebGLProperties } from './webgl/WebGLProperties.js';\nimport { WebGLRenderLists } from './webgl/WebGLRenderLists.js';\nimport { WebGLRenderStates } from './webgl/WebGLRenderStates.js';\nimport { WebGLShadowMap } from './webgl/WebGLShadowMap.js';\nimport { WebGLState } from './webgl/WebGLState.js';\nimport { WebGLTextures } from './webgl/WebGLTextures.js';\nimport { WebGLUniforms } from './webgl/WebGLUniforms.js';\nimport { WebGLUtils } from './webgl/WebGLUtils.js';\nimport { WebXRManager } from './webxr/WebXRManager.js';\n\nfunction WebGLRenderer(parameters) {\n  parameters = parameters || {};\n\n  var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas'),\n      _context = parameters.context !== undefined ? parameters.context : null,\n      _alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n      _depth = parameters.depth !== undefined ? parameters.depth : true,\n      _stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n      _antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n      _premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n      _preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n      _powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\n      _failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\n\n  var currentRenderList = null;\n  var currentRenderState = null; // public properties\n\n  this.domElement = _canvas; // Debug configuration container\n\n  this.debug = {\n    /**\n     * Enables error checking and reporting when shader programs are being compiled\n     * @type {boolean}\n     */\n    checkShaderErrors: true\n  }; // clearing\n\n  this.autoClear = true;\n  this.autoClearColor = true;\n  this.autoClearDepth = true;\n  this.autoClearStencil = true; // scene graph\n\n  this.sortObjects = true; // user-defined clipping\n\n  this.clippingPlanes = [];\n  this.localClippingEnabled = false; // physically based shading\n\n  this.gammaFactor = 2.0; // for backwards compatibility\n\n  this.outputEncoding = LinearEncoding; // physical lights\n\n  this.physicallyCorrectLights = false; // tone mapping\n\n  this.toneMapping = LinearToneMapping;\n  this.toneMappingExposure = 1.0;\n  this.toneMappingWhitePoint = 1.0; // morphs\n\n  this.maxMorphTargets = 8;\n  this.maxMorphNormals = 4; // internal properties\n\n  var _this = this,\n      _isContextLost = false,\n      // internal state cache\n  _framebuffer = null,\n      _currentActiveCubeFace = 0,\n      _currentActiveMipmapLevel = 0,\n      _currentRenderTarget = null,\n      _currentFramebuffer = null,\n      _currentMaterialId = -1,\n      // geometry and program caching\n  _currentGeometryProgram = {\n    geometry: null,\n    program: null,\n    wireframe: false\n  },\n      _currentCamera = null,\n      _currentArrayCamera = null,\n      _currentViewport = new Vector4(),\n      _currentScissor = new Vector4(),\n      _currentScissorTest = null,\n      //\n  _width = _canvas.width,\n      _height = _canvas.height,\n      _pixelRatio = 1,\n      _opaqueSort = null,\n      _transparentSort = null,\n      _viewport = new Vector4(0, 0, _width, _height),\n      _scissor = new Vector4(0, 0, _width, _height),\n      _scissorTest = false,\n      // frustum\n  _frustum = new Frustum(),\n      // clipping\n  _clipping = new WebGLClipping(),\n      _clippingEnabled = false,\n      _localClippingEnabled = false,\n      // camera matrices cache\n  _projScreenMatrix = new Matrix4(),\n      _vector3 = new Vector3();\n\n  function getTargetPixelRatio() {\n    return _currentRenderTarget === null ? _pixelRatio : 1;\n  } // initialize\n\n\n  var _gl;\n\n  try {\n    var contextAttributes = {\n      alpha: _alpha,\n      depth: _depth,\n      stencil: _stencil,\n      antialias: _antialias,\n      premultipliedAlpha: _premultipliedAlpha,\n      preserveDrawingBuffer: _preserveDrawingBuffer,\n      powerPreference: _powerPreference,\n      failIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat,\n      xrCompatible: true\n    }; // event listeners must be registered before WebGL context is created, see #12753\n\n    _canvas.addEventListener('webglcontextlost', onContextLost, false);\n\n    _canvas.addEventListener('webglcontextrestored', onContextRestore, false);\n\n    _gl = _context || _canvas.getContext('webgl', contextAttributes) || _canvas.getContext('experimental-webgl', contextAttributes);\n\n    if (_gl === null) {\n      if (_canvas.getContext('webgl') !== null) {\n        throw new Error('Error creating WebGL context with your selected attributes.');\n      } else {\n        throw new Error('Error creating WebGL context.');\n      }\n    } // Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\n    if (_gl.getShaderPrecisionFormat === undefined) {\n      _gl.getShaderPrecisionFormat = function () {\n        return {\n          'rangeMin': 1,\n          'rangeMax': 1,\n          'precision': 1\n        };\n      };\n    }\n  } catch (error) {\n    console.error('THREE.WebGLRenderer: ' + error.message);\n    throw error;\n  }\n\n  var extensions, capabilities, state, info;\n  var properties, textures, attributes, geometries, objects;\n  var programCache, renderLists, renderStates;\n  var background, morphtargets, bufferRenderer, indexedBufferRenderer;\n  var utils;\n\n  function initGLContext() {\n    extensions = new WebGLExtensions(_gl);\n    capabilities = new WebGLCapabilities(_gl, extensions, parameters);\n\n    if (capabilities.isWebGL2 === false) {\n      extensions.get('WEBGL_depth_texture');\n      extensions.get('OES_texture_float');\n      extensions.get('OES_texture_half_float');\n      extensions.get('OES_texture_half_float_linear');\n      extensions.get('OES_standard_derivatives');\n      extensions.get('OES_element_index_uint');\n      extensions.get('ANGLE_instanced_arrays');\n    }\n\n    extensions.get('OES_texture_float_linear');\n    utils = new WebGLUtils(_gl, extensions, capabilities);\n    state = new WebGLState(_gl, extensions, capabilities);\n    state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());\n    state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());\n    info = new WebGLInfo(_gl);\n    properties = new WebGLProperties();\n    textures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);\n    attributes = new WebGLAttributes(_gl, capabilities);\n    geometries = new WebGLGeometries(_gl, attributes, info);\n    objects = new WebGLObjects(_gl, geometries, attributes, info);\n    morphtargets = new WebGLMorphtargets(_gl);\n    programCache = new WebGLPrograms(_this, extensions, capabilities);\n    renderLists = new WebGLRenderLists();\n    renderStates = new WebGLRenderStates();\n    background = new WebGLBackground(_this, state, objects, _premultipliedAlpha);\n    bufferRenderer = new WebGLBufferRenderer(_gl, extensions, info, capabilities);\n    indexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info, capabilities);\n    info.programs = programCache.programs;\n    _this.capabilities = capabilities;\n    _this.extensions = extensions;\n    _this.properties = properties;\n    _this.renderLists = renderLists;\n    _this.state = state;\n    _this.info = info;\n  }\n\n  initGLContext(); // xr\n\n  var xr = new WebXRManager(_this, _gl);\n  this.xr = xr; // shadow map\n\n  var shadowMap = new WebGLShadowMap(_this, objects, capabilities.maxTextureSize);\n  this.shadowMap = shadowMap; // API\n\n  this.getContext = function () {\n    return _gl;\n  };\n\n  this.getContextAttributes = function () {\n    return _gl.getContextAttributes();\n  };\n\n  this.forceContextLoss = function () {\n    var extension = extensions.get('WEBGL_lose_context');\n    if (extension) extension.loseContext();\n  };\n\n  this.forceContextRestore = function () {\n    var extension = extensions.get('WEBGL_lose_context');\n    if (extension) extension.restoreContext();\n  };\n\n  this.getPixelRatio = function () {\n    return _pixelRatio;\n  };\n\n  this.setPixelRatio = function (value) {\n    if (value === undefined) return;\n    _pixelRatio = value;\n    this.setSize(_width, _height, false);\n  };\n\n  this.getSize = function (target) {\n    if (target === undefined) {\n      console.warn('WebGLRenderer: .getsize() now requires a Vector2 as an argument');\n      target = new Vector2();\n    }\n\n    return target.set(_width, _height);\n  };\n\n  this.setSize = function (width, height, updateStyle) {\n    if (xr.isPresenting) {\n      console.warn('THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.');\n      return;\n    }\n\n    _width = width;\n    _height = height;\n    _canvas.width = Math.floor(width * _pixelRatio);\n    _canvas.height = Math.floor(height * _pixelRatio);\n\n    if (updateStyle !== false) {\n      _canvas.style.width = width + 'px';\n      _canvas.style.height = height + 'px';\n    }\n\n    this.setViewport(0, 0, width, height);\n  };\n\n  this.getDrawingBufferSize = function (target) {\n    if (target === undefined) {\n      console.warn('WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument');\n      target = new Vector2();\n    }\n\n    return target.set(_width * _pixelRatio, _height * _pixelRatio).floor();\n  };\n\n  this.setDrawingBufferSize = function (width, height, pixelRatio) {\n    _width = width;\n    _height = height;\n    _pixelRatio = pixelRatio;\n    _canvas.width = Math.floor(width * pixelRatio);\n    _canvas.height = Math.floor(height * pixelRatio);\n    this.setViewport(0, 0, width, height);\n  };\n\n  this.getCurrentViewport = function (target) {\n    if (target === undefined) {\n      console.warn('WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument');\n      target = new Vector4();\n    }\n\n    return target.copy(_currentViewport);\n  };\n\n  this.getViewport = function (target) {\n    return target.copy(_viewport);\n  };\n\n  this.setViewport = function (x, y, width, height) {\n    if (x.isVector4) {\n      _viewport.set(x.x, x.y, x.z, x.w);\n    } else {\n      _viewport.set(x, y, width, height);\n    }\n\n    state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());\n  };\n\n  this.getScissor = function (target) {\n    return target.copy(_scissor);\n  };\n\n  this.setScissor = function (x, y, width, height) {\n    if (x.isVector4) {\n      _scissor.set(x.x, x.y, x.z, x.w);\n    } else {\n      _scissor.set(x, y, width, height);\n    }\n\n    state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());\n  };\n\n  this.getScissorTest = function () {\n    return _scissorTest;\n  };\n\n  this.setScissorTest = function (boolean) {\n    state.setScissorTest(_scissorTest = boolean);\n  };\n\n  this.setOpaqueSort = function (method) {\n    _opaqueSort = method;\n  };\n\n  this.setTransparentSort = function (method) {\n    _transparentSort = method;\n  }; // Clearing\n\n\n  this.getClearColor = function () {\n    return background.getClearColor();\n  };\n\n  this.setClearColor = function () {\n    background.setClearColor.apply(background, arguments);\n  };\n\n  this.getClearAlpha = function () {\n    return background.getClearAlpha();\n  };\n\n  this.setClearAlpha = function () {\n    background.setClearAlpha.apply(background, arguments);\n  };\n\n  this.clear = function (color, depth, stencil) {\n    var bits = 0;\n    if (color === undefined || color) bits |= _gl.COLOR_BUFFER_BIT;\n    if (depth === undefined || depth) bits |= _gl.DEPTH_BUFFER_BIT;\n    if (stencil === undefined || stencil) bits |= _gl.STENCIL_BUFFER_BIT;\n\n    _gl.clear(bits);\n  };\n\n  this.clearColor = function () {\n    this.clear(true, false, false);\n  };\n\n  this.clearDepth = function () {\n    this.clear(false, true, false);\n  };\n\n  this.clearStencil = function () {\n    this.clear(false, false, true);\n  }; //\n\n\n  this.dispose = function () {\n    _canvas.removeEventListener('webglcontextlost', onContextLost, false);\n\n    _canvas.removeEventListener('webglcontextrestored', onContextRestore, false);\n\n    renderLists.dispose();\n    renderStates.dispose();\n    properties.dispose();\n    objects.dispose();\n    xr.dispose();\n    animation.stop();\n    this.forceContextLoss();\n  }; // Events\n\n\n  function onContextLost(event) {\n    event.preventDefault();\n    console.log('THREE.WebGLRenderer: Context Lost.');\n    _isContextLost = true;\n  }\n\n  function onContextRestore()\n  /* event */\n  {\n    console.log('THREE.WebGLRenderer: Context Restored.');\n    _isContextLost = false;\n    initGLContext();\n  }\n\n  function onMaterialDispose(event) {\n    var material = event.target;\n    material.removeEventListener('dispose', onMaterialDispose);\n    deallocateMaterial(material);\n  } // Buffer deallocation\n\n\n  function deallocateMaterial(material) {\n    releaseMaterialProgramReference(material);\n    properties.remove(material);\n  }\n\n  function releaseMaterialProgramReference(material) {\n    var programInfo = properties.get(material).program;\n    material.program = undefined;\n\n    if (programInfo !== undefined) {\n      programCache.releaseProgram(programInfo);\n    }\n  } // Buffer rendering\n\n\n  function renderObjectImmediate(object, program) {\n    object.render(function (object) {\n      _this.renderBufferImmediate(object, program);\n    });\n  }\n\n  this.renderBufferImmediate = function (object, program) {\n    state.initAttributes();\n    var buffers = properties.get(object);\n    if (object.hasPositions && !buffers.position) buffers.position = _gl.createBuffer();\n    if (object.hasNormals && !buffers.normal) buffers.normal = _gl.createBuffer();\n    if (object.hasUvs && !buffers.uv) buffers.uv = _gl.createBuffer();\n    if (object.hasColors && !buffers.color) buffers.color = _gl.createBuffer();\n    var programAttributes = program.getAttributes();\n\n    if (object.hasPositions) {\n      _gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.position);\n\n      _gl.bufferData(_gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW);\n\n      state.enableAttribute(programAttributes.position);\n\n      _gl.vertexAttribPointer(programAttributes.position, 3, _gl.FLOAT, false, 0, 0);\n    }\n\n    if (object.hasNormals) {\n      _gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.normal);\n\n      _gl.bufferData(_gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW);\n\n      state.enableAttribute(programAttributes.normal);\n\n      _gl.vertexAttribPointer(programAttributes.normal, 3, _gl.FLOAT, false, 0, 0);\n    }\n\n    if (object.hasUvs) {\n      _gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.uv);\n\n      _gl.bufferData(_gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW);\n\n      state.enableAttribute(programAttributes.uv);\n\n      _gl.vertexAttribPointer(programAttributes.uv, 2, _gl.FLOAT, false, 0, 0);\n    }\n\n    if (object.hasColors) {\n      _gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.color);\n\n      _gl.bufferData(_gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW);\n\n      state.enableAttribute(programAttributes.color);\n\n      _gl.vertexAttribPointer(programAttributes.color, 3, _gl.FLOAT, false, 0, 0);\n    }\n\n    state.disableUnusedAttributes();\n\n    _gl.drawArrays(_gl.TRIANGLES, 0, object.count);\n\n    object.count = 0;\n  };\n\n  var tempScene = new Scene();\n\n  this.renderBufferDirect = function (camera, scene, geometry, material, object, group) {\n    if (scene === null) scene = tempScene; // renderBufferDirect second parameter used to be fog (could be null)\n\n    var frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;\n    var program = setProgram(camera, scene, material, object);\n    state.setMaterial(material, frontFaceCW);\n    var updateBuffers = false;\n\n    if (_currentGeometryProgram.geometry !== geometry.id || _currentGeometryProgram.program !== program.id || _currentGeometryProgram.wireframe !== (material.wireframe === true)) {\n      _currentGeometryProgram.geometry = geometry.id;\n      _currentGeometryProgram.program = program.id;\n      _currentGeometryProgram.wireframe = material.wireframe === true;\n      updateBuffers = true;\n    }\n\n    if (material.morphTargets || material.morphNormals) {\n      morphtargets.update(object, geometry, material, program);\n      updateBuffers = true;\n    } //\n\n\n    var index = geometry.index;\n    var position = geometry.attributes.position; //\n\n    if (index === null) {\n      if (position === undefined || position.count === 0) return;\n    } else if (index.count === 0) {\n      return;\n    } //\n\n\n    var rangeFactor = 1;\n\n    if (material.wireframe === true) {\n      index = geometries.getWireframeAttribute(geometry);\n      rangeFactor = 2;\n    }\n\n    var attribute;\n    var renderer = bufferRenderer;\n\n    if (index !== null) {\n      attribute = attributes.get(index);\n      renderer = indexedBufferRenderer;\n      renderer.setIndex(attribute);\n    }\n\n    if (updateBuffers) {\n      setupVertexAttributes(object, geometry, material, program);\n\n      if (index !== null) {\n        _gl.bindBuffer(_gl.ELEMENT_ARRAY_BUFFER, attribute.buffer);\n      }\n    } //\n\n\n    var dataCount = index !== null ? index.count : position.count;\n    var rangeStart = geometry.drawRange.start * rangeFactor;\n    var rangeCount = geometry.drawRange.count * rangeFactor;\n    var groupStart = group !== null ? group.start * rangeFactor : 0;\n    var groupCount = group !== null ? group.count * rangeFactor : Infinity;\n    var drawStart = Math.max(rangeStart, groupStart);\n    var drawEnd = Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;\n    var drawCount = Math.max(0, drawEnd - drawStart + 1);\n    if (drawCount === 0) return; //\n\n    if (object.isMesh) {\n      if (material.wireframe === true) {\n        state.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());\n        renderer.setMode(_gl.LINES);\n      } else {\n        renderer.setMode(_gl.TRIANGLES);\n      }\n    } else if (object.isLine) {\n      var lineWidth = material.linewidth;\n      if (lineWidth === undefined) lineWidth = 1; // Not using Line*Material\n\n      state.setLineWidth(lineWidth * getTargetPixelRatio());\n\n      if (object.isLineSegments) {\n        renderer.setMode(_gl.LINES);\n      } else if (object.isLineLoop) {\n        renderer.setMode(_gl.LINE_LOOP);\n      } else {\n        renderer.setMode(_gl.LINE_STRIP);\n      }\n    } else if (object.isPoints) {\n      renderer.setMode(_gl.POINTS);\n    } else if (object.isSprite) {\n      renderer.setMode(_gl.TRIANGLES);\n    }\n\n    if (object.isInstancedMesh) {\n      renderer.renderInstances(geometry, drawStart, drawCount, object.count);\n    } else if (geometry.isInstancedBufferGeometry) {\n      renderer.renderInstances(geometry, drawStart, drawCount, geometry.maxInstancedCount);\n    } else {\n      renderer.render(drawStart, drawCount);\n    }\n  };\n\n  function setupVertexAttributes(object, geometry, material, program) {\n    if (capabilities.isWebGL2 === false && (object.isInstancedMesh || geometry.isInstancedBufferGeometry)) {\n      if (extensions.get('ANGLE_instanced_arrays') === null) return;\n    }\n\n    state.initAttributes();\n    var geometryAttributes = geometry.attributes;\n    var programAttributes = program.getAttributes();\n    var materialDefaultAttributeValues = material.defaultAttributeValues;\n\n    for (var name in programAttributes) {\n      var programAttribute = programAttributes[name];\n\n      if (programAttribute >= 0) {\n        var geometryAttribute = geometryAttributes[name];\n\n        if (geometryAttribute !== undefined) {\n          var normalized = geometryAttribute.normalized;\n          var size = geometryAttribute.itemSize;\n          var attribute = attributes.get(geometryAttribute); // TODO Attribute may not be available on context restore\n\n          if (attribute === undefined) continue;\n          var buffer = attribute.buffer;\n          var type = attribute.type;\n          var bytesPerElement = attribute.bytesPerElement;\n\n          if (geometryAttribute.isInterleavedBufferAttribute) {\n            var data = geometryAttribute.data;\n            var stride = data.stride;\n            var offset = geometryAttribute.offset;\n\n            if (data && data.isInstancedInterleavedBuffer) {\n              state.enableAttributeAndDivisor(programAttribute, data.meshPerAttribute);\n\n              if (geometry.maxInstancedCount === undefined) {\n                geometry.maxInstancedCount = data.meshPerAttribute * data.count;\n              }\n            } else {\n              state.enableAttribute(programAttribute);\n            }\n\n            _gl.bindBuffer(_gl.ARRAY_BUFFER, buffer);\n\n            _gl.vertexAttribPointer(programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement);\n          } else {\n            if (geometryAttribute.isInstancedBufferAttribute) {\n              state.enableAttributeAndDivisor(programAttribute, geometryAttribute.meshPerAttribute);\n\n              if (geometry.maxInstancedCount === undefined) {\n                geometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n              }\n            } else {\n              state.enableAttribute(programAttribute);\n            }\n\n            _gl.bindBuffer(_gl.ARRAY_BUFFER, buffer);\n\n            _gl.vertexAttribPointer(programAttribute, size, type, normalized, 0, 0);\n          }\n        } else if (name === 'instanceMatrix') {\n          var attribute = attributes.get(object.instanceMatrix); // TODO Attribute may not be available on context restore\n\n          if (attribute === undefined) continue;\n          var buffer = attribute.buffer;\n          var type = attribute.type;\n          state.enableAttributeAndDivisor(programAttribute + 0, 1);\n          state.enableAttributeAndDivisor(programAttribute + 1, 1);\n          state.enableAttributeAndDivisor(programAttribute + 2, 1);\n          state.enableAttributeAndDivisor(programAttribute + 3, 1);\n\n          _gl.bindBuffer(_gl.ARRAY_BUFFER, buffer);\n\n          _gl.vertexAttribPointer(programAttribute + 0, 4, type, false, 64, 0);\n\n          _gl.vertexAttribPointer(programAttribute + 1, 4, type, false, 64, 16);\n\n          _gl.vertexAttribPointer(programAttribute + 2, 4, type, false, 64, 32);\n\n          _gl.vertexAttribPointer(programAttribute + 3, 4, type, false, 64, 48);\n        } else if (materialDefaultAttributeValues !== undefined) {\n          var value = materialDefaultAttributeValues[name];\n\n          if (value !== undefined) {\n            switch (value.length) {\n              case 2:\n                _gl.vertexAttrib2fv(programAttribute, value);\n\n                break;\n\n              case 3:\n                _gl.vertexAttrib3fv(programAttribute, value);\n\n                break;\n\n              case 4:\n                _gl.vertexAttrib4fv(programAttribute, value);\n\n                break;\n\n              default:\n                _gl.vertexAttrib1fv(programAttribute, value);\n\n            }\n          }\n        }\n      }\n    }\n\n    state.disableUnusedAttributes();\n  } // Compile\n\n\n  this.compile = function (scene, camera) {\n    currentRenderState = renderStates.get(scene, camera);\n    currentRenderState.init();\n    scene.traverse(function (object) {\n      if (object.isLight) {\n        currentRenderState.pushLight(object);\n\n        if (object.castShadow) {\n          currentRenderState.pushShadow(object);\n        }\n      }\n    });\n    currentRenderState.setupLights(camera);\n    var compiled = {};\n    scene.traverse(function (object) {\n      if (object.material) {\n        if (Array.isArray(object.material)) {\n          for (var i = 0; i < object.material.length; i++) {\n            if (object.material[i].uuid in compiled === false) {\n              initMaterial(object.material[i], scene, object);\n              compiled[object.material[i].uuid] = true;\n            }\n          }\n        } else if (object.material.uuid in compiled === false) {\n          initMaterial(object.material, scene, object);\n          compiled[object.material.uuid] = true;\n        }\n      }\n    });\n  }; // Animation Loop\n\n\n  var onAnimationFrameCallback = null;\n\n  function onAnimationFrame(time) {\n    if (xr.isPresenting) return;\n    if (onAnimationFrameCallback) onAnimationFrameCallback(time);\n  }\n\n  var animation = new WebGLAnimation();\n  animation.setAnimationLoop(onAnimationFrame);\n  if (typeof window !== 'undefined') animation.setContext(window);\n\n  this.setAnimationLoop = function (callback) {\n    onAnimationFrameCallback = callback;\n    xr.setAnimationLoop(callback);\n    animation.start();\n  }; // Rendering\n\n\n  this.render = function (scene, camera) {\n    var renderTarget, forceClear;\n\n    if (arguments[2] !== undefined) {\n      console.warn('THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.');\n      renderTarget = arguments[2];\n    }\n\n    if (arguments[3] !== undefined) {\n      console.warn('THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.');\n      forceClear = arguments[3];\n    }\n\n    if (!(camera && camera.isCamera)) {\n      console.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');\n      return;\n    }\n\n    if (_isContextLost) return; // reset caching for this frame\n\n    _currentGeometryProgram.geometry = null;\n    _currentGeometryProgram.program = null;\n    _currentGeometryProgram.wireframe = false;\n    _currentMaterialId = -1;\n    _currentCamera = null; // update scene graph\n\n    if (scene.autoUpdate === true) scene.updateMatrixWorld(); // update camera matrices and frustum\n\n    if (camera.parent === null) camera.updateMatrixWorld();\n\n    if (xr.enabled && xr.isPresenting) {\n      camera = xr.getCamera(camera);\n    } //\n\n\n    currentRenderState = renderStates.get(scene, camera);\n    currentRenderState.init();\n    scene.onBeforeRender(_this, scene, camera, renderTarget || _currentRenderTarget);\n\n    _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\n    _frustum.setFromProjectionMatrix(_projScreenMatrix);\n\n    _localClippingEnabled = this.localClippingEnabled;\n    _clippingEnabled = _clipping.init(this.clippingPlanes, _localClippingEnabled, camera);\n    currentRenderList = renderLists.get(scene, camera);\n    currentRenderList.init();\n    projectObject(scene, camera, 0, _this.sortObjects);\n    currentRenderList.finish();\n\n    if (_this.sortObjects === true) {\n      currentRenderList.sort(_opaqueSort, _transparentSort);\n    } //\n\n\n    if (_clippingEnabled) _clipping.beginShadows();\n    var shadowsArray = currentRenderState.state.shadowsArray;\n    shadowMap.render(shadowsArray, scene, camera);\n    currentRenderState.setupLights(camera);\n    if (_clippingEnabled) _clipping.endShadows(); //\n\n    if (this.info.autoReset) this.info.reset();\n\n    if (renderTarget !== undefined) {\n      this.setRenderTarget(renderTarget);\n    } //\n\n\n    background.render(currentRenderList, scene, camera, forceClear); // render scene\n\n    var opaqueObjects = currentRenderList.opaque;\n    var transparentObjects = currentRenderList.transparent;\n\n    if (scene.overrideMaterial) {\n      var overrideMaterial = scene.overrideMaterial;\n      if (opaqueObjects.length) renderObjects(opaqueObjects, scene, camera, overrideMaterial);\n      if (transparentObjects.length) renderObjects(transparentObjects, scene, camera, overrideMaterial);\n    } else {\n      // opaque pass (front-to-back order)\n      if (opaqueObjects.length) renderObjects(opaqueObjects, scene, camera); // transparent pass (back-to-front order)\n\n      if (transparentObjects.length) renderObjects(transparentObjects, scene, camera);\n    } //\n\n\n    scene.onAfterRender(_this, scene, camera); //\n\n    if (_currentRenderTarget !== null) {\n      // Generate mipmap if we're using any kind of mipmap filtering\n      textures.updateRenderTargetMipmap(_currentRenderTarget); // resolve multisample renderbuffers to a single-sample texture if necessary\n\n      textures.updateMultisampleRenderTarget(_currentRenderTarget);\n    } // Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\n    state.buffers.depth.setTest(true);\n    state.buffers.depth.setMask(true);\n    state.buffers.color.setMask(true);\n    state.setPolygonOffset(false); // _gl.finish();\n\n    currentRenderList = null;\n    currentRenderState = null;\n  };\n\n  function projectObject(object, camera, groupOrder, sortObjects) {\n    if (object.visible === false) return;\n    var visible = object.layers.test(camera.layers);\n\n    if (visible) {\n      if (object.isGroup) {\n        groupOrder = object.renderOrder;\n      } else if (object.isLOD) {\n        if (object.autoUpdate === true) object.update(camera);\n      } else if (object.isLight) {\n        currentRenderState.pushLight(object);\n\n        if (object.castShadow) {\n          currentRenderState.pushShadow(object);\n        }\n      } else if (object.isSprite) {\n        if (!object.frustumCulled || _frustum.intersectsSprite(object)) {\n          if (sortObjects) {\n            _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n          }\n\n          var geometry = objects.update(object);\n          var material = object.material;\n\n          if (material.visible) {\n            currentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);\n          }\n        }\n      } else if (object.isImmediateRenderObject) {\n        if (sortObjects) {\n          _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n        }\n\n        currentRenderList.push(object, null, object.material, groupOrder, _vector3.z, null);\n      } else if (object.isMesh || object.isLine || object.isPoints) {\n        if (object.isSkinnedMesh) {\n          // update skeleton only once in a frame\n          if (object.skeleton.frame !== info.render.frame) {\n            object.skeleton.update();\n            object.skeleton.frame = info.render.frame;\n          }\n        }\n\n        if (!object.frustumCulled || _frustum.intersectsObject(object)) {\n          if (sortObjects) {\n            _vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n          }\n\n          var geometry = objects.update(object);\n          var material = object.material;\n\n          if (Array.isArray(material)) {\n            var groups = geometry.groups;\n\n            for (var i = 0, l = groups.length; i < l; i++) {\n              var group = groups[i];\n              var groupMaterial = material[group.materialIndex];\n\n              if (groupMaterial && groupMaterial.visible) {\n                currentRenderList.push(object, geometry, groupMaterial, groupOrder, _vector3.z, group);\n              }\n            }\n          } else if (material.visible) {\n            currentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);\n          }\n        }\n      }\n    }\n\n    var children = object.children;\n\n    for (var i = 0, l = children.length; i < l; i++) {\n      projectObject(children[i], camera, groupOrder, sortObjects);\n    }\n  }\n\n  function renderObjects(renderList, scene, camera, overrideMaterial) {\n    for (var i = 0, l = renderList.length; i < l; i++) {\n      var renderItem = renderList[i];\n      var object = renderItem.object;\n      var geometry = renderItem.geometry;\n      var material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n      var group = renderItem.group;\n\n      if (camera.isArrayCamera) {\n        _currentArrayCamera = camera;\n        var cameras = camera.cameras;\n\n        for (var j = 0, jl = cameras.length; j < jl; j++) {\n          var camera2 = cameras[j];\n\n          if (object.layers.test(camera2.layers)) {\n            state.viewport(_currentViewport.copy(camera2.viewport));\n            currentRenderState.setupLights(camera2);\n            renderObject(object, scene, camera2, geometry, material, group);\n          }\n        }\n      } else {\n        _currentArrayCamera = null;\n        renderObject(object, scene, camera, geometry, material, group);\n      }\n    }\n  }\n\n  function renderObject(object, scene, camera, geometry, material, group) {\n    object.onBeforeRender(_this, scene, camera, geometry, material, group);\n    currentRenderState = renderStates.get(scene, _currentArrayCamera || camera);\n    object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n    object.normalMatrix.getNormalMatrix(object.modelViewMatrix);\n\n    if (object.isImmediateRenderObject) {\n      var program = setProgram(camera, scene, material, object);\n      state.setMaterial(material);\n      _currentGeometryProgram.geometry = null;\n      _currentGeometryProgram.program = null;\n      _currentGeometryProgram.wireframe = false;\n      renderObjectImmediate(object, program);\n    } else {\n      _this.renderBufferDirect(camera, scene, geometry, material, object, group);\n    }\n\n    object.onAfterRender(_this, scene, camera, geometry, material, group);\n    currentRenderState = renderStates.get(scene, _currentArrayCamera || camera);\n  }\n\n  function initMaterial(material, scene, object) {\n    var materialProperties = properties.get(material);\n    var lights = currentRenderState.state.lights;\n    var shadowsArray = currentRenderState.state.shadowsArray;\n    var lightsStateVersion = lights.state.version;\n    var parameters = programCache.getParameters(material, lights.state, shadowsArray, scene, _clipping.numPlanes, _clipping.numIntersection, object);\n    var programCacheKey = programCache.getProgramCacheKey(parameters);\n    var program = materialProperties.program;\n    var programChange = true;\n\n    if (program === undefined) {\n      // new material\n      material.addEventListener('dispose', onMaterialDispose);\n    } else if (program.cacheKey !== programCacheKey) {\n      // changed glsl or parameters\n      releaseMaterialProgramReference(material);\n    } else if (materialProperties.lightsStateVersion !== lightsStateVersion) {\n      materialProperties.lightsStateVersion = lightsStateVersion;\n      programChange = false;\n    } else if (parameters.shaderID !== undefined) {\n      // same glsl and uniform list\n      return;\n    } else {\n      // only rebuild uniform list\n      programChange = false;\n    }\n\n    if (programChange) {\n      program = programCache.acquireProgram(parameters, programCacheKey);\n      materialProperties.program = program;\n      materialProperties.uniforms = parameters.uniforms;\n      materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n      materialProperties.outputEncoding = _this.outputEncoding;\n      material.program = program;\n    }\n\n    var programAttributes = program.getAttributes();\n\n    if (material.morphTargets) {\n      material.numSupportedMorphTargets = 0;\n\n      for (var i = 0; i < _this.maxMorphTargets; i++) {\n        if (programAttributes['morphTarget' + i] >= 0) {\n          material.numSupportedMorphTargets++;\n        }\n      }\n    }\n\n    if (material.morphNormals) {\n      material.numSupportedMorphNormals = 0;\n\n      for (var i = 0; i < _this.maxMorphNormals; i++) {\n        if (programAttributes['morphNormal' + i] >= 0) {\n          material.numSupportedMorphNormals++;\n        }\n      }\n    }\n\n    var uniforms = materialProperties.uniforms;\n\n    if (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) {\n      materialProperties.numClippingPlanes = _clipping.numPlanes;\n      materialProperties.numIntersection = _clipping.numIntersection;\n      uniforms.clippingPlanes = _clipping.uniform;\n    }\n\n    materialProperties.fog = scene.fog; // store the light setup it was created for\n\n    materialProperties.needsLights = materialNeedsLights(material);\n    materialProperties.lightsStateVersion = lightsStateVersion;\n\n    if (materialProperties.needsLights) {\n      // wire up the material to this renderer's lighting state\n      uniforms.ambientLightColor.value = lights.state.ambient;\n      uniforms.lightProbe.value = lights.state.probe;\n      uniforms.directionalLights.value = lights.state.directional;\n      uniforms.directionalLightShadows.value = lights.state.directionalShadow;\n      uniforms.spotLights.value = lights.state.spot;\n      uniforms.spotLightShadows.value = lights.state.spotShadow;\n      uniforms.rectAreaLights.value = lights.state.rectArea;\n      uniforms.pointLights.value = lights.state.point;\n      uniforms.pointLightShadows.value = lights.state.pointShadow;\n      uniforms.hemisphereLights.value = lights.state.hemi;\n      uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n      uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n      uniforms.spotShadowMap.value = lights.state.spotShadowMap;\n      uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n      uniforms.pointShadowMap.value = lights.state.pointShadowMap;\n      uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix; // TODO (abelnation): add area lights shadow info to uniforms\n    }\n\n    var progUniforms = materialProperties.program.getUniforms(),\n        uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);\n    materialProperties.uniformsList = uniformsList;\n  }\n\n  function setProgram(camera, scene, material, object) {\n    textures.resetTextureUnits();\n    var fog = scene.fog;\n    var environment = material.isMeshStandardMaterial ? scene.environment : null;\n    var materialProperties = properties.get(material);\n    var lights = currentRenderState.state.lights;\n\n    if (_clippingEnabled) {\n      if (_localClippingEnabled || camera !== _currentCamera) {\n        var useCache = camera === _currentCamera && material.id === _currentMaterialId; // we might want to call this function with some ClippingGroup\n        // object instead of the material, once it becomes feasible\n        // (#8465, #8379)\n\n        _clipping.setState(material.clippingPlanes, material.clipIntersection, material.clipShadows, camera, materialProperties, useCache);\n      }\n    }\n\n    if (material.version === materialProperties.__version) {\n      if (materialProperties.program === undefined) {\n        initMaterial(material, scene, object);\n      } else if (material.fog && materialProperties.fog !== fog) {\n        initMaterial(material, scene, object);\n      } else if (materialProperties.environment !== environment) {\n        initMaterial(material, scene, object);\n      } else if (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) {\n        initMaterial(material, scene, object);\n      } else if (materialProperties.numClippingPlanes !== undefined && (materialProperties.numClippingPlanes !== _clipping.numPlanes || materialProperties.numIntersection !== _clipping.numIntersection)) {\n        initMaterial(material, scene, object);\n      } else if (materialProperties.outputEncoding !== _this.outputEncoding) {\n        initMaterial(material, scene, object);\n      }\n    } else {\n      initMaterial(material, scene, object);\n      materialProperties.__version = material.version;\n    }\n\n    var refreshProgram = false;\n    var refreshMaterial = false;\n    var refreshLights = false;\n    var program = materialProperties.program,\n        p_uniforms = program.getUniforms(),\n        m_uniforms = materialProperties.uniforms;\n\n    if (state.useProgram(program.program)) {\n      refreshProgram = true;\n      refreshMaterial = true;\n      refreshLights = true;\n    }\n\n    if (material.id !== _currentMaterialId) {\n      _currentMaterialId = material.id;\n      refreshMaterial = true;\n    }\n\n    if (refreshProgram || _currentCamera !== camera) {\n      p_uniforms.setValue(_gl, 'projectionMatrix', camera.projectionMatrix);\n\n      if (capabilities.logarithmicDepthBuffer) {\n        p_uniforms.setValue(_gl, 'logDepthBufFC', 2.0 / (Math.log(camera.far + 1.0) / Math.LN2));\n      }\n\n      if (_currentCamera !== camera) {\n        _currentCamera = camera; // lighting uniforms depend on the camera so enforce an update\n        // now, in case this material supports lights - or later, when\n        // the next material that does gets activated:\n\n        refreshMaterial = true; // set to true on material change\n\n        refreshLights = true; // remains set until update done\n      } // load material specific uniforms\n      // (shader material also gets them for the sake of genericity)\n\n\n      if (material.isShaderMaterial || material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshStandardMaterial || material.envMap) {\n        var uCamPos = p_uniforms.map.cameraPosition;\n\n        if (uCamPos !== undefined) {\n          uCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));\n        }\n      }\n\n      if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) {\n        p_uniforms.setValue(_gl, 'isOrthographic', camera.isOrthographicCamera === true);\n      }\n\n      if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial || material.skinning) {\n        p_uniforms.setValue(_gl, 'viewMatrix', camera.matrixWorldInverse);\n      }\n    } // skinning uniforms must be set even if material didn't change\n    // auto-setting of texture unit for bone texture must go before other textures\n    // otherwise textures used for skinning can take over texture units reserved for other material textures\n\n\n    if (material.skinning) {\n      p_uniforms.setOptional(_gl, object, 'bindMatrix');\n      p_uniforms.setOptional(_gl, object, 'bindMatrixInverse');\n      var skeleton = object.skeleton;\n\n      if (skeleton) {\n        var bones = skeleton.bones;\n\n        if (capabilities.floatVertexTextures) {\n          if (skeleton.boneTexture === undefined) {\n            // layout (1 matrix = 4 pixels)\n            //      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n            //  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n            //       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n            //       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n            //       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n            var size = Math.sqrt(bones.length * 4); // 4 pixels needed for 1 matrix\n\n            size = MathUtils.ceilPowerOfTwo(size);\n            size = Math.max(size, 4);\n            var boneMatrices = new Float32Array(size * size * 4); // 4 floats per RGBA pixel\n\n            boneMatrices.set(skeleton.boneMatrices); // copy current values\n\n            var boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);\n            skeleton.boneMatrices = boneMatrices;\n            skeleton.boneTexture = boneTexture;\n            skeleton.boneTextureSize = size;\n          }\n\n          p_uniforms.setValue(_gl, 'boneTexture', skeleton.boneTexture, textures);\n          p_uniforms.setValue(_gl, 'boneTextureSize', skeleton.boneTextureSize);\n        } else {\n          p_uniforms.setOptional(_gl, skeleton, 'boneMatrices');\n        }\n      }\n    }\n\n    if (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {\n      materialProperties.receiveShadow = object.receiveShadow;\n      p_uniforms.setValue(_gl, 'receiveShadow', object.receiveShadow);\n    }\n\n    if (refreshMaterial) {\n      p_uniforms.setValue(_gl, 'toneMappingExposure', _this.toneMappingExposure);\n      p_uniforms.setValue(_gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint);\n\n      if (materialProperties.needsLights) {\n        // the current material requires lighting info\n        // note: all lighting uniforms are always set correctly\n        // they simply reference the renderer's state for their\n        // values\n        //\n        // use the current material's .needsUpdate flags to set\n        // the GL state when required\n        markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);\n      } // refresh uniforms common to several materials\n\n\n      if (fog && material.fog) {\n        refreshUniformsFog(m_uniforms, fog);\n      }\n\n      if (material.isMeshBasicMaterial) {\n        refreshUniformsCommon(m_uniforms, material);\n      } else if (material.isMeshLambertMaterial) {\n        refreshUniformsCommon(m_uniforms, material);\n        refreshUniformsLambert(m_uniforms, material);\n      } else if (material.isMeshToonMaterial) {\n        refreshUniformsCommon(m_uniforms, material);\n        refreshUniformsToon(m_uniforms, material);\n      } else if (material.isMeshPhongMaterial) {\n        refreshUniformsCommon(m_uniforms, material);\n        refreshUniformsPhong(m_uniforms, material);\n      } else if (material.isMeshStandardMaterial) {\n        refreshUniformsCommon(m_uniforms, material, environment);\n\n        if (material.isMeshPhysicalMaterial) {\n          refreshUniformsPhysical(m_uniforms, material, environment);\n        } else {\n          refreshUniformsStandard(m_uniforms, material, environment);\n        }\n      } else if (material.isMeshMatcapMaterial) {\n        refreshUniformsCommon(m_uniforms, material);\n        refreshUniformsMatcap(m_uniforms, material);\n      } else if (material.isMeshDepthMaterial) {\n        refreshUniformsCommon(m_uniforms, material);\n        refreshUniformsDepth(m_uniforms, material);\n      } else if (material.isMeshDistanceMaterial) {\n        refreshUniformsCommon(m_uniforms, material);\n        refreshUniformsDistance(m_uniforms, material);\n      } else if (material.isMeshNormalMaterial) {\n        refreshUniformsCommon(m_uniforms, material);\n        refreshUniformsNormal(m_uniforms, material);\n      } else if (material.isLineBasicMaterial) {\n        refreshUniformsLine(m_uniforms, material);\n\n        if (material.isLineDashedMaterial) {\n          refreshUniformsDash(m_uniforms, material);\n        }\n      } else if (material.isPointsMaterial) {\n        refreshUniformsPoints(m_uniforms, material);\n      } else if (material.isSpriteMaterial) {\n        refreshUniformsSprites(m_uniforms, material);\n      } else if (material.isShadowMaterial) {\n        m_uniforms.color.value.copy(material.color);\n        m_uniforms.opacity.value = material.opacity;\n      } // RectAreaLight Texture\n      // TODO (mrdoob): Find a nicer implementation\n\n\n      if (m_uniforms.ltc_1 !== undefined) m_uniforms.ltc_1.value = UniformsLib.LTC_1;\n      if (m_uniforms.ltc_2 !== undefined) m_uniforms.ltc_2.value = UniformsLib.LTC_2;\n      WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);\n\n      if (material.isShaderMaterial) {\n        material.uniformsNeedUpdate = false; // #15581\n      }\n    }\n\n    if (material.isShaderMaterial && material.uniformsNeedUpdate === true) {\n      WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);\n      material.uniformsNeedUpdate = false;\n    }\n\n    if (material.isSpriteMaterial) {\n      p_uniforms.setValue(_gl, 'center', object.center);\n    } // common matrices\n\n\n    p_uniforms.setValue(_gl, 'modelViewMatrix', object.modelViewMatrix);\n    p_uniforms.setValue(_gl, 'normalMatrix', object.normalMatrix);\n    p_uniforms.setValue(_gl, 'modelMatrix', object.matrixWorld);\n    return program;\n  } // Uniforms (refresh uniforms objects)\n\n\n  function refreshUniformsCommon(uniforms, material, environment) {\n    uniforms.opacity.value = material.opacity;\n\n    if (material.color) {\n      uniforms.diffuse.value.copy(material.color);\n    }\n\n    if (material.emissive) {\n      uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);\n    }\n\n    if (material.map) {\n      uniforms.map.value = material.map;\n    }\n\n    if (material.alphaMap) {\n      uniforms.alphaMap.value = material.alphaMap;\n    }\n\n    if (material.specularMap) {\n      uniforms.specularMap.value = material.specularMap;\n    }\n\n    var envMap = material.envMap || environment;\n\n    if (envMap) {\n      uniforms.envMap.value = envMap;\n      uniforms.flipEnvMap.value = envMap.isCubeTexture ? -1 : 1;\n      uniforms.reflectivity.value = material.reflectivity;\n      uniforms.refractionRatio.value = material.refractionRatio;\n      uniforms.maxMipLevel.value = properties.get(envMap).__maxMipLevel;\n    }\n\n    if (material.lightMap) {\n      uniforms.lightMap.value = material.lightMap;\n      uniforms.lightMapIntensity.value = material.lightMapIntensity;\n    }\n\n    if (material.aoMap) {\n      uniforms.aoMap.value = material.aoMap;\n      uniforms.aoMapIntensity.value = material.aoMapIntensity;\n    } // uv repeat and offset setting priorities\n    // 1. color map\n    // 2. specular map\n    // 3. normal map\n    // 4. bump map\n    // 5. alpha map\n    // 6. emissive map\n\n\n    var uvScaleMap;\n\n    if (material.map) {\n      uvScaleMap = material.map;\n    } else if (material.specularMap) {\n      uvScaleMap = material.specularMap;\n    } else if (material.displacementMap) {\n      uvScaleMap = material.displacementMap;\n    } else if (material.normalMap) {\n      uvScaleMap = material.normalMap;\n    } else if (material.bumpMap) {\n      uvScaleMap = material.bumpMap;\n    } else if (material.roughnessMap) {\n      uvScaleMap = material.roughnessMap;\n    } else if (material.metalnessMap) {\n      uvScaleMap = material.metalnessMap;\n    } else if (material.alphaMap) {\n      uvScaleMap = material.alphaMap;\n    } else if (material.emissiveMap) {\n      uvScaleMap = material.emissiveMap;\n    }\n\n    if (uvScaleMap !== undefined) {\n      // backwards compatibility\n      if (uvScaleMap.isWebGLRenderTarget) {\n        uvScaleMap = uvScaleMap.texture;\n      }\n\n      if (uvScaleMap.matrixAutoUpdate === true) {\n        uvScaleMap.updateMatrix();\n      }\n\n      uniforms.uvTransform.value.copy(uvScaleMap.matrix);\n    } // uv repeat and offset setting priorities for uv2\n    // 1. ao map\n    // 2. light map\n\n\n    var uv2ScaleMap;\n\n    if (material.aoMap) {\n      uv2ScaleMap = material.aoMap;\n    } else if (material.lightMap) {\n      uv2ScaleMap = material.lightMap;\n    }\n\n    if (uv2ScaleMap !== undefined) {\n      // backwards compatibility\n      if (uv2ScaleMap.isWebGLRenderTarget) {\n        uv2ScaleMap = uv2ScaleMap.texture;\n      }\n\n      if (uv2ScaleMap.matrixAutoUpdate === true) {\n        uv2ScaleMap.updateMatrix();\n      }\n\n      uniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);\n    }\n  }\n\n  function refreshUniformsLine(uniforms, material) {\n    uniforms.diffuse.value.copy(material.color);\n    uniforms.opacity.value = material.opacity;\n  }\n\n  function refreshUniformsDash(uniforms, material) {\n    uniforms.dashSize.value = material.dashSize;\n    uniforms.totalSize.value = material.dashSize + material.gapSize;\n    uniforms.scale.value = material.scale;\n  }\n\n  function refreshUniformsPoints(uniforms, material) {\n    uniforms.diffuse.value.copy(material.color);\n    uniforms.opacity.value = material.opacity;\n    uniforms.size.value = material.size * _pixelRatio;\n    uniforms.scale.value = _height * 0.5;\n\n    if (material.map) {\n      uniforms.map.value = material.map;\n    }\n\n    if (material.alphaMap) {\n      uniforms.alphaMap.value = material.alphaMap;\n    } // uv repeat and offset setting priorities\n    // 1. color map\n    // 2. alpha map\n\n\n    var uvScaleMap;\n\n    if (material.map) {\n      uvScaleMap = material.map;\n    } else if (material.alphaMap) {\n      uvScaleMap = material.alphaMap;\n    }\n\n    if (uvScaleMap !== undefined) {\n      if (uvScaleMap.matrixAutoUpdate === true) {\n        uvScaleMap.updateMatrix();\n      }\n\n      uniforms.uvTransform.value.copy(uvScaleMap.matrix);\n    }\n  }\n\n  function refreshUniformsSprites(uniforms, material) {\n    uniforms.diffuse.value.copy(material.color);\n    uniforms.opacity.value = material.opacity;\n    uniforms.rotation.value = material.rotation;\n\n    if (material.map) {\n      uniforms.map.value = material.map;\n    }\n\n    if (material.alphaMap) {\n      uniforms.alphaMap.value = material.alphaMap;\n    } // uv repeat and offset setting priorities\n    // 1. color map\n    // 2. alpha map\n\n\n    var uvScaleMap;\n\n    if (material.map) {\n      uvScaleMap = material.map;\n    } else if (material.alphaMap) {\n      uvScaleMap = material.alphaMap;\n    }\n\n    if (uvScaleMap !== undefined) {\n      if (uvScaleMap.matrixAutoUpdate === true) {\n        uvScaleMap.updateMatrix();\n      }\n\n      uniforms.uvTransform.value.copy(uvScaleMap.matrix);\n    }\n  }\n\n  function refreshUniformsFog(uniforms, fog) {\n    uniforms.fogColor.value.copy(fog.color);\n\n    if (fog.isFog) {\n      uniforms.fogNear.value = fog.near;\n      uniforms.fogFar.value = fog.far;\n    } else if (fog.isFogExp2) {\n      uniforms.fogDensity.value = fog.density;\n    }\n  }\n\n  function refreshUniformsLambert(uniforms, material) {\n    if (material.emissiveMap) {\n      uniforms.emissiveMap.value = material.emissiveMap;\n    }\n  }\n\n  function refreshUniformsPhong(uniforms, material) {\n    uniforms.specular.value.copy(material.specular);\n    uniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )\n\n    if (material.emissiveMap) {\n      uniforms.emissiveMap.value = material.emissiveMap;\n    }\n\n    if (material.bumpMap) {\n      uniforms.bumpMap.value = material.bumpMap;\n      uniforms.bumpScale.value = material.bumpScale;\n      if (material.side === BackSide) uniforms.bumpScale.value *= -1;\n    }\n\n    if (material.normalMap) {\n      uniforms.normalMap.value = material.normalMap;\n      uniforms.normalScale.value.copy(material.normalScale);\n      if (material.side === BackSide) uniforms.normalScale.value.negate();\n    }\n\n    if (material.displacementMap) {\n      uniforms.displacementMap.value = material.displacementMap;\n      uniforms.displacementScale.value = material.displacementScale;\n      uniforms.displacementBias.value = material.displacementBias;\n    }\n  }\n\n  function refreshUniformsToon(uniforms, material) {\n    uniforms.specular.value.copy(material.specular);\n    uniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )\n\n    if (material.gradientMap) {\n      uniforms.gradientMap.value = material.gradientMap;\n    }\n\n    if (material.emissiveMap) {\n      uniforms.emissiveMap.value = material.emissiveMap;\n    }\n\n    if (material.bumpMap) {\n      uniforms.bumpMap.value = material.bumpMap;\n      uniforms.bumpScale.value = material.bumpScale;\n      if (material.side === BackSide) uniforms.bumpScale.value *= -1;\n    }\n\n    if (material.normalMap) {\n      uniforms.normalMap.value = material.normalMap;\n      uniforms.normalScale.value.copy(material.normalScale);\n      if (material.side === BackSide) uniforms.normalScale.value.negate();\n    }\n\n    if (material.displacementMap) {\n      uniforms.displacementMap.value = material.displacementMap;\n      uniforms.displacementScale.value = material.displacementScale;\n      uniforms.displacementBias.value = material.displacementBias;\n    }\n  }\n\n  function refreshUniformsStandard(uniforms, material, environment) {\n    uniforms.roughness.value = material.roughness;\n    uniforms.metalness.value = material.metalness;\n\n    if (material.roughnessMap) {\n      uniforms.roughnessMap.value = material.roughnessMap;\n    }\n\n    if (material.metalnessMap) {\n      uniforms.metalnessMap.value = material.metalnessMap;\n    }\n\n    if (material.emissiveMap) {\n      uniforms.emissiveMap.value = material.emissiveMap;\n    }\n\n    if (material.bumpMap) {\n      uniforms.bumpMap.value = material.bumpMap;\n      uniforms.bumpScale.value = material.bumpScale;\n      if (material.side === BackSide) uniforms.bumpScale.value *= -1;\n    }\n\n    if (material.normalMap) {\n      uniforms.normalMap.value = material.normalMap;\n      uniforms.normalScale.value.copy(material.normalScale);\n      if (material.side === BackSide) uniforms.normalScale.value.negate();\n    }\n\n    if (material.displacementMap) {\n      uniforms.displacementMap.value = material.displacementMap;\n      uniforms.displacementScale.value = material.displacementScale;\n      uniforms.displacementBias.value = material.displacementBias;\n    }\n\n    if (material.envMap || environment) {\n      //uniforms.envMap.value = material.envMap; // part of uniforms common\n      uniforms.envMapIntensity.value = material.envMapIntensity;\n    }\n  }\n\n  function refreshUniformsPhysical(uniforms, material, environment) {\n    refreshUniformsStandard(uniforms, material, environment);\n    uniforms.reflectivity.value = material.reflectivity; // also part of uniforms common\n\n    uniforms.clearcoat.value = material.clearcoat;\n    uniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n    if (material.sheen) uniforms.sheen.value.copy(material.sheen);\n\n    if (material.clearcoatMap) {\n      uniforms.clearcoatMap.value = material.clearcoatMap;\n    }\n\n    if (material.clearcoatRoughnessMap) {\n      uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n    }\n\n    if (material.clearcoatNormalMap) {\n      uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);\n      uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n      if (material.side === BackSide) {\n        uniforms.clearcoatNormalScale.value.negate();\n      }\n    }\n\n    uniforms.transparency.value = material.transparency;\n  }\n\n  function refreshUniformsMatcap(uniforms, material) {\n    if (material.matcap) {\n      uniforms.matcap.value = material.matcap;\n    }\n\n    if (material.bumpMap) {\n      uniforms.bumpMap.value = material.bumpMap;\n      uniforms.bumpScale.value = material.bumpScale;\n      if (material.side === BackSide) uniforms.bumpScale.value *= -1;\n    }\n\n    if (material.normalMap) {\n      uniforms.normalMap.value = material.normalMap;\n      uniforms.normalScale.value.copy(material.normalScale);\n      if (material.side === BackSide) uniforms.normalScale.value.negate();\n    }\n\n    if (material.displacementMap) {\n      uniforms.displacementMap.value = material.displacementMap;\n      uniforms.displacementScale.value = material.displacementScale;\n      uniforms.displacementBias.value = material.displacementBias;\n    }\n  }\n\n  function refreshUniformsDepth(uniforms, material) {\n    if (material.displacementMap) {\n      uniforms.displacementMap.value = material.displacementMap;\n      uniforms.displacementScale.value = material.displacementScale;\n      uniforms.displacementBias.value = material.displacementBias;\n    }\n  }\n\n  function refreshUniformsDistance(uniforms, material) {\n    if (material.displacementMap) {\n      uniforms.displacementMap.value = material.displacementMap;\n      uniforms.displacementScale.value = material.displacementScale;\n      uniforms.displacementBias.value = material.displacementBias;\n    }\n\n    uniforms.referencePosition.value.copy(material.referencePosition);\n    uniforms.nearDistance.value = material.nearDistance;\n    uniforms.farDistance.value = material.farDistance;\n  }\n\n  function refreshUniformsNormal(uniforms, material) {\n    if (material.bumpMap) {\n      uniforms.bumpMap.value = material.bumpMap;\n      uniforms.bumpScale.value = material.bumpScale;\n      if (material.side === BackSide) uniforms.bumpScale.value *= -1;\n    }\n\n    if (material.normalMap) {\n      uniforms.normalMap.value = material.normalMap;\n      uniforms.normalScale.value.copy(material.normalScale);\n      if (material.side === BackSide) uniforms.normalScale.value.negate();\n    }\n\n    if (material.displacementMap) {\n      uniforms.displacementMap.value = material.displacementMap;\n      uniforms.displacementScale.value = material.displacementScale;\n      uniforms.displacementBias.value = material.displacementBias;\n    }\n  } // If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\n  function markUniformsLightsNeedsUpdate(uniforms, value) {\n    uniforms.ambientLightColor.needsUpdate = value;\n    uniforms.lightProbe.needsUpdate = value;\n    uniforms.directionalLights.needsUpdate = value;\n    uniforms.directionalLightShadows.needsUpdate = value;\n    uniforms.pointLights.needsUpdate = value;\n    uniforms.pointLightShadows.needsUpdate = value;\n    uniforms.spotLights.needsUpdate = value;\n    uniforms.spotLightShadows.needsUpdate = value;\n    uniforms.rectAreaLights.needsUpdate = value;\n    uniforms.hemisphereLights.needsUpdate = value;\n  }\n\n  function materialNeedsLights(material) {\n    return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;\n  } //\n\n\n  this.setFramebuffer = function (value) {\n    if (_framebuffer !== value && _currentRenderTarget === null) _gl.bindFramebuffer(_gl.FRAMEBUFFER, value);\n    _framebuffer = value;\n  };\n\n  this.getActiveCubeFace = function () {\n    return _currentActiveCubeFace;\n  };\n\n  this.getActiveMipmapLevel = function () {\n    return _currentActiveMipmapLevel;\n  };\n\n  this.getRenderTarget = function () {\n    return _currentRenderTarget;\n  };\n\n  this.setRenderTarget = function (renderTarget, activeCubeFace, activeMipmapLevel) {\n    _currentRenderTarget = renderTarget;\n    _currentActiveCubeFace = activeCubeFace;\n    _currentActiveMipmapLevel = activeMipmapLevel;\n\n    if (renderTarget && properties.get(renderTarget).__webglFramebuffer === undefined) {\n      textures.setupRenderTarget(renderTarget);\n    }\n\n    var framebuffer = _framebuffer;\n    var isCube = false;\n\n    if (renderTarget) {\n      var __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;\n\n      if (renderTarget.isWebGLCubeRenderTarget) {\n        framebuffer = __webglFramebuffer[activeCubeFace || 0];\n        isCube = true;\n      } else if (renderTarget.isWebGLMultisampleRenderTarget) {\n        framebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;\n      } else {\n        framebuffer = __webglFramebuffer;\n      }\n\n      _currentViewport.copy(renderTarget.viewport);\n\n      _currentScissor.copy(renderTarget.scissor);\n\n      _currentScissorTest = renderTarget.scissorTest;\n    } else {\n      _currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();\n\n      _currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();\n\n      _currentScissorTest = _scissorTest;\n    }\n\n    if (_currentFramebuffer !== framebuffer) {\n      _gl.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n      _currentFramebuffer = framebuffer;\n    }\n\n    state.viewport(_currentViewport);\n    state.scissor(_currentScissor);\n    state.setScissorTest(_currentScissorTest);\n\n    if (isCube) {\n      var textureProperties = properties.get(renderTarget.texture);\n\n      _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + (activeCubeFace || 0), textureProperties.__webglTexture, activeMipmapLevel || 0);\n    }\n  };\n\n  this.readRenderTargetPixels = function (renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {\n    if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {\n      console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');\n      return;\n    }\n\n    var framebuffer = properties.get(renderTarget).__webglFramebuffer;\n\n    if (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined) {\n      framebuffer = framebuffer[activeCubeFaceIndex];\n    }\n\n    if (framebuffer) {\n      var restore = false;\n\n      if (framebuffer !== _currentFramebuffer) {\n        _gl.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n        restore = true;\n      }\n\n      try {\n        var texture = renderTarget.texture;\n        var textureFormat = texture.format;\n        var textureType = texture.type;\n\n        if (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_FORMAT)) {\n          console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.');\n          return;\n        }\n\n        if (textureType !== UnsignedByteType && utils.convert(textureType) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_TYPE) && // IE11, Edge and Chrome Mac < 52 (#9513)\n        !(textureType === FloatType && (capabilities.isWebGL2 || extensions.get('OES_texture_float') || extensions.get('WEBGL_color_buffer_float'))) && // Chrome Mac >= 52 and Firefox\n        !(textureType === HalfFloatType && (capabilities.isWebGL2 ? extensions.get('EXT_color_buffer_float') : extensions.get('EXT_color_buffer_half_float')))) {\n          console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.');\n          return;\n        }\n\n        if (_gl.checkFramebufferStatus(_gl.FRAMEBUFFER) === _gl.FRAMEBUFFER_COMPLETE) {\n          // the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n          if (x >= 0 && x <= renderTarget.width - width && y >= 0 && y <= renderTarget.height - height) {\n            _gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);\n          }\n        } else {\n          console.error('THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.');\n        }\n      } finally {\n        if (restore) {\n          _gl.bindFramebuffer(_gl.FRAMEBUFFER, _currentFramebuffer);\n        }\n      }\n    }\n  };\n\n  this.copyFramebufferToTexture = function (position, texture, level) {\n    if (level === undefined) level = 0;\n    var levelScale = Math.pow(2, -level);\n    var width = Math.floor(texture.image.width * levelScale);\n    var height = Math.floor(texture.image.height * levelScale);\n    var glFormat = utils.convert(texture.format);\n    textures.setTexture2D(texture, 0);\n\n    _gl.copyTexImage2D(_gl.TEXTURE_2D, level, glFormat, position.x, position.y, width, height, 0);\n\n    state.unbindTexture();\n  };\n\n  this.copyTextureToTexture = function (position, srcTexture, dstTexture, level) {\n    var width = srcTexture.image.width;\n    var height = srcTexture.image.height;\n    var glFormat = utils.convert(dstTexture.format);\n    var glType = utils.convert(dstTexture.type);\n    textures.setTexture2D(dstTexture, 0);\n\n    if (srcTexture.isDataTexture) {\n      _gl.texSubImage2D(_gl.TEXTURE_2D, level || 0, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data);\n    } else {\n      _gl.texSubImage2D(_gl.TEXTURE_2D, level || 0, position.x, position.y, glFormat, glType, srcTexture.image);\n    }\n\n    state.unbindTexture();\n  };\n\n  this.initTexture = function (texture) {\n    textures.setTexture2D(texture, 0);\n    state.unbindTexture();\n  };\n\n  if (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n    __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {\n      detail: this\n    })); // eslint-disable-line no-undef\n\n  }\n}\n\nexport { WebGLRenderer };","map":{"version":3,"sources":["D:/chrlab/src/component/panelComponent/Canvas/threejs/src/renderers/WebGLRenderer.js"],"names":["RGBAFormat","HalfFloatType","FloatType","UnsignedByteType","LinearEncoding","LinearToneMapping","BackSide","MathUtils","DataTexture","Frustum","Matrix4","UniformsLib","Vector2","Vector3","Vector4","Scene","WebGLAnimation","WebGLAttributes","WebGLBackground","WebGLBufferRenderer","WebGLCapabilities","WebGLClipping","WebGLExtensions","WebGLGeometries","WebGLIndexedBufferRenderer","WebGLInfo","WebGLMorphtargets","WebGLObjects","WebGLPrograms","WebGLProperties","WebGLRenderLists","WebGLRenderStates","WebGLShadowMap","WebGLState","WebGLTextures","WebGLUniforms","WebGLUtils","WebXRManager","WebGLRenderer","parameters","_canvas","canvas","undefined","document","createElementNS","_context","context","_alpha","alpha","_depth","depth","_stencil","stencil","_antialias","antialias","_premultipliedAlpha","premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","_powerPreference","powerPreference","_failIfMajorPerformanceCaveat","failIfMajorPerformanceCaveat","currentRenderList","currentRenderState","domElement","debug","checkShaderErrors","autoClear","autoClearColor","autoClearDepth","autoClearStencil","sortObjects","clippingPlanes","localClippingEnabled","gammaFactor","outputEncoding","physicallyCorrectLights","toneMapping","toneMappingExposure","toneMappingWhitePoint","maxMorphTargets","maxMorphNormals","_this","_isContextLost","_framebuffer","_currentActiveCubeFace","_currentActiveMipmapLevel","_currentRenderTarget","_currentFramebuffer","_currentMaterialId","_currentGeometryProgram","geometry","program","wireframe","_currentCamera","_currentArrayCamera","_currentViewport","_currentScissor","_currentScissorTest","_width","width","_height","height","_pixelRatio","_opaqueSort","_transparentSort","_viewport","_scissor","_scissorTest","_frustum","_clipping","_clippingEnabled","_localClippingEnabled","_projScreenMatrix","_vector3","getTargetPixelRatio","_gl","contextAttributes","xrCompatible","addEventListener","onContextLost","onContextRestore","getContext","Error","getShaderPrecisionFormat","error","console","message","extensions","capabilities","state","info","properties","textures","attributes","geometries","objects","programCache","renderLists","renderStates","background","morphtargets","bufferRenderer","indexedBufferRenderer","utils","initGLContext","isWebGL2","get","scissor","copy","multiplyScalar","floor","viewport","programs","xr","shadowMap","maxTextureSize","getContextAttributes","forceContextLoss","extension","loseContext","forceContextRestore","restoreContext","getPixelRatio","setPixelRatio","value","setSize","getSize","target","warn","set","updateStyle","isPresenting","Math","style","setViewport","getDrawingBufferSize","setDrawingBufferSize","pixelRatio","getCurrentViewport","getViewport","x","y","isVector4","z","w","getScissor","setScissor","getScissorTest","setScissorTest","boolean","setOpaqueSort","method","setTransparentSort","getClearColor","setClearColor","apply","arguments","getClearAlpha","setClearAlpha","clear","color","bits","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","clearColor","clearDepth","clearStencil","dispose","removeEventListener","animation","stop","event","preventDefault","log","onMaterialDispose","material","deallocateMaterial","releaseMaterialProgramReference","remove","programInfo","releaseProgram","renderObjectImmediate","object","render","renderBufferImmediate","initAttributes","buffers","hasPositions","position","createBuffer","hasNormals","normal","hasUvs","uv","hasColors","programAttributes","getAttributes","bindBuffer","ARRAY_BUFFER","bufferData","positionArray","DYNAMIC_DRAW","enableAttribute","vertexAttribPointer","FLOAT","normalArray","uvArray","colorArray","disableUnusedAttributes","drawArrays","TRIANGLES","count","tempScene","renderBufferDirect","camera","scene","group","frontFaceCW","isMesh","matrixWorld","determinant","setProgram","setMaterial","updateBuffers","id","morphTargets","morphNormals","update","index","rangeFactor","getWireframeAttribute","attribute","renderer","setIndex","setupVertexAttributes","ELEMENT_ARRAY_BUFFER","buffer","dataCount","rangeStart","drawRange","start","rangeCount","groupStart","groupCount","Infinity","drawStart","max","drawEnd","min","drawCount","setLineWidth","wireframeLinewidth","setMode","LINES","isLine","lineWidth","linewidth","isLineSegments","isLineLoop","LINE_LOOP","LINE_STRIP","isPoints","POINTS","isSprite","isInstancedMesh","renderInstances","isInstancedBufferGeometry","maxInstancedCount","geometryAttributes","materialDefaultAttributeValues","defaultAttributeValues","name","programAttribute","geometryAttribute","normalized","size","itemSize","type","bytesPerElement","isInterleavedBufferAttribute","data","stride","offset","isInstancedInterleavedBuffer","enableAttributeAndDivisor","meshPerAttribute","isInstancedBufferAttribute","instanceMatrix","length","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","compile","init","traverse","isLight","pushLight","castShadow","pushShadow","setupLights","compiled","Array","isArray","i","uuid","initMaterial","onAnimationFrameCallback","onAnimationFrame","time","setAnimationLoop","window","setContext","callback","renderTarget","forceClear","isCamera","autoUpdate","updateMatrixWorld","parent","enabled","getCamera","onBeforeRender","multiplyMatrices","projectionMatrix","matrixWorldInverse","setFromProjectionMatrix","projectObject","finish","sort","beginShadows","shadowsArray","endShadows","autoReset","reset","setRenderTarget","opaqueObjects","opaque","transparentObjects","transparent","overrideMaterial","renderObjects","onAfterRender","updateRenderTargetMipmap","updateMultisampleRenderTarget","setTest","setMask","setPolygonOffset","groupOrder","visible","layers","test","isGroup","renderOrder","isLOD","frustumCulled","intersectsSprite","setFromMatrixPosition","applyMatrix4","push","isImmediateRenderObject","isSkinnedMesh","skeleton","frame","intersectsObject","groups","l","groupMaterial","materialIndex","children","renderList","renderItem","isArrayCamera","cameras","j","jl","camera2","renderObject","modelViewMatrix","normalMatrix","getNormalMatrix","materialProperties","lights","lightsStateVersion","version","getParameters","numPlanes","numIntersection","programCacheKey","getProgramCacheKey","programChange","cacheKey","shaderID","acquireProgram","uniforms","environment","isMeshStandardMaterial","numSupportedMorphTargets","numSupportedMorphNormals","isShaderMaterial","isRawShaderMaterial","clipping","numClippingPlanes","uniform","fog","needsLights","materialNeedsLights","ambientLightColor","ambient","lightProbe","probe","directionalLights","directional","directionalLightShadows","directionalShadow","spotLights","spot","spotLightShadows","spotShadow","rectAreaLights","rectArea","pointLights","point","pointLightShadows","pointShadow","hemisphereLights","hemi","directionalShadowMap","directionalShadowMatrix","spotShadowMap","spotShadowMatrix","pointShadowMap","pointShadowMatrix","progUniforms","getUniforms","uniformsList","seqWithValue","seq","resetTextureUnits","useCache","setState","clipIntersection","clipShadows","__version","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","useProgram","setValue","logarithmicDepthBuffer","far","LN2","isMeshPhongMaterial","isMeshToonMaterial","envMap","uCamPos","map","cameraPosition","isMeshLambertMaterial","isMeshBasicMaterial","isOrthographicCamera","skinning","setOptional","bones","floatVertexTextures","boneTexture","sqrt","ceilPowerOfTwo","boneMatrices","Float32Array","boneTextureSize","receiveShadow","markUniformsLightsNeedsUpdate","refreshUniformsFog","refreshUniformsCommon","refreshUniformsLambert","refreshUniformsToon","refreshUniformsPhong","isMeshPhysicalMaterial","refreshUniformsPhysical","refreshUniformsStandard","isMeshMatcapMaterial","refreshUniformsMatcap","isMeshDepthMaterial","refreshUniformsDepth","isMeshDistanceMaterial","refreshUniformsDistance","isMeshNormalMaterial","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","isShadowMaterial","opacity","ltc_1","LTC_1","ltc_2","LTC_2","upload","uniformsNeedUpdate","center","diffuse","emissive","emissiveIntensity","alphaMap","specularMap","flipEnvMap","isCubeTexture","reflectivity","refractionRatio","maxMipLevel","__maxMipLevel","lightMap","lightMapIntensity","aoMap","aoMapIntensity","uvScaleMap","displacementMap","normalMap","bumpMap","roughnessMap","metalnessMap","emissiveMap","isWebGLRenderTarget","texture","matrixAutoUpdate","updateMatrix","uvTransform","matrix","uv2ScaleMap","uv2Transform","dashSize","totalSize","gapSize","scale","rotation","fogColor","isFog","fogNear","near","fogFar","isFogExp2","fogDensity","density","specular","shininess","bumpScale","side","normalScale","negate","displacementScale","displacementBias","gradientMap","roughness","metalness","envMapIntensity","clearcoat","clearcoatRoughness","sheen","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","clearcoatNormalScale","transparency","matcap","referencePosition","nearDistance","farDistance","needsUpdate","setFramebuffer","bindFramebuffer","FRAMEBUFFER","getActiveCubeFace","getActiveMipmapLevel","getRenderTarget","activeCubeFace","activeMipmapLevel","__webglFramebuffer","setupRenderTarget","framebuffer","isCube","isWebGLCubeRenderTarget","isWebGLMultisampleRenderTarget","__webglMultisampledFramebuffer","scissorTest","textureProperties","framebufferTexture2D","COLOR_ATTACHMENT0","TEXTURE_CUBE_MAP_POSITIVE_X","__webglTexture","readRenderTargetPixels","activeCubeFaceIndex","restore","textureFormat","format","textureType","convert","getParameter","IMPLEMENTATION_COLOR_READ_FORMAT","IMPLEMENTATION_COLOR_READ_TYPE","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","copyFramebufferToTexture","level","levelScale","pow","image","glFormat","setTexture2D","copyTexImage2D","TEXTURE_2D","unbindTexture","copyTextureToTexture","srcTexture","dstTexture","glType","isDataTexture","texSubImage2D","initTexture","__THREE_DEVTOOLS__","dispatchEvent","CustomEvent","detail"],"mappings":"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","sourcesContent":["/**\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author szimek / https://github.com/szimek/\n * @author tschw\n */\n\nimport {\n\tRGBAFormat,\n\tHalfFloatType,\n\tFloatType,\n\tUnsignedByteType,\n\tLinearEncoding,\n\tLinearToneMapping,\n\tBackSide\n} from '../constants.js';\nimport { MathUtils } from '../math/MathUtils.js';\nimport { DataTexture } from '../textures/DataTexture.js';\nimport { Frustum } from '../math/Frustum.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { UniformsLib } from './shaders/UniformsLib.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { Vector4 } from '../math/Vector4.js';\nimport { Scene } from '../scenes/Scene.js';\nimport { WebGLAnimation } from './webgl/WebGLAnimation.js';\nimport { WebGLAttributes } from './webgl/WebGLAttributes.js';\nimport { WebGLBackground } from './webgl/WebGLBackground.js';\nimport { WebGLBufferRenderer } from './webgl/WebGLBufferRenderer.js';\nimport { WebGLCapabilities } from './webgl/WebGLCapabilities.js';\nimport { WebGLClipping } from './webgl/WebGLClipping.js';\nimport { WebGLExtensions } from './webgl/WebGLExtensions.js';\nimport { WebGLGeometries } from './webgl/WebGLGeometries.js';\nimport { WebGLIndexedBufferRenderer } from './webgl/WebGLIndexedBufferRenderer.js';\nimport { WebGLInfo } from './webgl/WebGLInfo.js';\nimport { WebGLMorphtargets } from './webgl/WebGLMorphtargets.js';\nimport { WebGLObjects } from './webgl/WebGLObjects.js';\nimport { WebGLPrograms } from './webgl/WebGLPrograms.js';\nimport { WebGLProperties } from './webgl/WebGLProperties.js';\nimport { WebGLRenderLists } from './webgl/WebGLRenderLists.js';\nimport { WebGLRenderStates } from './webgl/WebGLRenderStates.js';\nimport { WebGLShadowMap } from './webgl/WebGLShadowMap.js';\nimport { WebGLState } from './webgl/WebGLState.js';\nimport { WebGLTextures } from './webgl/WebGLTextures.js';\nimport { WebGLUniforms } from './webgl/WebGLUniforms.js';\nimport { WebGLUtils } from './webgl/WebGLUtils.js';\nimport { WebXRManager } from './webxr/WebXRManager.js';\n\nfunction WebGLRenderer( parameters ) {\n\n\tparameters = parameters || {};\n\n\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\n\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\n\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\n\t\t_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\n\n\tvar currentRenderList = null;\n\tvar currentRenderState = null;\n\n\t// public properties\n\n\tthis.domElement = _canvas;\n\n\t// Debug configuration container\n\tthis.debug = {\n\n\t\t/**\n\t\t * Enables error checking and reporting when shader programs are being compiled\n\t\t * @type {boolean}\n\t\t */\n\t\tcheckShaderErrors: true\n\t};\n\n\t// clearing\n\n\tthis.autoClear = true;\n\tthis.autoClearColor = true;\n\tthis.autoClearDepth = true;\n\tthis.autoClearStencil = true;\n\n\t// scene graph\n\n\tthis.sortObjects = true;\n\n\t// user-defined clipping\n\n\tthis.clippingPlanes = [];\n\tthis.localClippingEnabled = false;\n\n\t// physically based shading\n\n\tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\tthis.outputEncoding = LinearEncoding;\n\n\t// physical lights\n\n\tthis.physicallyCorrectLights = false;\n\n\t// tone mapping\n\n\tthis.toneMapping = LinearToneMapping;\n\tthis.toneMappingExposure = 1.0;\n\tthis.toneMappingWhitePoint = 1.0;\n\n\t// morphs\n\n\tthis.maxMorphTargets = 8;\n\tthis.maxMorphNormals = 4;\n\n\t// internal properties\n\n\tvar _this = this,\n\n\t\t_isContextLost = false,\n\n\t\t// internal state cache\n\n\t\t_framebuffer = null,\n\n\t\t_currentActiveCubeFace = 0,\n\t\t_currentActiveMipmapLevel = 0,\n\t\t_currentRenderTarget = null,\n\t\t_currentFramebuffer = null,\n\t\t_currentMaterialId = - 1,\n\n\t\t// geometry and program caching\n\n\t\t_currentGeometryProgram = {\n\t\t\tgeometry: null,\n\t\t\tprogram: null,\n\t\t\twireframe: false\n\t\t},\n\n\t\t_currentCamera = null,\n\t\t_currentArrayCamera = null,\n\n\t\t_currentViewport = new Vector4(),\n\t\t_currentScissor = new Vector4(),\n\t\t_currentScissorTest = null,\n\n\t\t//\n\n\t\t_width = _canvas.width,\n\t\t_height = _canvas.height,\n\n\t\t_pixelRatio = 1,\n\t\t_opaqueSort = null,\n\t\t_transparentSort = null,\n\n\t\t_viewport = new Vector4( 0, 0, _width, _height ),\n\t\t_scissor = new Vector4( 0, 0, _width, _height ),\n\t\t_scissorTest = false,\n\n\t\t// frustum\n\n\t\t_frustum = new Frustum(),\n\n\t\t// clipping\n\n\t\t_clipping = new WebGLClipping(),\n\t\t_clippingEnabled = false,\n\t\t_localClippingEnabled = false,\n\n\t\t// camera matrices cache\n\n\t\t_projScreenMatrix = new Matrix4(),\n\n\t\t_vector3 = new Vector3();\n\n\tfunction getTargetPixelRatio() {\n\n\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n\t}\n\n\t// initialize\n\n\tvar _gl;\n\n\ttry {\n\n\t\tvar contextAttributes = {\n\t\t\talpha: _alpha,\n\t\t\tdepth: _depth,\n\t\t\tstencil: _stencil,\n\t\t\tantialias: _antialias,\n\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\tpowerPreference: _powerPreference,\n\t\t\tfailIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat,\n\t\t\txrCompatible: true\n\t\t};\n\n\t\t// event listeners must be registered before WebGL context is created, see #12753\n\n\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\t\t_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\t_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );\n\n\t\tif ( _gl === null ) {\n\n\t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\n\n\t\t\t\tthrow new Error( 'Error creating WebGL context with your selected attributes.' );\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( 'Error creating WebGL context.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n\t\t\t_gl.getShaderPrecisionFormat = function () {\n\n\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n\t\t\t};\n\n\t\t}\n\n\t} catch ( error ) {\n\n\t\tconsole.error( 'THREE.WebGLRenderer: ' + error.message );\n\t\tthrow error;\n\n\t}\n\n\tvar extensions, capabilities, state, info;\n\tvar properties, textures, attributes, geometries, objects;\n\tvar programCache, renderLists, renderStates;\n\n\tvar background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\n\tvar utils;\n\n\tfunction initGLContext() {\n\n\t\textensions = new WebGLExtensions( _gl );\n\n\t\tcapabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\n\t\tif ( capabilities.isWebGL2 === false ) {\n\n\t\t\textensions.get( 'WEBGL_depth_texture' );\n\t\t\textensions.get( 'OES_texture_float' );\n\t\t\textensions.get( 'OES_texture_half_float' );\n\t\t\textensions.get( 'OES_texture_half_float_linear' );\n\t\t\textensions.get( 'OES_standard_derivatives' );\n\t\t\textensions.get( 'OES_element_index_uint' );\n\t\t\textensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t}\n\n\t\textensions.get( 'OES_texture_float_linear' );\n\n\t\tutils = new WebGLUtils( _gl, extensions, capabilities );\n\n\t\tstate = new WebGLState( _gl, extensions, capabilities );\n\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\n\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\tinfo = new WebGLInfo( _gl );\n\t\tproperties = new WebGLProperties();\n\t\ttextures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );\n\t\tattributes = new WebGLAttributes( _gl, capabilities );\n\t\tgeometries = new WebGLGeometries( _gl, attributes, info );\n\t\tobjects = new WebGLObjects( _gl, geometries, attributes, info );\n\t\tmorphtargets = new WebGLMorphtargets( _gl );\n\t\tprogramCache = new WebGLPrograms( _this, extensions, capabilities );\n\t\trenderLists = new WebGLRenderLists();\n\t\trenderStates = new WebGLRenderStates();\n\n\t\tbackground = new WebGLBackground( _this, state, objects, _premultipliedAlpha );\n\n\t\tbufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );\n\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );\n\n\t\tinfo.programs = programCache.programs;\n\n\t\t_this.capabilities = capabilities;\n\t\t_this.extensions = extensions;\n\t\t_this.properties = properties;\n\t\t_this.renderLists = renderLists;\n\t\t_this.state = state;\n\t\t_this.info = info;\n\n\t}\n\n\tinitGLContext();\n\n\t// xr\n\n\tvar xr = new WebXRManager( _this, _gl );\n\n\tthis.xr = xr;\n\n\t// shadow map\n\n\tvar shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );\n\n\tthis.shadowMap = shadowMap;\n\n\t// API\n\n\tthis.getContext = function () {\n\n\t\treturn _gl;\n\n\t};\n\n\tthis.getContextAttributes = function () {\n\n\t\treturn _gl.getContextAttributes();\n\n\t};\n\n\tthis.forceContextLoss = function () {\n\n\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\tif ( extension ) extension.loseContext();\n\n\t};\n\n\tthis.forceContextRestore = function () {\n\n\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\n\t\tif ( extension ) extension.restoreContext();\n\n\t};\n\n\tthis.getPixelRatio = function () {\n\n\t\treturn _pixelRatio;\n\n\t};\n\n\tthis.setPixelRatio = function ( value ) {\n\n\t\tif ( value === undefined ) return;\n\n\t\t_pixelRatio = value;\n\n\t\tthis.setSize( _width, _height, false );\n\n\t};\n\n\tthis.getSize = function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'WebGLRenderer: .getsize() now requires a Vector2 as an argument' );\n\n\t\t\ttarget = new Vector2();\n\n\t\t}\n\n\t\treturn target.set( _width, _height );\n\n\t};\n\n\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\tif ( xr.isPresenting ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\t_width = width;\n\t\t_height = height;\n\n\t\t_canvas.width = Math.floor( width * _pixelRatio );\n\t\t_canvas.height = Math.floor( height * _pixelRatio );\n\n\t\tif ( updateStyle !== false ) {\n\n\t\t\t_canvas.style.width = width + 'px';\n\t\t\t_canvas.style.height = height + 'px';\n\n\t\t}\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.getDrawingBufferSize = function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument' );\n\n\t\t\ttarget = new Vector2();\n\n\t\t}\n\n\t\treturn target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();\n\n\t};\n\n\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\n\n\t\t_width = width;\n\t\t_height = height;\n\n\t\t_pixelRatio = pixelRatio;\n\n\t\t_canvas.width = Math.floor( width * pixelRatio );\n\t\t_canvas.height = Math.floor( height * pixelRatio );\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.getCurrentViewport = function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument' );\n\n\t\t\ttarget = new Vector4();\n\n\t\t}\n\n\t\treturn target.copy( _currentViewport );\n\n\t};\n\n\tthis.getViewport = function ( target ) {\n\n\t\treturn target.copy( _viewport );\n\n\t};\n\n\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\tif ( x.isVector4 ) {\n\n\t\t\t_viewport.set( x.x, x.y, x.z, x.w );\n\n\t\t} else {\n\n\t\t\t_viewport.set( x, y, width, height );\n\n\t\t}\n\n\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\n\n\t};\n\n\tthis.getScissor = function ( target ) {\n\n\t\treturn target.copy( _scissor );\n\n\t};\n\n\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\tif ( x.isVector4 ) {\n\n\t\t\t_scissor.set( x.x, x.y, x.z, x.w );\n\n\t\t} else {\n\n\t\t\t_scissor.set( x, y, width, height );\n\n\t\t}\n\n\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\n\n\t};\n\n\tthis.getScissorTest = function () {\n\n\t\treturn _scissorTest;\n\n\t};\n\n\tthis.setScissorTest = function ( boolean ) {\n\n\t\tstate.setScissorTest( _scissorTest = boolean );\n\n\t};\n\n\tthis.setOpaqueSort = function ( method ) {\n\n\t\t_opaqueSort = method;\n\n\t};\n\n\tthis.setTransparentSort = function ( method ) {\n\n\t\t_transparentSort = method;\n\n\t};\n\n\t// Clearing\n\n\tthis.getClearColor = function () {\n\n\t\treturn background.getClearColor();\n\n\t};\n\n\tthis.setClearColor = function () {\n\n\t\tbackground.setClearColor.apply( background, arguments );\n\n\t};\n\n\tthis.getClearAlpha = function () {\n\n\t\treturn background.getClearAlpha();\n\n\t};\n\n\tthis.setClearAlpha = function () {\n\n\t\tbackground.setClearAlpha.apply( background, arguments );\n\n\t};\n\n\tthis.clear = function ( color, depth, stencil ) {\n\n\t\tvar bits = 0;\n\n\t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\n\t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\n\t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\n\n\t\t_gl.clear( bits );\n\n\t};\n\n\tthis.clearColor = function () {\n\n\t\tthis.clear( true, false, false );\n\n\t};\n\n\tthis.clearDepth = function () {\n\n\t\tthis.clear( false, true, false );\n\n\t};\n\n\tthis.clearStencil = function () {\n\n\t\tthis.clear( false, false, true );\n\n\t};\n\n\t//\n\n\tthis.dispose = function () {\n\n\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\t\t_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\trenderLists.dispose();\n\t\trenderStates.dispose();\n\t\tproperties.dispose();\n\t\tobjects.dispose();\n\n\t\txr.dispose();\n\n\t\tanimation.stop();\n\n\t\tthis.forceContextLoss();\n\n\t};\n\n\t// Events\n\n\tfunction onContextLost( event ) {\n\n\t\tevent.preventDefault();\n\n\t\tconsole.log( 'THREE.WebGLRenderer: Context Lost.' );\n\n\t\t_isContextLost = true;\n\n\t}\n\n\tfunction onContextRestore( /* event */ ) {\n\n\t\tconsole.log( 'THREE.WebGLRenderer: Context Restored.' );\n\n\t\t_isContextLost = false;\n\n\t\tinitGLContext();\n\n\t}\n\n\tfunction onMaterialDispose( event ) {\n\n\t\tvar material = event.target;\n\n\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\tdeallocateMaterial( material );\n\n\t}\n\n\t// Buffer deallocation\n\n\tfunction deallocateMaterial( material ) {\n\n\t\treleaseMaterialProgramReference( material );\n\n\t\tproperties.remove( material );\n\n\t}\n\n\n\tfunction releaseMaterialProgramReference( material ) {\n\n\t\tvar programInfo = properties.get( material ).program;\n\n\t\tmaterial.program = undefined;\n\n\t\tif ( programInfo !== undefined ) {\n\n\t\t\tprogramCache.releaseProgram( programInfo );\n\n\t\t}\n\n\t}\n\n\t// Buffer rendering\n\n\tfunction renderObjectImmediate( object, program ) {\n\n\t\tobject.render( function ( object ) {\n\n\t\t\t_this.renderBufferImmediate( object, program );\n\n\t\t} );\n\n\t}\n\n\tthis.renderBufferImmediate = function ( object, program ) {\n\n\t\tstate.initAttributes();\n\n\t\tvar buffers = properties.get( object );\n\n\t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\n\t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\n\t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\n\t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\n\n\t\tvar programAttributes = program.getAttributes();\n\n\t\tif ( object.hasPositions ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tstate.enableAttribute( programAttributes.position );\n\t\t\t_gl.vertexAttribPointer( programAttributes.position, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasNormals ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tstate.enableAttribute( programAttributes.normal );\n\t\t\t_gl.vertexAttribPointer( programAttributes.normal, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasUvs ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tstate.enableAttribute( programAttributes.uv );\n\t\t\t_gl.vertexAttribPointer( programAttributes.uv, 2, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tif ( object.hasColors ) {\n\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\n\n\t\t\tstate.enableAttribute( programAttributes.color );\n\t\t\t_gl.vertexAttribPointer( programAttributes.color, 3, _gl.FLOAT, false, 0, 0 );\n\n\t\t}\n\n\t\tstate.disableUnusedAttributes();\n\n\t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\n\n\t\tobject.count = 0;\n\n\t};\n\n\tvar tempScene = new Scene();\n\n\tthis.renderBufferDirect = function ( camera, scene, geometry, material, object, group ) {\n\n\t\tif ( scene === null ) scene = tempScene; // renderBufferDirect second parameter used to be fog (could be null)\n\n\t\tvar frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\n\n\t\tvar program = setProgram( camera, scene, material, object );\n\n\t\tstate.setMaterial( material, frontFaceCW );\n\n\t\tvar updateBuffers = false;\n\n\t\tif ( _currentGeometryProgram.geometry !== geometry.id ||\n\t\t\t_currentGeometryProgram.program !== program.id ||\n\t\t\t_currentGeometryProgram.wireframe !== ( material.wireframe === true ) ) {\n\n\t\t\t_currentGeometryProgram.geometry = geometry.id;\n\t\t\t_currentGeometryProgram.program = program.id;\n\t\t\t_currentGeometryProgram.wireframe = material.wireframe === true;\n\t\t\tupdateBuffers = true;\n\n\t\t}\n\n\t\tif ( material.morphTargets || material.morphNormals ) {\n\n\t\t\tmorphtargets.update( object, geometry, material, program );\n\n\t\t\tupdateBuffers = true;\n\n\t\t}\n\n\t\t//\n\n\t\tvar index = geometry.index;\n\t\tvar position = geometry.attributes.position;\n\n\t\t//\n\n\t\tif ( index === null ) {\n\n\t\t\tif ( position === undefined || position.count === 0 ) return;\n\n\t\t} else if ( index.count === 0 ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t//\n\n\t\tvar rangeFactor = 1;\n\n\t\tif ( material.wireframe === true ) {\n\n\t\t\tindex = geometries.getWireframeAttribute( geometry );\n\t\t\trangeFactor = 2;\n\n\t\t}\n\n\t\tvar attribute;\n\t\tvar renderer = bufferRenderer;\n\n\t\tif ( index !== null ) {\n\n\t\t\tattribute = attributes.get( index );\n\n\t\t\trenderer = indexedBufferRenderer;\n\t\t\trenderer.setIndex( attribute );\n\n\t\t}\n\n\t\tif ( updateBuffers ) {\n\n\t\t\tsetupVertexAttributes( object, geometry, material, program );\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, attribute.buffer );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar dataCount = ( index !== null ) ? index.count : position.count;\n\n\t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n\t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\n\t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\n\t\tvar drawStart = Math.max( rangeStart, groupStart );\n\t\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n\t\tif ( drawCount === 0 ) return;\n\n\t\t//\n\n\t\tif ( object.isMesh ) {\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setMode( _gl.TRIANGLES );\n\n\t\t\t}\n\n\t\t} else if ( object.isLine ) {\n\n\t\t\tvar lineWidth = material.linewidth;\n\n\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\n\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n\t\t\tif ( object.isLineSegments ) {\n\n\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t} else if ( object.isLineLoop ) {\n\n\t\t\t\trenderer.setMode( _gl.LINE_LOOP );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setMode( _gl.LINE_STRIP );\n\n\t\t\t}\n\n\t\t} else if ( object.isPoints ) {\n\n\t\t\trenderer.setMode( _gl.POINTS );\n\n\t\t} else if ( object.isSprite ) {\n\n\t\t\trenderer.setMode( _gl.TRIANGLES );\n\n\t\t}\n\n\t\tif ( object.isInstancedMesh ) {\n\n\t\t\trenderer.renderInstances( geometry, drawStart, drawCount, object.count );\n\n\t\t} else if ( geometry.isInstancedBufferGeometry ) {\n\n\t\t\trenderer.renderInstances( geometry, drawStart, drawCount, geometry.maxInstancedCount );\n\n\t\t} else {\n\n\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t}\n\n\t};\n\n\tfunction setupVertexAttributes( object, geometry, material, program ) {\n\n\t\tif ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {\n\n\t\t\tif ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) return;\n\n\t\t}\n\n\t\tstate.initAttributes();\n\n\t\tvar geometryAttributes = geometry.attributes;\n\n\t\tvar programAttributes = program.getAttributes();\n\n\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\tfor ( var name in programAttributes ) {\n\n\t\t\tvar programAttribute = programAttributes[ name ];\n\n\t\t\tif ( programAttribute >= 0 ) {\n\n\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\t\t\t\t\tvar size = geometryAttribute.itemSize;\n\n\t\t\t\t\tvar attribute = attributes.get( geometryAttribute );\n\n\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\tif ( attribute === undefined ) continue;\n\n\t\t\t\t\tvar buffer = attribute.buffer;\n\t\t\t\t\tvar type = attribute.type;\n\t\t\t\t\tvar bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\tvar data = geometryAttribute.data;\n\t\t\t\t\t\tvar stride = data.stride;\n\t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n\t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\n\n\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );\n\n\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( geometryAttribute.isInstancedBufferAttribute ) {\n\n\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );\n\n\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( name === 'instanceMatrix' ) {\n\n\t\t\t\t\tvar attribute = attributes.get( object.instanceMatrix );\n\n\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\tif ( attribute === undefined ) continue;\n\n\t\t\t\t\tvar buffer = attribute.buffer;\n\t\t\t\t\tvar type = attribute.type;\n\n\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 0, 1 );\n\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 1, 1 );\n\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 2, 1 );\n\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 3, 1 );\n\n\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\n\n\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 0, 4, type, false, 64, 0 );\n\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 1, 4, type, false, 64, 16 );\n\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 2, 4, type, false, 64, 32 );\n\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 3, 4, type, false, 64, 48 );\n\n\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\tswitch ( value.length ) {\n\n\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.disableUnusedAttributes();\n\n\t}\n\n\t// Compile\n\n\tthis.compile = function ( scene, camera ) {\n\n\t\tcurrentRenderState = renderStates.get( scene, camera );\n\t\tcurrentRenderState.init();\n\n\t\tscene.traverse( function ( object ) {\n\n\t\t\tif ( object.isLight ) {\n\n\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t\tcurrentRenderState.setupLights( camera );\n\n\t\tvar compiled = {};\n\n\t\tscene.traverse( function ( object ) {\n\n\t\t\tif ( object.material ) {\n\n\t\t\t\tif ( Array.isArray( object.material ) ) {\n\n\t\t\t\t\tfor ( var i = 0; i < object.material.length; i ++ ) {\n\n\t\t\t\t\t\tif ( object.material[ i ].uuid in compiled === false ) {\n\n\t\t\t\t\t\t\tinitMaterial( object.material[ i ], scene, object );\n\t\t\t\t\t\t\tcompiled[ object.material[ i ].uuid ] = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.material.uuid in compiled === false ) {\n\n\t\t\t\t\tinitMaterial( object.material, scene, object );\n\t\t\t\t\tcompiled[ object.material.uuid ] = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t};\n\n\t// Animation Loop\n\n\tvar onAnimationFrameCallback = null;\n\n\tfunction onAnimationFrame( time ) {\n\n\t\tif ( xr.isPresenting ) return;\n\t\tif ( onAnimationFrameCallback ) onAnimationFrameCallback( time );\n\n\t}\n\n\tvar animation = new WebGLAnimation();\n\tanimation.setAnimationLoop( onAnimationFrame );\n\n\tif ( typeof window !== 'undefined' ) animation.setContext( window );\n\n\tthis.setAnimationLoop = function ( callback ) {\n\n\t\tonAnimationFrameCallback = callback;\n\t\txr.setAnimationLoop( callback );\n\n\t\tanimation.start();\n\n\t};\n\n\t// Rendering\n\n\tthis.render = function ( scene, camera ) {\n\n\t\tvar renderTarget, forceClear;\n\n\t\tif ( arguments[ 2 ] !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.' );\n\t\t\trenderTarget = arguments[ 2 ];\n\n\t\t}\n\n\t\tif ( arguments[ 3 ] !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.' );\n\t\t\tforceClear = arguments[ 3 ];\n\n\t\t}\n\n\t\tif ( ! ( camera && camera.isCamera ) ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( _isContextLost ) return;\n\n\t\t// reset caching for this frame\n\n\t\t_currentGeometryProgram.geometry = null;\n\t\t_currentGeometryProgram.program = null;\n\t\t_currentGeometryProgram.wireframe = false;\n\t\t_currentMaterialId = - 1;\n\t\t_currentCamera = null;\n\n\t\t// update scene graph\n\n\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\n\t\t// update camera matrices and frustum\n\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\tif ( xr.enabled && xr.isPresenting ) {\n\n\t\t\tcamera = xr.getCamera( camera );\n\n\t\t}\n\n\t\t//\n\n\t\tcurrentRenderState = renderStates.get( scene, camera );\n\t\tcurrentRenderState.init();\n\n\t\tscene.onBeforeRender( _this, scene, camera, renderTarget || _currentRenderTarget );\n\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t_frustum.setFromProjectionMatrix( _projScreenMatrix );\n\n\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n\t\tcurrentRenderList = renderLists.get( scene, camera );\n\t\tcurrentRenderList.init();\n\n\t\tprojectObject( scene, camera, 0, _this.sortObjects );\n\n\t\tcurrentRenderList.finish();\n\n\t\tif ( _this.sortObjects === true ) {\n\n\t\t\tcurrentRenderList.sort( _opaqueSort, _transparentSort );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( _clippingEnabled ) _clipping.beginShadows();\n\n\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\tshadowMap.render( shadowsArray, scene, camera );\n\n\t\tcurrentRenderState.setupLights( camera );\n\n\t\tif ( _clippingEnabled ) _clipping.endShadows();\n\n\t\t//\n\n\t\tif ( this.info.autoReset ) this.info.reset();\n\n\t\tif ( renderTarget !== undefined ) {\n\n\t\t\tthis.setRenderTarget( renderTarget );\n\n\t\t}\n\n\t\t//\n\n\t\tbackground.render( currentRenderList, scene, camera, forceClear );\n\n\t\t// render scene\n\n\t\tvar opaqueObjects = currentRenderList.opaque;\n\t\tvar transparentObjects = currentRenderList.transparent;\n\n\t\tif ( scene.overrideMaterial ) {\n\n\t\t\tvar overrideMaterial = scene.overrideMaterial;\n\n\t\t\tif ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera, overrideMaterial );\n\t\t\tif ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera, overrideMaterial );\n\n\t\t} else {\n\n\t\t\t// opaque pass (front-to-back order)\n\n\t\t\tif ( opaqueObjects.length ) renderObjects( opaqueObjects, scene, camera );\n\n\t\t\t// transparent pass (back-to-front order)\n\n\t\t\tif ( transparentObjects.length ) renderObjects( transparentObjects, scene, camera );\n\n\t\t}\n\n\t\t//\n\n\t\tscene.onAfterRender( _this, scene, camera );\n\n\t\t//\n\n\t\tif ( _currentRenderTarget !== null ) {\n\n\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\t\ttextures.updateRenderTargetMipmap( _currentRenderTarget );\n\n\t\t\t// resolve multisample renderbuffers to a single-sample texture if necessary\n\n\t\t\ttextures.updateMultisampleRenderTarget( _currentRenderTarget );\n\n\t\t}\n\n\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\tstate.buffers.depth.setTest( true );\n\t\tstate.buffers.depth.setMask( true );\n\t\tstate.buffers.color.setMask( true );\n\n\t\tstate.setPolygonOffset( false );\n\n\t\t// _gl.finish();\n\n\t\tcurrentRenderList = null;\n\t\tcurrentRenderState = null;\n\n\t};\n\n\tfunction projectObject( object, camera, groupOrder, sortObjects ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tvar visible = object.layers.test( camera.layers );\n\n\t\tif ( visible ) {\n\n\t\t\tif ( object.isGroup ) {\n\n\t\t\t\tgroupOrder = object.renderOrder;\n\n\t\t\t} else if ( object.isLOD ) {\n\n\t\t\t\tif ( object.autoUpdate === true ) object.update( camera );\n\n\t\t\t} else if ( object.isLight ) {\n\n\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\n\n\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar geometry = objects.update( object );\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif ( material.visible ) {\n\n\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isImmediateRenderObject ) {\n\n\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t}\n\n\t\t\t\tcurrentRenderList.push( object, null, object.material, groupOrder, _vector3.z, null );\n\n\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\t\t// update skeleton only once in a frame\n\n\t\t\t\t\tif ( object.skeleton.frame !== info.render.frame ) {\n\n\t\t\t\t\t\tobject.skeleton.update();\n\t\t\t\t\t\tobject.skeleton.frame = info.render.frame;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\n\n\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar geometry = objects.update( object );\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tvar group = groups[ i ];\n\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar children = object.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tprojectObject( children[ i ], camera, groupOrder, sortObjects );\n\n\t\t}\n\n\t}\n\n\tfunction renderObjects( renderList, scene, camera, overrideMaterial ) {\n\n\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\tvar renderItem = renderList[ i ];\n\n\t\t\tvar object = renderItem.object;\n\t\t\tvar geometry = renderItem.geometry;\n\t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n\t\t\tvar group = renderItem.group;\n\n\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\t_currentArrayCamera = camera;\n\n\t\t\t\tvar cameras = camera.cameras;\n\n\t\t\t\tfor ( var j = 0, jl = cameras.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar camera2 = cameras[ j ];\n\n\t\t\t\t\tif ( object.layers.test( camera2.layers ) ) {\n\n\t\t\t\t\t\tstate.viewport( _currentViewport.copy( camera2.viewport ) );\n\n\t\t\t\t\t\tcurrentRenderState.setupLights( camera2 );\n\n\t\t\t\t\t\trenderObject( object, scene, camera2, geometry, material, group );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_currentArrayCamera = null;\n\n\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction renderObject( object, scene, camera, geometry, material, group ) {\n\n\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\n\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\n\n\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\tif ( object.isImmediateRenderObject ) {\n\n\t\t\tvar program = setProgram( camera, scene, material, object );\n\n\t\t\tstate.setMaterial( material );\n\n\t\t\t_currentGeometryProgram.geometry = null;\n\t\t\t_currentGeometryProgram.program = null;\n\t\t\t_currentGeometryProgram.wireframe = false;\n\n\t\t\trenderObjectImmediate( object, program );\n\n\t\t} else {\n\n\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t}\n\n\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\n\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\n\n\t}\n\n\tfunction initMaterial( material, scene, object ) {\n\n\t\tvar materialProperties = properties.get( material );\n\n\t\tvar lights = currentRenderState.state.lights;\n\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\tvar lightsStateVersion = lights.state.version;\n\n\t\tvar parameters = programCache.getParameters( material, lights.state, shadowsArray, scene, _clipping.numPlanes, _clipping.numIntersection, object );\n\t\tvar programCacheKey = programCache.getProgramCacheKey( parameters );\n\n\t\tvar program = materialProperties.program;\n\t\tvar programChange = true;\n\n\t\tif ( program === undefined ) {\n\n\t\t\t// new material\n\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t} else if ( program.cacheKey !== programCacheKey ) {\n\n\t\t\t// changed glsl or parameters\n\t\t\treleaseMaterialProgramReference( material );\n\n\t\t} else if ( materialProperties.lightsStateVersion !== lightsStateVersion ) {\n\n\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\tprogramChange = false;\n\n\t\t} else if ( parameters.shaderID !== undefined ) {\n\n\t\t\t// same glsl and uniform list\n\t\t\treturn;\n\n\t\t} else {\n\n\t\t\t// only rebuild uniform list\n\t\t\tprogramChange = false;\n\n\t\t}\n\n\t\tif ( programChange ) {\n\n\t\t\tprogram = programCache.acquireProgram( parameters, programCacheKey );\n\n\t\t\tmaterialProperties.program = program;\n\t\t\tmaterialProperties.uniforms = parameters.uniforms;\n\t\t\tmaterialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tmaterialProperties.outputEncoding = _this.outputEncoding;\n\t\t\tmaterial.program = program;\n\n\t\t}\n\n\t\tvar programAttributes = program.getAttributes();\n\n\t\tif ( material.morphTargets ) {\n\n\t\t\tmaterial.numSupportedMorphTargets = 0;\n\n\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\n\n\t\t\t\tif ( programAttributes[ 'morphTarget' + i ] >= 0 ) {\n\n\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.morphNormals ) {\n\n\t\t\tmaterial.numSupportedMorphNormals = 0;\n\n\t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\n\n\t\t\t\tif ( programAttributes[ 'morphNormal' + i ] >= 0 ) {\n\n\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar uniforms = materialProperties.uniforms;\n\n\t\tif ( ! material.isShaderMaterial &&\n\t\t\t! material.isRawShaderMaterial ||\n\t\t\tmaterial.clipping === true ) {\n\n\t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\n\t\t\tmaterialProperties.numIntersection = _clipping.numIntersection;\n\t\t\tuniforms.clippingPlanes = _clipping.uniform;\n\n\t\t}\n\n\t\tmaterialProperties.fog = scene.fog;\n\n\t\t// store the light setup it was created for\n\n\t\tmaterialProperties.needsLights = materialNeedsLights( material );\n\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t// wire up the material to this renderer's lighting state\n\n\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\tuniforms.lightProbe.value = lights.state.probe;\n\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\tuniforms.directionalLightShadows.value = lights.state.directionalShadow;\n\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\tuniforms.spotLightShadows.value = lights.state.spotShadow;\n\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\tuniforms.pointLightShadows.value = lights.state.pointShadow;\n\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\n\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\n\t\t\t// TODO (abelnation): add area lights shadow info to uniforms\n\n\t\t}\n\n\t\tvar progUniforms = materialProperties.program.getUniforms(),\n\t\t\tuniformsList =\n\t\t\t\tWebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n\t\tmaterialProperties.uniformsList = uniformsList;\n\n\t}\n\n\tfunction setProgram( camera, scene, material, object ) {\n\n\t\ttextures.resetTextureUnits();\n\n\t\tvar fog = scene.fog;\n\t\tvar environment = material.isMeshStandardMaterial ? scene.environment : null;\n\n\t\tvar materialProperties = properties.get( material );\n\t\tvar lights = currentRenderState.state.lights;\n\n\t\tif ( _clippingEnabled ) {\n\n\t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\n\n\t\t\t\tvar useCache =\n\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t// (#8465, #8379)\n\t\t\t\t_clipping.setState(\n\t\t\t\t\tmaterial.clippingPlanes, material.clipIntersection, material.clipShadows,\n\t\t\t\t\tcamera, materialProperties, useCache );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.version === materialProperties.__version ) {\n\n\t\t\tif ( materialProperties.program === undefined ) {\n\n\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\n\n\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t} else if ( materialProperties.environment !== environment ) {\n\n\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t} else if ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {\n\n\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\t( materialProperties.numClippingPlanes !== _clipping.numPlanes ||\n\t\t\t\tmaterialProperties.numIntersection !== _clipping.numIntersection ) ) {\n\n\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t} else if ( materialProperties.outputEncoding !== _this.outputEncoding ) {\n\n\t\t\t\tinitMaterial( material, scene, object );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tinitMaterial( material, scene, object );\n\t\t\tmaterialProperties.__version = material.version;\n\n\t\t}\n\n\t\tvar refreshProgram = false;\n\t\tvar refreshMaterial = false;\n\t\tvar refreshLights = false;\n\n\t\tvar program = materialProperties.program,\n\t\t\tp_uniforms = program.getUniforms(),\n\t\t\tm_uniforms = materialProperties.uniforms;\n\n\t\tif ( state.useProgram( program.program ) ) {\n\n\t\t\trefreshProgram = true;\n\t\t\trefreshMaterial = true;\n\t\t\trefreshLights = true;\n\n\t\t}\n\n\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\t_currentMaterialId = material.id;\n\n\t\t\trefreshMaterial = true;\n\n\t\t}\n\n\t\tif ( refreshProgram || _currentCamera !== camera ) {\n\n\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\n\n\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t}\n\n\t\t\tif ( _currentCamera !== camera ) {\n\n\t\t\t\t_currentCamera = camera;\n\n\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n\t\t\t}\n\n\t\t\t// load material specific uniforms\n\t\t\t// (shader material also gets them for the sake of genericity)\n\n\t\t\tif ( material.isShaderMaterial ||\n\t\t\t\tmaterial.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\tmaterial.envMap ) {\n\n\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\tif ( uCamPos !== undefined ) {\n\n\t\t\t\t\tuCamPos.setValue( _gl,\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\tmaterial.isShaderMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );\n\n\t\t\t}\n\n\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\tmaterial.isShaderMaterial ||\n\t\t\t\tmaterial.skinning ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// skinning uniforms must be set even if material didn't change\n\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t// otherwise textures used for skinning can take over texture units reserved for other material textures\n\n\t\tif ( material.skinning ) {\n\n\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n\t\t\tvar skeleton = object.skeleton;\n\n\t\t\tif ( skeleton ) {\n\n\t\t\t\tvar bones = skeleton.bones;\n\n\t\t\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\t\t\tif ( skeleton.boneTexture === undefined ) {\n\n\t\t\t\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t\t\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t\t\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t\t\t\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t\t\t\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t\t\t\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\n\t\t\t\t\t\tvar size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\t\t\t\t\tsize = MathUtils.ceilPowerOfTwo( size );\n\t\t\t\t\t\tsize = Math.max( size, 4 );\n\n\t\t\t\t\t\tvar boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\n\t\t\t\t\t\tboneMatrices.set( skeleton.boneMatrices ); // copy current values\n\n\t\t\t\t\t\tvar boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\n\n\t\t\t\t\t\tskeleton.boneMatrices = boneMatrices;\n\t\t\t\t\t\tskeleton.boneTexture = boneTexture;\n\t\t\t\t\t\tskeleton.boneTextureSize = size;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );\n\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {\n\n\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\n\t\t\tp_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );\n\n\t\t}\n\n\t\tif ( refreshMaterial ) {\n\n\t\t\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\n\t\t\tp_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );\n\n\t\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t\t// the current material requires lighting info\n\n\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t// values\n\t\t\t\t//\n\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t// the GL state when required\n\n\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n\t\t\t}\n\n\t\t\t// refresh uniforms common to several materials\n\n\t\t\tif ( fog && material.fog ) {\n\n\t\t\t\trefreshUniformsFog( m_uniforms, fog );\n\n\t\t\t}\n\n\t\t\tif ( material.isMeshBasicMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\n\t\t\t} else if ( material.isMeshLambertMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\trefreshUniformsLambert( m_uniforms, material );\n\n\t\t\t} else if ( material.isMeshToonMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\trefreshUniformsToon( m_uniforms, material );\n\n\t\t\t} else if ( material.isMeshPhongMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\trefreshUniformsPhong( m_uniforms, material );\n\n\t\t\t} else if ( material.isMeshStandardMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material, environment );\n\n\t\t\t\tif ( material.isMeshPhysicalMaterial ) {\n\n\t\t\t\t\trefreshUniformsPhysical( m_uniforms, material, environment );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trefreshUniformsStandard( m_uniforms, material, environment );\n\n\t\t\t\t}\n\n\t\t\t} else if ( material.isMeshMatcapMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\trefreshUniformsMatcap( m_uniforms, material );\n\n\t\t\t} else if ( material.isMeshDepthMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\trefreshUniformsDepth( m_uniforms, material );\n\n\t\t\t} else if ( material.isMeshDistanceMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\trefreshUniformsDistance( m_uniforms, material );\n\n\t\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\n\t\t\t\trefreshUniformsNormal( m_uniforms, material );\n\n\t\t\t} else if ( material.isLineBasicMaterial ) {\n\n\t\t\t\trefreshUniformsLine( m_uniforms, material );\n\n\t\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\t\trefreshUniformsDash( m_uniforms, material );\n\n\t\t\t\t}\n\n\t\t\t} else if ( material.isPointsMaterial ) {\n\n\t\t\t\trefreshUniformsPoints( m_uniforms, material );\n\n\t\t\t} else if ( material.isSpriteMaterial ) {\n\n\t\t\t\trefreshUniformsSprites( m_uniforms, material );\n\n\t\t\t} else if ( material.isShadowMaterial ) {\n\n\t\t\t\tm_uniforms.color.value.copy( material.color );\n\t\t\t\tm_uniforms.opacity.value = material.opacity;\n\n\t\t\t}\n\n\t\t\t// RectAreaLight Texture\n\t\t\t// TODO (mrdoob): Find a nicer implementation\n\n\t\t\tif ( m_uniforms.ltc_1 !== undefined ) m_uniforms.ltc_1.value = UniformsLib.LTC_1;\n\t\t\tif ( m_uniforms.ltc_2 !== undefined ) m_uniforms.ltc_2.value = UniformsLib.LTC_2;\n\n\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\n\t\t\tif ( material.isShaderMaterial ) {\n\n\t\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {\n\n\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\t\t\tmaterial.uniformsNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( material.isSpriteMaterial ) {\n\n\t\t\tp_uniforms.setValue( _gl, 'center', object.center );\n\n\t\t}\n\n\t\t// common matrices\n\n\t\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\n\t\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\n\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\t\treturn program;\n\n\t}\n\n\t// Uniforms (refresh uniforms objects)\n\n\tfunction refreshUniformsCommon( uniforms, material, environment ) {\n\n\t\tuniforms.opacity.value = material.opacity;\n\n\t\tif ( material.color ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\n\t\t}\n\n\t\tif ( material.emissive ) {\n\n\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t}\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t}\n\n\t\tif ( material.specularMap ) {\n\n\t\t\tuniforms.specularMap.value = material.specularMap;\n\n\t\t}\n\n\t\tvar envMap = material.envMap || environment;\n\n\t\tif ( envMap ) {\n\n\t\t\tuniforms.envMap.value = envMap;\n\n\t\t\tuniforms.flipEnvMap.value = envMap.isCubeTexture ? - 1 : 1;\n\n\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\tuniforms.maxMipLevel.value = properties.get( envMap ).__maxMipLevel;\n\n\t\t}\n\n\t\tif ( material.lightMap ) {\n\n\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t}\n\n\t\tif ( material.aoMap ) {\n\n\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t// 1. color map\n\t\t// 2. specular map\n\t\t// 3. normal map\n\t\t// 4. bump map\n\t\t// 5. alpha map\n\t\t// 6. emissive map\n\n\t\tvar uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.specularMap ) {\n\n\t\t\tuvScaleMap = material.specularMap;\n\n\t\t} else if ( material.displacementMap ) {\n\n\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t} else if ( material.normalMap ) {\n\n\t\t\tuvScaleMap = material.normalMap;\n\n\t\t} else if ( material.bumpMap ) {\n\n\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t} else if ( material.roughnessMap ) {\n\n\t\t\tuvScaleMap = material.roughnessMap;\n\n\t\t} else if ( material.metalnessMap ) {\n\n\t\t\tuvScaleMap = material.metalnessMap;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t} else if ( material.emissiveMap ) {\n\n\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t// backwards compatibility\n\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities for uv2\n\t\t// 1. ao map\n\t\t// 2. light map\n\n\t\tvar uv2ScaleMap;\n\n\t\tif ( material.aoMap ) {\n\n\t\t\tuv2ScaleMap = material.aoMap;\n\n\t\t} else if ( material.lightMap ) {\n\n\t\t\tuv2ScaleMap = material.lightMap;\n\n\t\t}\n\n\t\tif ( uv2ScaleMap !== undefined ) {\n\n\t\t\t// backwards compatibility\n\t\t\tif ( uv2ScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\tuv2ScaleMap = uv2ScaleMap.texture;\n\n\t\t\t}\n\n\t\t\tif ( uv2ScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuv2ScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uv2Transform.value.copy( uv2ScaleMap.matrix );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsLine( uniforms, material ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\n\t}\n\n\tfunction refreshUniformsDash( uniforms, material ) {\n\n\t\tuniforms.dashSize.value = material.dashSize;\n\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\tuniforms.scale.value = material.scale;\n\n\t}\n\n\tfunction refreshUniformsPoints( uniforms, material ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.size.value = material.size * _pixelRatio;\n\t\tuniforms.scale.value = _height * 0.5;\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t// 1. color map\n\t\t// 2. alpha map\n\n\t\tvar uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsSprites( uniforms, material ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.rotation.value = material.rotation;\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t// 1. color map\n\t\t// 2. alpha map\n\n\t\tvar uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsFog( uniforms, fog ) {\n\n\t\tuniforms.fogColor.value.copy( fog.color );\n\n\t\tif ( fog.isFog ) {\n\n\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsLambert( uniforms, material ) {\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhong( uniforms, material ) {\n\n\t\tuniforms.specular.value.copy( material.specular );\n\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsToon( uniforms, material ) {\n\n\t\tuniforms.specular.value.copy( material.specular );\n\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\tif ( material.gradientMap ) {\n\n\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\n\t\t}\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsStandard( uniforms, material, environment ) {\n\n\t\tuniforms.roughness.value = material.roughness;\n\t\tuniforms.metalness.value = material.metalness;\n\n\t\tif ( material.roughnessMap ) {\n\n\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t}\n\n\t\tif ( material.metalnessMap ) {\n\n\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t}\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t\tif ( material.envMap || environment ) {\n\n\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhysical( uniforms, material, environment ) {\n\n\t\trefreshUniformsStandard( uniforms, material, environment );\n\n\t\tuniforms.reflectivity.value = material.reflectivity; // also part of uniforms common\n\n\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\t\tif ( material.sheen ) uniforms.sheen.value.copy( material.sheen );\n\n\t\tif ( material.clearcoatMap ) {\n\n\t\t\tuniforms.clearcoatMap.value = material.clearcoatMap;\n\n\t\t}\n\n\t\tif ( material.clearcoatRoughnessMap ) {\n\n\t\t\tuniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n\n\t\t}\n\n\t\tif ( material.clearcoatNormalMap ) {\n\n\t\t\tuniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );\n\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\n\t\t\t}\n\n\t\t}\n\n\t\tuniforms.transparency.value = material.transparency;\n\n\t}\n\n\tfunction refreshUniformsMatcap( uniforms, material ) {\n\n\t\tif ( material.matcap ) {\n\n\t\t\tuniforms.matcap.value = material.matcap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsDepth( uniforms, material ) {\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsDistance( uniforms, material ) {\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t\tuniforms.referencePosition.value.copy( material.referencePosition );\n\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\tuniforms.farDistance.value = material.farDistance;\n\n\t}\n\n\tfunction refreshUniformsNormal( uniforms, material ) {\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\n\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\tuniforms.lightProbe.needsUpdate = value;\n\n\t\tuniforms.directionalLights.needsUpdate = value;\n\t\tuniforms.directionalLightShadows.needsUpdate = value;\n\t\tuniforms.pointLights.needsUpdate = value;\n\t\tuniforms.pointLightShadows.needsUpdate = value;\n\t\tuniforms.spotLights.needsUpdate = value;\n\t\tuniforms.spotLightShadows.needsUpdate = value;\n\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\tuniforms.hemisphereLights.needsUpdate = value;\n\n\t}\n\n\tfunction materialNeedsLights( material ) {\n\n\t\treturn material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial ||\n\t\t\tmaterial.isMeshStandardMaterial || material.isShadowMaterial ||\n\t\t\t( material.isShaderMaterial && material.lights === true );\n\n\t}\n\n\t//\n\tthis.setFramebuffer = function ( value ) {\n\n\t\tif ( _framebuffer !== value && _currentRenderTarget === null ) _gl.bindFramebuffer( _gl.FRAMEBUFFER, value );\n\n\t\t_framebuffer = value;\n\n\t};\n\n\tthis.getActiveCubeFace = function () {\n\n\t\treturn _currentActiveCubeFace;\n\n\t};\n\n\tthis.getActiveMipmapLevel = function () {\n\n\t\treturn _currentActiveMipmapLevel;\n\n\t};\n\n\tthis.getRenderTarget = function () {\n\n\t\treturn _currentRenderTarget;\n\n\t};\n\n\tthis.setRenderTarget = function ( renderTarget, activeCubeFace, activeMipmapLevel ) {\n\n\t\t_currentRenderTarget = renderTarget;\n\t\t_currentActiveCubeFace = activeCubeFace;\n\t\t_currentActiveMipmapLevel = activeMipmapLevel;\n\n\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\n\n\t\t\ttextures.setupRenderTarget( renderTarget );\n\n\t\t}\n\n\t\tvar framebuffer = _framebuffer;\n\t\tvar isCube = false;\n\n\t\tif ( renderTarget ) {\n\n\t\t\tvar __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\t\tframebuffer = __webglFramebuffer[ activeCubeFace || 0 ];\n\t\t\t\tisCube = true;\n\n\t\t\t} else if ( renderTarget.isWebGLMultisampleRenderTarget ) {\n\n\t\t\t\tframebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;\n\n\t\t\t} else {\n\n\t\t\t\tframebuffer = __webglFramebuffer;\n\n\t\t\t}\n\n\t\t\t_currentViewport.copy( renderTarget.viewport );\n\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n\t\t} else {\n\n\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t_currentScissorTest = _scissorTest;\n\n\t\t}\n\n\t\tif ( _currentFramebuffer !== framebuffer ) {\n\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\t\t\t_currentFramebuffer = framebuffer;\n\n\t\t}\n\n\t\tstate.viewport( _currentViewport );\n\t\tstate.scissor( _currentScissor );\n\t\tstate.setScissorTest( _currentScissorTest );\n\n\t\tif ( isCube ) {\n\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + ( activeCubeFace || 0 ), textureProperties.__webglTexture, activeMipmapLevel || 0 );\n\n\t\t}\n\n\t};\n\n\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {\n\n\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\tif ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {\n\n\t\t\tframebuffer = framebuffer[ activeCubeFaceIndex ];\n\n\t\t}\n\n\t\tif ( framebuffer ) {\n\n\t\t\tvar restore = false;\n\n\t\t\tif ( framebuffer !== _currentFramebuffer ) {\n\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\t\t\trestore = true;\n\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\tvar texture = renderTarget.texture;\n\t\t\t\tvar textureFormat = texture.format;\n\t\t\t\tvar textureType = texture.type;\n\n\t\t\t\tif ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // IE11, Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t! ( textureType === HalfFloatType && ( capabilities.isWebGL2 ? extensions.get( 'EXT_color_buffer_float' ) : extensions.get( 'EXT_color_buffer_half_float' ) ) ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {\n\n\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\n\t\t\t\t}\n\n\t\t\t} finally {\n\n\t\t\t\tif ( restore ) {\n\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tthis.copyFramebufferToTexture = function ( position, texture, level ) {\n\n\t\tif ( level === undefined ) level = 0;\n\n\t\tvar levelScale = Math.pow( 2, - level );\n\t\tvar width = Math.floor( texture.image.width * levelScale );\n\t\tvar height = Math.floor( texture.image.height * levelScale );\n\t\tvar glFormat = utils.convert( texture.format );\n\n\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t_gl.copyTexImage2D( _gl.TEXTURE_2D, level, glFormat, position.x, position.y, width, height, 0 );\n\n\t\tstate.unbindTexture();\n\n\t};\n\n\tthis.copyTextureToTexture = function ( position, srcTexture, dstTexture, level ) {\n\n\t\tvar width = srcTexture.image.width;\n\t\tvar height = srcTexture.image.height;\n\t\tvar glFormat = utils.convert( dstTexture.format );\n\t\tvar glType = utils.convert( dstTexture.type );\n\n\t\ttextures.setTexture2D( dstTexture, 0 );\n\n\t\tif ( srcTexture.isDataTexture ) {\n\n\t\t\t_gl.texSubImage2D( _gl.TEXTURE_2D, level || 0, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );\n\n\t\t} else {\n\n\t\t\t_gl.texSubImage2D( _gl.TEXTURE_2D, level || 0, position.x, position.y, glFormat, glType, srcTexture.image );\n\n\t\t}\n\n\t\tstate.unbindTexture();\n\n\t};\n\n\tthis.initTexture = function ( texture ) {\n\n\t\ttextures.setTexture2D( texture, 0 );\n\n\t\tstate.unbindTexture();\n\n\t};\n\n\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\n\n\t}\n\n}\n\nexport { WebGLRenderer };\n"]},"metadata":{},"sourceType":"module"}