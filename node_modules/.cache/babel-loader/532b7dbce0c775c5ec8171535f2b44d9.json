{"ast":null,"code":"/**\n * @author alteredq / http://alteredqualia.com/\n */\nimport { AdditiveBlending, LinearFilter, RGBAFormat, ShaderMaterial, UniformsUtils, Vector2, WebGLRenderTarget } from \"../../../build/three.module.js\";\nimport { Pass } from \"../postprocessing/Pass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { ConvolutionShader } from \"../shaders/ConvolutionShader.js\";\n\nvar BloomPass = function (strength, kernelSize, sigma, resolution) {\n  Pass.call(this);\n  strength = strength !== undefined ? strength : 1;\n  kernelSize = kernelSize !== undefined ? kernelSize : 25;\n  sigma = sigma !== undefined ? sigma : 4.0;\n  resolution = resolution !== undefined ? resolution : 256; // render targets\n\n  var pars = {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat\n  };\n  this.renderTargetX = new WebGLRenderTarget(resolution, resolution, pars);\n  this.renderTargetX.texture.name = \"BloomPass.x\";\n  this.renderTargetY = new WebGLRenderTarget(resolution, resolution, pars);\n  this.renderTargetY.texture.name = \"BloomPass.y\"; // copy material\n\n  if (CopyShader === undefined) console.error(\"BloomPass relies on CopyShader\");\n  var copyShader = CopyShader;\n  this.copyUniforms = UniformsUtils.clone(copyShader.uniforms);\n  this.copyUniforms[\"opacity\"].value = strength;\n  this.materialCopy = new ShaderMaterial({\n    uniforms: this.copyUniforms,\n    vertexShader: copyShader.vertexShader,\n    fragmentShader: copyShader.fragmentShader,\n    blending: AdditiveBlending,\n    transparent: true\n  }); // convolution material\n\n  if (ConvolutionShader === undefined) console.error(\"BloomPass relies on ConvolutionShader\");\n  var convolutionShader = ConvolutionShader;\n  this.convolutionUniforms = UniformsUtils.clone(convolutionShader.uniforms);\n  this.convolutionUniforms[\"uImageIncrement\"].value = BloomPass.blurX;\n  this.convolutionUniforms[\"cKernel\"].value = ConvolutionShader.buildKernel(sigma);\n  this.materialConvolution = new ShaderMaterial({\n    uniforms: this.convolutionUniforms,\n    vertexShader: convolutionShader.vertexShader,\n    fragmentShader: convolutionShader.fragmentShader,\n    defines: {\n      \"KERNEL_SIZE_FLOAT\": kernelSize.toFixed(1),\n      \"KERNEL_SIZE_INT\": kernelSize.toFixed(0)\n    }\n  });\n  this.needsSwap = false;\n  this.fsQuad = new Pass.FullScreenQuad(null);\n};\n\nBloomPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: BloomPass,\n  render: function (renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    if (maskActive) renderer.state.buffers.stencil.setTest(false); // Render quad with blured scene into texture (convolution pass 1)\n\n    this.fsQuad.material = this.materialConvolution;\n    this.convolutionUniforms[\"tDiffuse\"].value = readBuffer.texture;\n    this.convolutionUniforms[\"uImageIncrement\"].value = BloomPass.blurX;\n    renderer.setRenderTarget(this.renderTargetX);\n    renderer.clear();\n    this.fsQuad.render(renderer); // Render quad with blured scene into texture (convolution pass 2)\n\n    this.convolutionUniforms[\"tDiffuse\"].value = this.renderTargetX.texture;\n    this.convolutionUniforms[\"uImageIncrement\"].value = BloomPass.blurY;\n    renderer.setRenderTarget(this.renderTargetY);\n    renderer.clear();\n    this.fsQuad.render(renderer); // Render original scene with superimposed blur to texture\n\n    this.fsQuad.material = this.materialCopy;\n    this.copyUniforms[\"tDiffuse\"].value = this.renderTargetY.texture;\n    if (maskActive) renderer.state.buffers.stencil.setTest(true);\n    renderer.setRenderTarget(readBuffer);\n    if (this.clear) renderer.clear();\n    this.fsQuad.render(renderer);\n  }\n});\nBloomPass.blurX = new Vector2(0.001953125, 0.0);\nBloomPass.blurY = new Vector2(0.0, 0.001953125);\nexport { BloomPass };","map":{"version":3,"sources":["H:/chrlab/src/component/panelComponent/Canvas/threejs/examples/jsm/postprocessing/BloomPass.js"],"names":["AdditiveBlending","LinearFilter","RGBAFormat","ShaderMaterial","UniformsUtils","Vector2","WebGLRenderTarget","Pass","CopyShader","ConvolutionShader","BloomPass","strength","kernelSize","sigma","resolution","call","undefined","pars","minFilter","magFilter","format","renderTargetX","texture","name","renderTargetY","console","error","copyShader","copyUniforms","clone","uniforms","value","materialCopy","vertexShader","fragmentShader","blending","transparent","convolutionShader","convolutionUniforms","blurX","buildKernel","materialConvolution","defines","toFixed","needsSwap","fsQuad","FullScreenQuad","prototype","Object","assign","create","constructor","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","state","buffers","stencil","setTest","material","setRenderTarget","clear","blurY"],"mappings":"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","sourcesContent":["/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nimport {\n\tAdditiveBlending,\n\tLinearFilter,\n\tRGBAFormat,\n\tShaderMaterial,\n\tUniformsUtils,\n\tVector2,\n\tWebGLRenderTarget\n} from \"../../../build/three.module.js\";\nimport { Pass } from \"../postprocessing/Pass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { ConvolutionShader } from \"../shaders/ConvolutionShader.js\";\n\nvar BloomPass = function ( strength, kernelSize, sigma, resolution ) {\n\n\tPass.call( this );\n\n\tstrength = ( strength !== undefined ) ? strength : 1;\n\tkernelSize = ( kernelSize !== undefined ) ? kernelSize : 25;\n\tsigma = ( sigma !== undefined ) ? sigma : 4.0;\n\tresolution = ( resolution !== undefined ) ? resolution : 256;\n\n\t// render targets\n\n\tvar pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\n\n\tthis.renderTargetX = new WebGLRenderTarget( resolution, resolution, pars );\n\tthis.renderTargetX.texture.name = \"BloomPass.x\";\n\tthis.renderTargetY = new WebGLRenderTarget( resolution, resolution, pars );\n\tthis.renderTargetY.texture.name = \"BloomPass.y\";\n\n\t// copy material\n\n\tif ( CopyShader === undefined )\n\t\tconsole.error( \"BloomPass relies on CopyShader\" );\n\n\tvar copyShader = CopyShader;\n\n\tthis.copyUniforms = UniformsUtils.clone( copyShader.uniforms );\n\n\tthis.copyUniforms[ \"opacity\" ].value = strength;\n\n\tthis.materialCopy = new ShaderMaterial( {\n\n\t\tuniforms: this.copyUniforms,\n\t\tvertexShader: copyShader.vertexShader,\n\t\tfragmentShader: copyShader.fragmentShader,\n\t\tblending: AdditiveBlending,\n\t\ttransparent: true\n\n\t} );\n\n\t// convolution material\n\n\tif ( ConvolutionShader === undefined )\n\t\tconsole.error( \"BloomPass relies on ConvolutionShader\" );\n\n\tvar convolutionShader = ConvolutionShader;\n\n\tthis.convolutionUniforms = UniformsUtils.clone( convolutionShader.uniforms );\n\n\tthis.convolutionUniforms[ \"uImageIncrement\" ].value = BloomPass.blurX;\n\tthis.convolutionUniforms[ \"cKernel\" ].value = ConvolutionShader.buildKernel( sigma );\n\n\tthis.materialConvolution = new ShaderMaterial( {\n\n\t\tuniforms: this.convolutionUniforms,\n\t\tvertexShader: convolutionShader.vertexShader,\n\t\tfragmentShader: convolutionShader.fragmentShader,\n\t\tdefines: {\n\t\t\t\"KERNEL_SIZE_FLOAT\": kernelSize.toFixed( 1 ),\n\t\t\t\"KERNEL_SIZE_INT\": kernelSize.toFixed( 0 )\n\t\t}\n\n\t} );\n\n\tthis.needsSwap = false;\n\n\tthis.fsQuad = new Pass.FullScreenQuad( null );\n\n};\n\nBloomPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: BloomPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\n\n\t\t// Render quad with blured scene into texture (convolution pass 1)\n\n\t\tthis.fsQuad.material = this.materialConvolution;\n\n\t\tthis.convolutionUniforms[ \"tDiffuse\" ].value = readBuffer.texture;\n\t\tthis.convolutionUniforms[ \"uImageIncrement\" ].value = BloomPass.blurX;\n\n\t\trenderer.setRenderTarget( this.renderTargetX );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\n\t\t// Render quad with blured scene into texture (convolution pass 2)\n\n\t\tthis.convolutionUniforms[ \"tDiffuse\" ].value = this.renderTargetX.texture;\n\t\tthis.convolutionUniforms[ \"uImageIncrement\" ].value = BloomPass.blurY;\n\n\t\trenderer.setRenderTarget( this.renderTargetY );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// Render original scene with superimposed blur to texture\n\n\t\tthis.fsQuad.material = this.materialCopy;\n\n\t\tthis.copyUniforms[ \"tDiffuse\" ].value = this.renderTargetY.texture;\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t}\n\n} );\n\nBloomPass.blurX = new Vector2( 0.001953125, 0.0 );\nBloomPass.blurY = new Vector2( 0.0, 0.001953125 );\n\nexport { BloomPass };\n"]},"metadata":{},"sourceType":"module"}