{"ast":null,"code":"import { Vector2 } from '../math/Vector2.js';\nimport { MeshStandardMaterial } from './MeshStandardMaterial.js';\nimport { Color } from '../math/Color.js';\n/**\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *  clearcoat: <float>,\n *  clearcoatMap: new THREE.Texture( <Image> ),\n *  clearcoatRoughness: <float>,\n *  clearcoatRoughnessMap: new THREE.Texture( <Image> ),\n *  clearcoatNormalScale: <Vector2>,\n *  clearcoatNormalMap: new THREE.Texture( <Image> ),\n *\n *  reflectivity: <float>,\n *\n *  sheen: <Color>,\n *\n *  transparency: <float>\n * }\n */\n\nfunction MeshPhysicalMaterial(parameters) {\n  MeshStandardMaterial.call(this);\n  this.defines = {\n    'STANDARD': '',\n    'PHYSICAL': ''\n  };\n  this.type = 'MeshPhysicalMaterial';\n  this.clearcoat = 0.0;\n  this.clearcoatMap = null;\n  this.clearcoatRoughness = 0.0;\n  this.clearcoatRoughnessMap = null;\n  this.clearcoatNormalScale = new Vector2(1, 1);\n  this.clearcoatNormalMap = null;\n  this.reflectivity = 0.5; // maps to F0 = 0.04\n\n  this.sheen = null; // null will disable sheen bsdf\n\n  this.transparency = 0.0;\n  this.setValues(parameters);\n}\n\nMeshPhysicalMaterial.prototype = Object.create(MeshStandardMaterial.prototype);\nMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\nMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\nMeshPhysicalMaterial.prototype.copy = function (source) {\n  MeshStandardMaterial.prototype.copy.call(this, source);\n  this.defines = {\n    'STANDARD': '',\n    'PHYSICAL': ''\n  };\n  this.clearcoat = source.clearcoat;\n  this.clearcoatMap = source.clearcoatMap;\n  this.clearcoatRoughness = source.clearcoatRoughness;\n  this.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n  this.clearcoatNormalMap = source.clearcoatNormalMap;\n  this.clearcoatNormalScale.copy(source.clearcoatNormalScale);\n  this.reflectivity = source.reflectivity;\n\n  if (source.sheen) {\n    this.sheen = (this.sheen || new Color()).copy(source.sheen);\n  } else {\n    this.sheen = null;\n  }\n\n  this.transparency = source.transparency;\n  return this;\n};\n\nexport { MeshPhysicalMaterial };","map":{"version":3,"sources":["D:/chrlab/src/component/panelComponent/Canvas/threejs/src/materials/MeshPhysicalMaterial.js"],"names":["Vector2","MeshStandardMaterial","Color","MeshPhysicalMaterial","parameters","call","defines","type","clearcoat","clearcoatMap","clearcoatRoughness","clearcoatRoughnessMap","clearcoatNormalScale","clearcoatNormalMap","reflectivity","sheen","transparency","setValues","prototype","Object","create","constructor","isMeshPhysicalMaterial","copy","source"],"mappings":"AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,oBAAT,QAAqC,2BAArC;AACA,SAASC,KAAT,QAAsB,kBAAtB;AAEA;;;;;;;;;;;;;;;;;;;AAmBA,SAASC,oBAAT,CAA+BC,UAA/B,EAA4C;AAE3CH,EAAAA,oBAAoB,CAACI,IAArB,CAA2B,IAA3B;AAEA,OAAKC,OAAL,GAAe;AAEd,gBAAY,EAFE;AAGd,gBAAY;AAHE,GAAf;AAOA,OAAKC,IAAL,GAAY,sBAAZ;AAEA,OAAKC,SAAL,GAAiB,GAAjB;AACA,OAAKC,YAAL,GAAoB,IAApB;AACA,OAAKC,kBAAL,GAA0B,GAA1B;AACA,OAAKC,qBAAL,GAA6B,IAA7B;AACA,OAAKC,oBAAL,GAA4B,IAAIZ,OAAJ,CAAa,CAAb,EAAgB,CAAhB,CAA5B;AACA,OAAKa,kBAAL,GAA0B,IAA1B;AAEA,OAAKC,YAAL,GAAoB,GAApB,CApB2C,CAoBlB;;AAEzB,OAAKC,KAAL,GAAa,IAAb,CAtB2C,CAsBxB;;AAEnB,OAAKC,YAAL,GAAoB,GAApB;AAEA,OAAKC,SAAL,CAAgBb,UAAhB;AAEA;;AAEDD,oBAAoB,CAACe,SAArB,GAAiCC,MAAM,CAACC,MAAP,CAAenB,oBAAoB,CAACiB,SAApC,CAAjC;AACAf,oBAAoB,CAACe,SAArB,CAA+BG,WAA/B,GAA6ClB,oBAA7C;AAEAA,oBAAoB,CAACe,SAArB,CAA+BI,sBAA/B,GAAwD,IAAxD;;AAEAnB,oBAAoB,CAACe,SAArB,CAA+BK,IAA/B,GAAsC,UAAWC,MAAX,EAAoB;AAEzDvB,EAAAA,oBAAoB,CAACiB,SAArB,CAA+BK,IAA/B,CAAoClB,IAApC,CAA0C,IAA1C,EAAgDmB,MAAhD;AAEA,OAAKlB,OAAL,GAAe;AAEd,gBAAY,EAFE;AAGd,gBAAY;AAHE,GAAf;AAOA,OAAKE,SAAL,GAAiBgB,MAAM,CAAChB,SAAxB;AACA,OAAKC,YAAL,GAAoBe,MAAM,CAACf,YAA3B;AACA,OAAKC,kBAAL,GAA0Bc,MAAM,CAACd,kBAAjC;AACA,OAAKC,qBAAL,GAA6Ba,MAAM,CAACb,qBAApC;AACA,OAAKE,kBAAL,GAA0BW,MAAM,CAACX,kBAAjC;AACA,OAAKD,oBAAL,CAA0BW,IAA1B,CAAgCC,MAAM,CAACZ,oBAAvC;AAEA,OAAKE,YAAL,GAAoBU,MAAM,CAACV,YAA3B;;AAEA,MAAKU,MAAM,CAACT,KAAZ,EAAoB;AAEnB,SAAKA,KAAL,GAAa,CAAE,KAAKA,KAAL,IAAc,IAAIb,KAAJ,EAAhB,EAA8BqB,IAA9B,CAAoCC,MAAM,CAACT,KAA3C,CAAb;AAEA,GAJD,MAIO;AAEN,SAAKA,KAAL,GAAa,IAAb;AAEA;;AAED,OAAKC,YAAL,GAAoBQ,MAAM,CAACR,YAA3B;AAEA,SAAO,IAAP;AAEA,CAlCD;;AAoCA,SAASb,oBAAT","sourcesContent":["import { Vector2 } from '../math/Vector2.js';\nimport { MeshStandardMaterial } from './MeshStandardMaterial.js';\nimport { Color } from '../math/Color.js';\n\n/**\n * @author WestLangley / http://github.com/WestLangley\n *\n * parameters = {\n *  clearcoat: <float>,\n *  clearcoatMap: new THREE.Texture( <Image> ),\n *  clearcoatRoughness: <float>,\n *  clearcoatRoughnessMap: new THREE.Texture( <Image> ),\n *  clearcoatNormalScale: <Vector2>,\n *  clearcoatNormalMap: new THREE.Texture( <Image> ),\n *\n *  reflectivity: <float>,\n *\n *  sheen: <Color>,\n *\n *  transparency: <float>\n * }\n */\n\nfunction MeshPhysicalMaterial( parameters ) {\n\n\tMeshStandardMaterial.call( this );\n\n\tthis.defines = {\n\n\t\t'STANDARD': '',\n\t\t'PHYSICAL': ''\n\n\t};\n\n\tthis.type = 'MeshPhysicalMaterial';\n\n\tthis.clearcoat = 0.0;\n\tthis.clearcoatMap = null;\n\tthis.clearcoatRoughness = 0.0;\n\tthis.clearcoatRoughnessMap = null;\n\tthis.clearcoatNormalScale = new Vector2( 1, 1 );\n\tthis.clearcoatNormalMap = null;\n\n\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\tthis.sheen = null; // null will disable sheen bsdf\n\n\tthis.transparency = 0.0;\n\n\tthis.setValues( parameters );\n\n}\n\nMeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\nMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\nMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\nMeshPhysicalMaterial.prototype.copy = function ( source ) {\n\n\tMeshStandardMaterial.prototype.copy.call( this, source );\n\n\tthis.defines = {\n\n\t\t'STANDARD': '',\n\t\t'PHYSICAL': ''\n\n\t};\n\n\tthis.clearcoat = source.clearcoat;\n\tthis.clearcoatMap = source.clearcoatMap;\n\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\tthis.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\tthis.clearcoatNormalScale.copy( source.clearcoatNormalScale );\n\n\tthis.reflectivity = source.reflectivity;\n\n\tif ( source.sheen ) {\n\n\t\tthis.sheen = ( this.sheen || new Color() ).copy( source.sheen );\n\n\t} else {\n\n\t\tthis.sheen = null;\n\n\t}\n\n\tthis.transparency = source.transparency;\n\n\treturn this;\n\n};\n\nexport { MeshPhysicalMaterial };\n"]},"metadata":{},"sourceType":"module"}