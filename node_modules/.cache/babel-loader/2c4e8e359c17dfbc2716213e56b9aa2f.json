{"ast":null,"code":"/**\n * @author mrdoob / http://mrdoob.com/\n */\nimport { BackSide, DoubleSide, CubeUVRefractionMapping, CubeUVReflectionMapping, LinearEncoding, ObjectSpaceNormalMap, TangentSpaceNormalMap, NoToneMapping } from '../../constants.js';\nimport { WebGLProgram } from './WebGLProgram.js';\nimport { ShaderLib } from '../shaders/ShaderLib.js';\nimport { UniformsUtils } from '../shaders/UniformsUtils.js';\n\nfunction WebGLPrograms(renderer, extensions, capabilities) {\n  var programs = [];\n  var isWebGL2 = capabilities.isWebGL2;\n  var logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n  var floatVertexTextures = capabilities.floatVertexTextures;\n  var precision = capabilities.precision;\n  var maxVertexUniforms = capabilities.maxVertexUniforms;\n  var vertexTextures = capabilities.vertexTextures;\n  var shaderIDs = {\n    MeshDepthMaterial: 'depth',\n    MeshDistanceMaterial: 'distanceRGBA',\n    MeshNormalMaterial: 'normal',\n    MeshBasicMaterial: 'basic',\n    MeshLambertMaterial: 'lambert',\n    MeshPhongMaterial: 'phong',\n    MeshToonMaterial: 'toon',\n    MeshStandardMaterial: 'physical',\n    MeshPhysicalMaterial: 'physical',\n    MeshMatcapMaterial: 'matcap',\n    LineBasicMaterial: 'basic',\n    LineDashedMaterial: 'dashed',\n    PointsMaterial: 'points',\n    ShadowMaterial: 'shadow',\n    SpriteMaterial: 'sprite'\n  };\n  var parameterNames = [\"precision\", \"isWebGL2\", \"supportsVertexTextures\", \"outputEncoding\", \"instancing\", \"map\", \"mapEncoding\", \"matcap\", \"matcapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\", \"envMapCubeUV\", \"lightMap\", \"lightMapEncoding\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"objectSpaceNormalMap\", \"tangentSpaceNormalMap\", \"clearcoatMap\", \"clearcoatRoughnessMap\", \"clearcoatNormalMap\", \"displacementMap\", \"specularMap\", \"roughnessMap\", \"metalnessMap\", \"gradientMap\", \"alphaMap\", \"combine\", \"vertexColors\", \"vertexTangents\", \"vertexUvs\", \"uvsVertexOnly\", \"fog\", \"useFog\", \"fogExp2\", \"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\", \"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\", \"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\", \"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\", \"numRectAreaLights\", \"numDirLightShadows\", \"numPointLightShadows\", \"numSpotLightShadows\", \"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights', \"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"numClipIntersection\", \"depthPacking\", \"dithering\", \"sheen\"];\n\n  function getShaderObject(material, shaderID) {\n    var shaderobject;\n\n    if (shaderID) {\n      var shader = ShaderLib[shaderID];\n      shaderobject = {\n        name: material.type,\n        uniforms: UniformsUtils.clone(shader.uniforms),\n        vertexShader: shader.vertexShader,\n        fragmentShader: shader.fragmentShader\n      };\n    } else {\n      shaderobject = {\n        name: material.type,\n        uniforms: material.uniforms,\n        vertexShader: material.vertexShader,\n        fragmentShader: material.fragmentShader\n      };\n    }\n\n    return shaderobject;\n  }\n\n  function allocateBones(object) {\n    var skeleton = object.skeleton;\n    var bones = skeleton.bones;\n\n    if (floatVertexTextures) {\n      return 1024;\n    } else {\n      // default for when object is not specified\n      // ( for example when prebuilding shader to be used with multiple objects )\n      //\n      //  - leave some extra space for other uniforms\n      //  - limit here is ANGLE's 254 max uniform vectors\n      //    (up to 54 should be safe)\n      var nVertexUniforms = maxVertexUniforms;\n      var nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);\n      var maxBones = Math.min(nVertexMatrices, bones.length);\n\n      if (maxBones < bones.length) {\n        console.warn('THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.');\n        return 0;\n      }\n\n      return maxBones;\n    }\n  }\n\n  function getTextureEncodingFromMap(map) {\n    var encoding;\n\n    if (!map) {\n      encoding = LinearEncoding;\n    } else if (map.isTexture) {\n      encoding = map.encoding;\n    } else if (map.isWebGLRenderTarget) {\n      console.warn(\"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\");\n      encoding = map.texture.encoding;\n    }\n\n    return encoding;\n  }\n\n  this.getParameters = function (material, lights, shadows, scene, nClipPlanes, nClipIntersection, object) {\n    var fog = scene.fog;\n    var environment = material.isMeshStandardMaterial ? scene.environment : null;\n    var envMap = material.envMap || environment;\n    var shaderID = shaderIDs[material.type]; // heuristics to create shader parameters according to lights in the scene\n    // (not to blow over maxLights budget)\n\n    var maxBones = object.isSkinnedMesh ? allocateBones(object) : 0;\n\n    if (material.precision !== null) {\n      precision = capabilities.getMaxPrecision(material.precision);\n\n      if (precision !== material.precision) {\n        console.warn('THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.');\n      }\n    }\n\n    var shaderobject = getShaderObject(material, shaderID);\n    material.onBeforeCompile(shaderobject, renderer);\n    var currentRenderTarget = renderer.getRenderTarget();\n    var parameters = {\n      isWebGL2: isWebGL2,\n      shaderID: shaderID,\n      shaderName: shaderobject.name,\n      uniforms: shaderobject.uniforms,\n      vertexShader: shaderobject.vertexShader,\n      fragmentShader: shaderobject.fragmentShader,\n      defines: material.defines,\n      isRawShaderMaterial: material.isRawShaderMaterial,\n      isShaderMaterial: material.isShaderMaterial,\n      precision: precision,\n      instancing: object.isInstancedMesh === true,\n      supportsVertexTextures: vertexTextures,\n      outputEncoding: currentRenderTarget !== null ? getTextureEncodingFromMap(currentRenderTarget.texture) : renderer.outputEncoding,\n      map: !!material.map,\n      mapEncoding: getTextureEncodingFromMap(material.map),\n      matcap: !!material.matcap,\n      matcapEncoding: getTextureEncodingFromMap(material.matcap),\n      envMap: !!envMap,\n      envMapMode: envMap && envMap.mapping,\n      envMapEncoding: getTextureEncodingFromMap(envMap),\n      envMapCubeUV: !!envMap && (envMap.mapping === CubeUVReflectionMapping || envMap.mapping === CubeUVRefractionMapping),\n      lightMap: !!material.lightMap,\n      lightMapEncoding: getTextureEncodingFromMap(material.lightMap),\n      aoMap: !!material.aoMap,\n      emissiveMap: !!material.emissiveMap,\n      emissiveMapEncoding: getTextureEncodingFromMap(material.emissiveMap),\n      bumpMap: !!material.bumpMap,\n      normalMap: !!material.normalMap,\n      objectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n      tangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n      clearcoatMap: !!material.clearcoatMap,\n      clearcoatRoughnessMap: !!material.clearcoatRoughnessMap,\n      clearcoatNormalMap: !!material.clearcoatNormalMap,\n      displacementMap: !!material.displacementMap,\n      roughnessMap: !!material.roughnessMap,\n      metalnessMap: !!material.metalnessMap,\n      specularMap: !!material.specularMap,\n      alphaMap: !!material.alphaMap,\n      gradientMap: !!material.gradientMap,\n      sheen: !!material.sheen,\n      combine: material.combine,\n      vertexTangents: material.normalMap && material.vertexTangents,\n      vertexColors: material.vertexColors,\n      vertexUvs: !!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatMap || !!material.clearcoatRoughnessMap || !!material.clearcoatNormalMap || !!material.displacementMap,\n      uvsVertexOnly: !(!!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatNormalMap) && !!material.displacementMap,\n      fog: !!fog,\n      useFog: material.fog,\n      fogExp2: fog && fog.isFogExp2,\n      flatShading: material.flatShading,\n      sizeAttenuation: material.sizeAttenuation,\n      logarithmicDepthBuffer: logarithmicDepthBuffer,\n      skinning: material.skinning && maxBones > 0,\n      maxBones: maxBones,\n      useVertexTexture: floatVertexTextures,\n      morphTargets: material.morphTargets,\n      morphNormals: material.morphNormals,\n      maxMorphTargets: renderer.maxMorphTargets,\n      maxMorphNormals: renderer.maxMorphNormals,\n      numDirLights: lights.directional.length,\n      numPointLights: lights.point.length,\n      numSpotLights: lights.spot.length,\n      numRectAreaLights: lights.rectArea.length,\n      numHemiLights: lights.hemi.length,\n      numDirLightShadows: lights.directionalShadowMap.length,\n      numPointLightShadows: lights.pointShadowMap.length,\n      numSpotLightShadows: lights.spotShadowMap.length,\n      numClippingPlanes: nClipPlanes,\n      numClipIntersection: nClipIntersection,\n      dithering: material.dithering,\n      shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n      shadowMapType: renderer.shadowMap.type,\n      toneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n      physicallyCorrectLights: renderer.physicallyCorrectLights,\n      premultipliedAlpha: material.premultipliedAlpha,\n      alphaTest: material.alphaTest,\n      doubleSided: material.side === DoubleSide,\n      flipSided: material.side === BackSide,\n      depthPacking: material.depthPacking !== undefined ? material.depthPacking : false,\n      index0AttributeName: material.index0AttributeName,\n      extensionDerivatives: material.extensions && material.extensions.derivatives,\n      extensionFragDepth: material.extensions && material.extensions.fragDepth,\n      extensionDrawBuffers: material.extensions && material.extensions.drawBuffers,\n      extensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,\n      rendererExtensionFragDepth: isWebGL2 || extensions.get('EXT_frag_depth') !== null,\n      rendererExtensionDrawBuffers: isWebGL2 || extensions.get('WEBGL_draw_buffers') !== null,\n      rendererExtensionShaderTextureLod: isWebGL2 || extensions.get('EXT_shader_texture_lod') !== null,\n      onBeforeCompile: material.onBeforeCompile\n    };\n    return parameters;\n  };\n\n  this.getProgramCacheKey = function (parameters) {\n    var array = [];\n\n    if (parameters.shaderID) {\n      array.push(parameters.shaderID);\n    } else {\n      array.push(parameters.fragmentShader);\n      array.push(parameters.vertexShader);\n    }\n\n    if (parameters.defines !== undefined) {\n      for (var name in parameters.defines) {\n        array.push(name);\n        array.push(parameters.defines[name]);\n      }\n    }\n\n    if (parameters.isRawShaderMaterial === undefined) {\n      for (var i = 0; i < parameterNames.length; i++) {\n        array.push(parameters[parameterNames[i]]);\n      }\n\n      array.push(renderer.outputEncoding);\n      array.push(renderer.gammaFactor);\n    }\n\n    array.push(parameters.onBeforeCompile.toString());\n    return array.join();\n  };\n\n  this.acquireProgram = function (parameters, cacheKey) {\n    var program; // Check if code has been already compiled\n\n    for (var p = 0, pl = programs.length; p < pl; p++) {\n      var preexistingProgram = programs[p];\n\n      if (preexistingProgram.cacheKey === cacheKey) {\n        program = preexistingProgram;\n        ++program.usedTimes;\n        break;\n      }\n    }\n\n    if (program === undefined) {\n      program = new WebGLProgram(renderer, cacheKey, parameters);\n      programs.push(program);\n    }\n\n    return program;\n  };\n\n  this.releaseProgram = function (program) {\n    if (--program.usedTimes === 0) {\n      // Remove from unordered set\n      var i = programs.indexOf(program);\n      programs[i] = programs[programs.length - 1];\n      programs.pop(); // Free WebGL resources\n\n      program.destroy();\n    }\n  }; // Exposed for resource monitoring & error feedback via renderer.info:\n\n\n  this.programs = programs;\n}\n\nexport { WebGLPrograms };","map":{"version":3,"sources":["H:/chrlab/src/component/panelComponent/Canvas/threejs/src/renderers/webgl/WebGLPrograms.js"],"names":["BackSide","DoubleSide","CubeUVRefractionMapping","CubeUVReflectionMapping","LinearEncoding","ObjectSpaceNormalMap","TangentSpaceNormalMap","NoToneMapping","WebGLProgram","ShaderLib","UniformsUtils","WebGLPrograms","renderer","extensions","capabilities","programs","isWebGL2","logarithmicDepthBuffer","floatVertexTextures","precision","maxVertexUniforms","vertexTextures","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshNormalMaterial","MeshBasicMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","parameterNames","getShaderObject","material","shaderID","shaderobject","shader","name","type","uniforms","clone","vertexShader","fragmentShader","allocateBones","object","skeleton","bones","nVertexUniforms","nVertexMatrices","Math","floor","maxBones","min","length","console","warn","getTextureEncodingFromMap","map","encoding","isTexture","isWebGLRenderTarget","texture","getParameters","lights","shadows","scene","nClipPlanes","nClipIntersection","fog","environment","isMeshStandardMaterial","envMap","isSkinnedMesh","getMaxPrecision","onBeforeCompile","currentRenderTarget","getRenderTarget","parameters","shaderName","defines","isRawShaderMaterial","isShaderMaterial","instancing","isInstancedMesh","supportsVertexTextures","outputEncoding","mapEncoding","matcap","matcapEncoding","envMapMode","mapping","envMapEncoding","envMapCubeUV","lightMap","lightMapEncoding","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","normalMapType","tangentSpaceNormalMap","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","displacementMap","roughnessMap","metalnessMap","specularMap","alphaMap","gradientMap","sheen","combine","vertexTangents","vertexColors","vertexUvs","uvsVertexOnly","useFog","fogExp2","isFogExp2","flatShading","sizeAttenuation","skinning","useVertexTexture","morphTargets","morphNormals","maxMorphTargets","maxMorphNormals","numDirLights","directional","numPointLights","point","numSpotLights","spot","numRectAreaLights","rectArea","numHemiLights","hemi","numDirLightShadows","directionalShadowMap","numPointLightShadows","pointShadowMap","numSpotLightShadows","spotShadowMap","numClippingPlanes","numClipIntersection","dithering","shadowMapEnabled","shadowMap","enabled","shadowMapType","toneMapping","toneMapped","physicallyCorrectLights","premultipliedAlpha","alphaTest","doubleSided","side","flipSided","depthPacking","undefined","index0AttributeName","extensionDerivatives","derivatives","extensionFragDepth","fragDepth","extensionDrawBuffers","drawBuffers","extensionShaderTextureLOD","shaderTextureLOD","rendererExtensionFragDepth","get","rendererExtensionDrawBuffers","rendererExtensionShaderTextureLod","getProgramCacheKey","array","push","i","gammaFactor","toString","join","acquireProgram","cacheKey","program","p","pl","preexistingProgram","usedTimes","releaseProgram","indexOf","pop","destroy"],"mappings":"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","sourcesContent":["/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nimport { BackSide, DoubleSide, CubeUVRefractionMapping, CubeUVReflectionMapping, LinearEncoding, ObjectSpaceNormalMap, TangentSpaceNormalMap, NoToneMapping } from '../../constants.js';\nimport { WebGLProgram } from './WebGLProgram.js';\nimport { ShaderLib } from '../shaders/ShaderLib.js';\nimport { UniformsUtils } from '../shaders/UniformsUtils.js';\n\nfunction WebGLPrograms( renderer, extensions, capabilities ) {\n\n\tvar programs = [];\n\n\tvar isWebGL2 = capabilities.isWebGL2;\n\tvar logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n\tvar floatVertexTextures = capabilities.floatVertexTextures;\n\tvar precision = capabilities.precision;\n\tvar maxVertexUniforms = capabilities.maxVertexUniforms;\n\tvar vertexTextures = capabilities.vertexTextures;\n\n\tvar shaderIDs = {\n\t\tMeshDepthMaterial: 'depth',\n\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\tMeshNormalMaterial: 'normal',\n\t\tMeshBasicMaterial: 'basic',\n\t\tMeshLambertMaterial: 'lambert',\n\t\tMeshPhongMaterial: 'phong',\n\t\tMeshToonMaterial: 'toon',\n\t\tMeshStandardMaterial: 'physical',\n\t\tMeshPhysicalMaterial: 'physical',\n\t\tMeshMatcapMaterial: 'matcap',\n\t\tLineBasicMaterial: 'basic',\n\t\tLineDashedMaterial: 'dashed',\n\t\tPointsMaterial: 'points',\n\t\tShadowMaterial: 'shadow',\n\t\tSpriteMaterial: 'sprite'\n\t};\n\n\tvar parameterNames = [\n\t\t\"precision\", \"isWebGL2\", \"supportsVertexTextures\", \"outputEncoding\", \"instancing\",\n\t\t\"map\", \"mapEncoding\", \"matcap\", \"matcapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\", \"envMapCubeUV\",\n\t\t\"lightMap\", \"lightMapEncoding\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"objectSpaceNormalMap\", \"tangentSpaceNormalMap\", \"clearcoatMap\", \"clearcoatRoughnessMap\", \"clearcoatNormalMap\", \"displacementMap\", \"specularMap\",\n\t\t\"roughnessMap\", \"metalnessMap\", \"gradientMap\",\n\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"vertexTangents\", \"vertexUvs\", \"uvsVertexOnly\", \"fog\", \"useFog\", \"fogExp2\",\n\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\n\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\n\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\n\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\", \"numRectAreaLights\",\n\t\t\"numDirLightShadows\", \"numPointLightShadows\", \"numSpotLightShadows\",\n\t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\n\t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"numClipIntersection\", \"depthPacking\", \"dithering\",\n\t\t\"sheen\"\n\t];\n\n\tfunction getShaderObject( material, shaderID ) {\n\n\t\tvar shaderobject;\n\n\t\tif ( shaderID ) {\n\n\t\t\tvar shader = ShaderLib[ shaderID ];\n\n\t\t\tshaderobject = {\n\t\t\t\tname: material.type,\n\t\t\t\tuniforms: UniformsUtils.clone( shader.uniforms ),\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tshaderobject = {\n\t\t\t\tname: material.type,\n\t\t\t\tuniforms: material.uniforms,\n\t\t\t\tvertexShader: material.vertexShader,\n\t\t\t\tfragmentShader: material.fragmentShader\n\t\t\t};\n\n\t\t}\n\n\t\treturn shaderobject;\n\n\t}\n\n\tfunction allocateBones( object ) {\n\n\t\tvar skeleton = object.skeleton;\n\t\tvar bones = skeleton.bones;\n\n\t\tif ( floatVertexTextures ) {\n\n\t\t\treturn 1024;\n\n\t\t} else {\n\n\t\t\t// default for when object is not specified\n\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t//\n\t\t\t//  - leave some extra space for other uniforms\n\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t\t\t//    (up to 54 should be safe)\n\n\t\t\tvar nVertexUniforms = maxVertexUniforms;\n\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n\t\t\tvar maxBones = Math.min( nVertexMatrices, bones.length );\n\n\t\t\tif ( maxBones < bones.length ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\treturn maxBones;\n\n\t\t}\n\n\t}\n\n\tfunction getTextureEncodingFromMap( map ) {\n\n\t\tvar encoding;\n\n\t\tif ( ! map ) {\n\n\t\t\tencoding = LinearEncoding;\n\n\t\t} else if ( map.isTexture ) {\n\n\t\t\tencoding = map.encoding;\n\n\t\t} else if ( map.isWebGLRenderTarget ) {\n\n\t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\n\t\t\tencoding = map.texture.encoding;\n\n\t\t}\n\n\t\treturn encoding;\n\n\t}\n\n\tthis.getParameters = function ( material, lights, shadows, scene, nClipPlanes, nClipIntersection, object ) {\n\n\t\tvar fog = scene.fog;\n\t\tvar environment = material.isMeshStandardMaterial ? scene.environment : null;\n\n\t\tvar envMap = material.envMap || environment;\n\n\t\tvar shaderID = shaderIDs[ material.type ];\n\n\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t// (not to blow over maxLights budget)\n\n\t\tvar maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;\n\n\t\tif ( material.precision !== null ) {\n\n\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar shaderobject = getShaderObject( material, shaderID );\n\t\tmaterial.onBeforeCompile( shaderobject, renderer );\n\n\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\tvar parameters = {\n\n\t\t\tisWebGL2: isWebGL2,\n\n\t\t\tshaderID: shaderID,\n\t\t\tshaderName: shaderobject.name,\n\n\t\t\tuniforms: shaderobject.uniforms,\n\t\t\tvertexShader: shaderobject.vertexShader,\n\t\t\tfragmentShader: shaderobject.fragmentShader,\n\t\t\tdefines: material.defines,\n\n\t\t\tisRawShaderMaterial: material.isRawShaderMaterial,\n\t\t\tisShaderMaterial: material.isShaderMaterial,\n\n\t\t\tprecision: precision,\n\n\t\t\tinstancing: object.isInstancedMesh === true,\n\n\t\t\tsupportsVertexTextures: vertexTextures,\n\t\t\toutputEncoding: ( currentRenderTarget !== null ) ? getTextureEncodingFromMap( currentRenderTarget.texture ) : renderer.outputEncoding,\n\t\t\tmap: !! material.map,\n\t\t\tmapEncoding: getTextureEncodingFromMap( material.map ),\n\t\t\tmatcap: !! material.matcap,\n\t\t\tmatcapEncoding: getTextureEncodingFromMap( material.matcap ),\n\t\t\tenvMap: !! envMap,\n\t\t\tenvMapMode: envMap && envMap.mapping,\n\t\t\tenvMapEncoding: getTextureEncodingFromMap( envMap ),\n\t\t\tenvMapCubeUV: ( !! envMap ) && ( ( envMap.mapping === CubeUVReflectionMapping ) || ( envMap.mapping === CubeUVRefractionMapping ) ),\n\t\t\tlightMap: !! material.lightMap,\n\t\t\tlightMapEncoding: getTextureEncodingFromMap( material.lightMap ),\n\t\t\taoMap: !! material.aoMap,\n\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap ),\n\t\t\tbumpMap: !! material.bumpMap,\n\t\t\tnormalMap: !! material.normalMap,\n\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n\t\t\tclearcoatMap: !! material.clearcoatMap,\n\t\t\tclearcoatRoughnessMap: !! material.clearcoatRoughnessMap,\n\t\t\tclearcoatNormalMap: !! material.clearcoatNormalMap,\n\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\troughnessMap: !! material.roughnessMap,\n\t\t\tmetalnessMap: !! material.metalnessMap,\n\t\t\tspecularMap: !! material.specularMap,\n\t\t\talphaMap: !! material.alphaMap,\n\n\t\t\tgradientMap: !! material.gradientMap,\n\n\t\t\tsheen: !! material.sheen,\n\n\t\t\tcombine: material.combine,\n\n\t\t\tvertexTangents: ( material.normalMap && material.vertexTangents ),\n\t\t\tvertexColors: material.vertexColors,\n\t\t\tvertexUvs: !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatMap || !! material.clearcoatRoughnessMap || !! material.clearcoatNormalMap || !! material.displacementMap,\n\t\t\tuvsVertexOnly: ! ( !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap ) && !! material.displacementMap,\n\n\t\t\tfog: !! fog,\n\t\t\tuseFog: material.fog,\n\t\t\tfogExp2: ( fog && fog.isFogExp2 ),\n\n\t\t\tflatShading: material.flatShading,\n\n\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\tskinning: material.skinning && maxBones > 0,\n\t\t\tmaxBones: maxBones,\n\t\t\tuseVertexTexture: floatVertexTextures,\n\n\t\t\tmorphTargets: material.morphTargets,\n\t\t\tmorphNormals: material.morphNormals,\n\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\n\t\t\tnumDirLights: lights.directional.length,\n\t\t\tnumPointLights: lights.point.length,\n\t\t\tnumSpotLights: lights.spot.length,\n\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\n\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\n\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\n\n\t\t\tnumClippingPlanes: nClipPlanes,\n\t\t\tnumClipIntersection: nClipIntersection,\n\n\t\t\tdithering: material.dithering,\n\n\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\talphaTest: material.alphaTest,\n\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\tflipSided: material.side === BackSide,\n\n\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false,\n\n\t\t\tindex0AttributeName: material.index0AttributeName,\n\n\t\t\textensionDerivatives: material.extensions && material.extensions.derivatives,\n\t\t\textensionFragDepth: material.extensions && material.extensions.fragDepth,\n\t\t\textensionDrawBuffers: material.extensions && material.extensions.drawBuffers,\n\t\t\textensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,\n\n\t\t\trendererExtensionFragDepth: isWebGL2 || extensions.get( 'EXT_frag_depth' ) !== null,\n\t\t\trendererExtensionDrawBuffers: isWebGL2 || extensions.get( 'WEBGL_draw_buffers' ) !== null,\n\t\t\trendererExtensionShaderTextureLod: isWebGL2 || extensions.get( 'EXT_shader_texture_lod' ) !== null,\n\n\t\t\tonBeforeCompile: material.onBeforeCompile\n\n\t\t};\n\n\t\treturn parameters;\n\n\t};\n\n\tthis.getProgramCacheKey = function ( parameters ) {\n\n\t\tvar array = [];\n\n\t\tif ( parameters.shaderID ) {\n\n\t\t\tarray.push( parameters.shaderID );\n\n\t\t} else {\n\n\t\t\tarray.push( parameters.fragmentShader );\n\t\t\tarray.push( parameters.vertexShader );\n\n\t\t}\n\n\t\tif ( parameters.defines !== undefined ) {\n\n\t\t\tfor ( var name in parameters.defines ) {\n\n\t\t\t\tarray.push( name );\n\t\t\t\tarray.push( parameters.defines[ name ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( parameters.isRawShaderMaterial === undefined ) {\n\n\t\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\n\n\t\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\n\t\t\t}\n\n\t\t\tarray.push( renderer.outputEncoding );\n\t\t\tarray.push( renderer.gammaFactor );\n\n\t\t}\n\n\t\tarray.push( parameters.onBeforeCompile.toString() );\n\n\t\treturn array.join();\n\n\t};\n\n\tthis.acquireProgram = function ( parameters, cacheKey ) {\n\n\t\tvar program;\n\n\t\t// Check if code has been already compiled\n\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\tvar preexistingProgram = programs[ p ];\n\n\t\t\tif ( preexistingProgram.cacheKey === cacheKey ) {\n\n\t\t\t\tprogram = preexistingProgram;\n\t\t\t\t++ program.usedTimes;\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( program === undefined ) {\n\n\t\t\tprogram = new WebGLProgram( renderer, cacheKey, parameters );\n\t\t\tprograms.push( program );\n\n\t\t}\n\n\t\treturn program;\n\n\t};\n\n\tthis.releaseProgram = function ( program ) {\n\n\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t// Remove from unordered set\n\t\t\tvar i = programs.indexOf( program );\n\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\tprograms.pop();\n\n\t\t\t// Free WebGL resources\n\t\t\tprogram.destroy();\n\n\t\t}\n\n\t};\n\n\t// Exposed for resource monitoring & error feedback via renderer.info:\n\tthis.programs = programs;\n\n}\n\n\nexport { WebGLPrograms };\n"]},"metadata":{},"sourceType":"module"}