{"ast":null,"code":"/**\n * @author Mugen87 / https://github.com/Mugen87\n *\n * Sobel Edge Detection (see https://youtu.be/uihBwtPIBxM)\n *\n * As mentioned in the video the Sobel operator expects a grayscale image as input.\n *\n */\nimport { Vector2 } from \"../../../build/three.module.js\";\nvar SobelOperatorShader = {\n  uniforms: {\n    \"tDiffuse\": {\n      value: null\n    },\n    \"resolution\": {\n      value: new Vector2()\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"uniform sampler2D tDiffuse;\", \"uniform vec2 resolution;\", \"varying vec2 vUv;\", \"void main() {\", \"\tvec2 texel = vec2( 1.0 / resolution.x, 1.0 / resolution.y );\", // kernel definition (in glsl matrices are filled in column-major order)\n  \"\tconst mat3 Gx = mat3( -1, -2, -1, 0, 0, 0, 1, 2, 1 );\", // x direction kernel\n  \"\tconst mat3 Gy = mat3( -1, 0, 1, -2, 0, 2, -1, 0, 1 );\", // y direction kernel\n  // fetch the 3x3 neighbourhood of a fragment\n  // first column\n  \"\tfloat tx0y0 = texture2D( tDiffuse, vUv + texel * vec2( -1, -1 ) ).r;\", \"\tfloat tx0y1 = texture2D( tDiffuse, vUv + texel * vec2( -1,  0 ) ).r;\", \"\tfloat tx0y2 = texture2D( tDiffuse, vUv + texel * vec2( -1,  1 ) ).r;\", // second column\n  \"\tfloat tx1y0 = texture2D( tDiffuse, vUv + texel * vec2(  0, -1 ) ).r;\", \"\tfloat tx1y1 = texture2D( tDiffuse, vUv + texel * vec2(  0,  0 ) ).r;\", \"\tfloat tx1y2 = texture2D( tDiffuse, vUv + texel * vec2(  0,  1 ) ).r;\", // third column\n  \"\tfloat tx2y0 = texture2D( tDiffuse, vUv + texel * vec2(  1, -1 ) ).r;\", \"\tfloat tx2y1 = texture2D( tDiffuse, vUv + texel * vec2(  1,  0 ) ).r;\", \"\tfloat tx2y2 = texture2D( tDiffuse, vUv + texel * vec2(  1,  1 ) ).r;\", // gradient value in x direction\n  \"\tfloat valueGx = Gx[0][0] * tx0y0 + Gx[1][0] * tx1y0 + Gx[2][0] * tx2y0 + \", \"\t\tGx[0][1] * tx0y1 + Gx[1][1] * tx1y1 + Gx[2][1] * tx2y1 + \", \"\t\tGx[0][2] * tx0y2 + Gx[1][2] * tx1y2 + Gx[2][2] * tx2y2; \", // gradient value in y direction\n  \"\tfloat valueGy = Gy[0][0] * tx0y0 + Gy[1][0] * tx1y0 + Gy[2][0] * tx2y0 + \", \"\t\tGy[0][1] * tx0y1 + Gy[1][1] * tx1y1 + Gy[2][1] * tx2y1 + \", \"\t\tGy[0][2] * tx0y2 + Gy[1][2] * tx1y2 + Gy[2][2] * tx2y2; \", // magnitute of the total gradient\n  \"\tfloat G = sqrt( ( valueGx * valueGx ) + ( valueGy * valueGy ) );\", \"\tgl_FragColor = vec4( vec3( G ), 1 );\", \"}\"].join(\"\\n\")\n};\nexport { SobelOperatorShader };","map":{"version":3,"sources":["H:/chrlab/src/component/panelComponent/Canvas/threejs/examples/jsm/shaders/SobelOperatorShader.js"],"names":["Vector2","SobelOperatorShader","uniforms","value","vertexShader","join","fragmentShader"],"mappings":"AAAA;;;;;;;;AASA,SACCA,OADD,QAEO,gCAFP;AAIA,IAAIC,mBAAmB,GAAG;AAEzBC,EAAAA,QAAQ,EAAE;AAET,gBAAY;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAFH;AAGT,kBAAc;AAAEA,MAAAA,KAAK,EAAE,IAAIH,OAAJ;AAAT;AAHL,GAFe;AASzBI,EAAAA,YAAY,EAAE,CAEb,mBAFa,EAIb,eAJa,EAMb,YANa,EAQb,4EARa,EAUb,GAVa,EAYZC,IAZY,CAYN,IAZM,CATW;AAuBzBC,EAAAA,cAAc,EAAE,CAEf,6BAFe,EAGf,0BAHe,EAIf,mBAJe,EAMf,eANe,EAQf,+DARe,EAUf;AAEA,0DAZe,EAY2C;AAC1D,0DAbe,EAa2C;AAE1D;AAEA;AAEA,yEAnBe,EAoBf,uEApBe,EAqBf,uEArBe,EAuBf;AAEA,yEAzBe,EA0Bf,uEA1Be,EA2Bf,uEA3Be,EA6Bf;AAEA,yEA/Be,EAgCf,uEAhCe,EAiCf,uEAjCe,EAmCf;AAEA,8EArCe,EAsCf,6DAtCe,EAuCf,4DAvCe,EAyCf;AAEA,8EA3Ce,EA4Cf,6DA5Ce,EA6Cf,4DA7Ce,EA+Cf;AAEA,qEAjDe,EAmDf,uCAnDe,EAqDf,GArDe,EAuDdD,IAvDc,CAuDR,IAvDQ;AAvBS,CAA1B;AAkFA,SAASJ,mBAAT","sourcesContent":["/**\n * @author Mugen87 / https://github.com/Mugen87\n *\n * Sobel Edge Detection (see https://youtu.be/uihBwtPIBxM)\n *\n * As mentioned in the video the Sobel operator expects a grayscale image as input.\n *\n */\n\nimport {\n\tVector2\n} from \"../../../build/three.module.js\";\n\nvar SobelOperatorShader = {\n\n\tuniforms: {\n\n\t\t\"tDiffuse\": { value: null },\n\t\t\"resolution\": { value: new Vector2() }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvUv = uv;\",\n\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\"uniform vec2 resolution;\",\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvec2 texel = vec2( 1.0 / resolution.x, 1.0 / resolution.y );\",\n\n\t\t// kernel definition (in glsl matrices are filled in column-major order)\n\n\t\t\"\tconst mat3 Gx = mat3( -1, -2, -1, 0, 0, 0, 1, 2, 1 );\", // x direction kernel\n\t\t\"\tconst mat3 Gy = mat3( -1, 0, 1, -2, 0, 2, -1, 0, 1 );\", // y direction kernel\n\n\t\t// fetch the 3x3 neighbourhood of a fragment\n\n\t\t// first column\n\n\t\t\"\tfloat tx0y0 = texture2D( tDiffuse, vUv + texel * vec2( -1, -1 ) ).r;\",\n\t\t\"\tfloat tx0y1 = texture2D( tDiffuse, vUv + texel * vec2( -1,  0 ) ).r;\",\n\t\t\"\tfloat tx0y2 = texture2D( tDiffuse, vUv + texel * vec2( -1,  1 ) ).r;\",\n\n\t\t// second column\n\n\t\t\"\tfloat tx1y0 = texture2D( tDiffuse, vUv + texel * vec2(  0, -1 ) ).r;\",\n\t\t\"\tfloat tx1y1 = texture2D( tDiffuse, vUv + texel * vec2(  0,  0 ) ).r;\",\n\t\t\"\tfloat tx1y2 = texture2D( tDiffuse, vUv + texel * vec2(  0,  1 ) ).r;\",\n\n\t\t// third column\n\n\t\t\"\tfloat tx2y0 = texture2D( tDiffuse, vUv + texel * vec2(  1, -1 ) ).r;\",\n\t\t\"\tfloat tx2y1 = texture2D( tDiffuse, vUv + texel * vec2(  1,  0 ) ).r;\",\n\t\t\"\tfloat tx2y2 = texture2D( tDiffuse, vUv + texel * vec2(  1,  1 ) ).r;\",\n\n\t\t// gradient value in x direction\n\n\t\t\"\tfloat valueGx = Gx[0][0] * tx0y0 + Gx[1][0] * tx1y0 + Gx[2][0] * tx2y0 + \",\n\t\t\"\t\tGx[0][1] * tx0y1 + Gx[1][1] * tx1y1 + Gx[2][1] * tx2y1 + \",\n\t\t\"\t\tGx[0][2] * tx0y2 + Gx[1][2] * tx1y2 + Gx[2][2] * tx2y2; \",\n\n\t\t// gradient value in y direction\n\n\t\t\"\tfloat valueGy = Gy[0][0] * tx0y0 + Gy[1][0] * tx1y0 + Gy[2][0] * tx2y0 + \",\n\t\t\"\t\tGy[0][1] * tx0y1 + Gy[1][1] * tx1y1 + Gy[2][1] * tx2y1 + \",\n\t\t\"\t\tGy[0][2] * tx0y2 + Gy[1][2] * tx1y2 + Gy[2][2] * tx2y2; \",\n\n\t\t// magnitute of the total gradient\n\n\t\t\"\tfloat G = sqrt( ( valueGx * valueGx ) + ( valueGy * valueGy ) );\",\n\n\t\t\"\tgl_FragColor = vec4( vec3( G ), 1 );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n\n};\n\nexport { SobelOperatorShader };\n"]},"metadata":{},"sourceType":"module"}