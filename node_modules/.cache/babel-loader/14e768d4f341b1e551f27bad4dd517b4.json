{"ast":null,"code":"import * as THREE from '../../threejs/src/Three.js';\nexport default (scene => {\n  const lightAmbient = new THREE.AmbientLight(0xcccccc, 0.4); //    const lightSpot = new THREE.SpotLight( 0xffffff );\n\n  const lightDirect = new THREE.DirectionalLight(0xffffff, 1.3);\n  /*\r\n      //spot light\r\n      lightSpot.angle = Math.PI / 5;\r\n      lightSpot.penumbra = 0.2;\r\n      lightSpot.position.set( 2, 3, 3 );\r\n      lightSpot.castShadow = true;\r\n      lightSpot.shadow.camera.near = 3;\r\n      lightSpot.shadow.camera.far = 10;\r\n      lightSpot.shadow.mapSize.width = 1024;\r\n      lightSpot.shadow.mapSize.height = 1024;\r\n  */\n  // direct light\n\n  lightDirect.position.set(10, 10, -10);\n  lightDirect.castShadow = true;\n  lightDirect.lightProbeIntensity = 1.0;\n  lightDirect.directionalLightIntensity = 0.2;\n  lightDirect.envMapIntensity = 1;\n  /*\r\n  lightDirect.shadow.camera.near = 1;\r\n  lightDirect.shadow.camera.far = 10;\r\n  lightDirect.shadow.camera.right = 1;\r\n  lightDirect.shadow.camera.left = - 1;\r\n  lightDirect.shadow.camera.top  = 1;\r\n  lightDirect.shadow.camera.bottom = - 1;\r\n  */\n\n  lightDirect.shadow.mapSize.width = 1024;\n  lightDirect.shadow.mapSize.height = 1024; // add light            \n\n  scene.add(lightAmbient);\n  scene.add(lightDirect); //moving light\n\n  const particleLight1 = new THREE.PointLight(0xff3333, 0.15);\n  const particleLight2 = new THREE.PointLight(0x3333ff, 0.15);\n  particleLight1.position.y = 10;\n  particleLight2.position.y = 10;\n  scene.add(particleLight1);\n  scene.add(particleLight2);\n  const startTime = Date.now();\n\n  function update() {\n    var currentTime = Date.now();\n    var timer = (currentTime - startTime) / 4000;\n    particleLight1.position.x = Math.sin(timer * 3) * 10;\n    particleLight1.position.z = Math.cos(timer * 3) * 10;\n    particleLight2.position.x = Math.sin(timer * 3) * -10;\n    particleLight2.position.z = Math.cos(timer * 3) * -10; //console.log('a');\n  }\n\n  return {\n    update\n  };\n});","map":{"version":3,"sources":["D:/chrlab/src/component/panelComponent/Canvas/Rhinojs/threejs/GeneralLights.js"],"names":["THREE","scene","lightAmbient","AmbientLight","lightDirect","DirectionalLight","position","set","castShadow","lightProbeIntensity","directionalLightIntensity","envMapIntensity","shadow","mapSize","width","height","add","particleLight1","PointLight","particleLight2","y","startTime","Date","now","update","currentTime","timer","x","Math","sin","z","cos"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,4BAAvB;AAEA,gBAAeC,KAAK,IAAI;AAEpB,QAAMC,YAAY,GAAG,IAAIF,KAAK,CAACG,YAAV,CAAwB,QAAxB,EAAiC,GAAjC,CAArB,CAFoB,CAGxB;;AACI,QAAMC,WAAW,GAAG,IAAIJ,KAAK,CAACK,gBAAV,CAA4B,QAA5B,EAAsC,GAAtC,CAApB;AACJ;;;;;;;;;;;AAWI;;AACAD,EAAAA,WAAW,CAACE,QAAZ,CAAqBC,GAArB,CAA0B,EAA1B,EAA8B,EAA9B,EAAkC,CAAC,EAAnC;AACAH,EAAAA,WAAW,CAACI,UAAZ,GAAyB,IAAzB;AACAJ,EAAAA,WAAW,CAACK,mBAAZ,GAAgC,GAAhC;AACAL,EAAAA,WAAW,CAACM,yBAAZ,GAAsC,GAAtC;AACAN,EAAAA,WAAW,CAACO,eAAZ,GAA4B,CAA5B;AACA;;;;;;;;;AAQAP,EAAAA,WAAW,CAACQ,MAAZ,CAAmBC,OAAnB,CAA2BC,KAA3B,GAAmC,IAAnC;AACAV,EAAAA,WAAW,CAACQ,MAAZ,CAAmBC,OAAnB,CAA2BE,MAA3B,GAAoC,IAApC,CA/BoB,CAiCpB;;AACAd,EAAAA,KAAK,CAACe,GAAN,CAAUd,YAAV;AACAD,EAAAA,KAAK,CAACe,GAAN,CAAUZ,WAAV,EAnCoB,CAqCpB;;AACA,QAAMa,cAAc,GAAG,IAAIjB,KAAK,CAACkB,UAAV,CAAsB,QAAtB,EAAgC,IAAhC,CAAvB;AACA,QAAMC,cAAc,GAAG,IAAInB,KAAK,CAACkB,UAAV,CAAsB,QAAtB,EAAgC,IAAhC,CAAvB;AAEAD,EAAAA,cAAc,CAACX,QAAf,CAAwBc,CAAxB,GAA4B,EAA5B;AACAD,EAAAA,cAAc,CAACb,QAAf,CAAwBc,CAAxB,GAA4B,EAA5B;AAEAnB,EAAAA,KAAK,CAACe,GAAN,CAAWC,cAAX;AACAhB,EAAAA,KAAK,CAACe,GAAN,CAAWG,cAAX;AAEA,QAAME,SAAS,GAAGC,IAAI,CAACC,GAAL,EAAlB;;AAEA,WAASC,MAAT,GAAkB;AACV,QAAIC,WAAW,GAAGH,IAAI,CAACC,GAAL,EAAlB;AACA,QAAIG,KAAK,GAAG,CAAED,WAAW,GAAGJ,SAAhB,IAA8B,IAA1C;AAEAJ,IAAAA,cAAc,CAACX,QAAf,CAAwBqB,CAAxB,GAA4BC,IAAI,CAACC,GAAL,CAAUH,KAAK,GAAG,CAAlB,IAAwB,EAApD;AACAT,IAAAA,cAAc,CAACX,QAAf,CAAwBwB,CAAxB,GAA4BF,IAAI,CAACG,GAAL,CAAUL,KAAK,GAAG,CAAlB,IAAwB,EAApD;AAEAP,IAAAA,cAAc,CAACb,QAAf,CAAwBqB,CAAxB,GAA4BC,IAAI,CAACC,GAAL,CAAUH,KAAK,GAAG,CAAlB,IAAwB,CAAC,EAArD;AACAP,IAAAA,cAAc,CAACb,QAAf,CAAwBwB,CAAxB,GAA4BF,IAAI,CAACG,GAAL,CAAUL,KAAK,GAAG,CAAlB,IAAwB,CAAC,EAArD,CARU,CASV;AACP;;AAED,SAAO;AACHF,IAAAA;AADG,GAAP;AAGH,CAhED","sourcesContent":["import * as THREE from '../../threejs/src/Three.js'\r\n\r\nexport default scene => {    \r\n\r\n    const lightAmbient = new THREE.AmbientLight( 0xcccccc,0.4 );\r\n//    const lightSpot = new THREE.SpotLight( 0xffffff );\r\n    const lightDirect = new THREE.DirectionalLight( 0xffffff, 1.3 );\r\n/*\r\n    //spot light\r\n    lightSpot.angle = Math.PI / 5;\r\n    lightSpot.penumbra = 0.2;\r\n    lightSpot.position.set( 2, 3, 3 );\r\n    lightSpot.castShadow = true;\r\n    lightSpot.shadow.camera.near = 3;\r\n    lightSpot.shadow.camera.far = 10;\r\n    lightSpot.shadow.mapSize.width = 1024;\r\n    lightSpot.shadow.mapSize.height = 1024;\r\n*/    \r\n    // direct light\r\n    lightDirect.position.set( 10, 10, -10 );\r\n    lightDirect.castShadow = true;\r\n    lightDirect.lightProbeIntensity=1.0;\r\n    lightDirect.directionalLightIntensity=0.2;\r\n    lightDirect.envMapIntensity=1;\r\n    /*\r\n    lightDirect.shadow.camera.near = 1;\r\n    lightDirect.shadow.camera.far = 10;\r\n    lightDirect.shadow.camera.right = 1;\r\n    lightDirect.shadow.camera.left = - 1;\r\n    lightDirect.shadow.camera.top  = 1;\r\n    lightDirect.shadow.camera.bottom = - 1;\r\n    */\r\n    lightDirect.shadow.mapSize.width = 1024;\r\n    lightDirect.shadow.mapSize.height = 1024;\r\n    \r\n    // add light            \r\n    scene.add(lightAmbient);\r\n    scene.add(lightDirect);\r\n\r\n    //moving light\r\n    const particleLight1 = new THREE.PointLight( 0xff3333, 0.15);\r\n    const particleLight2 = new THREE.PointLight( 0x3333ff, 0.15);\r\n\r\n    particleLight1.position.y = 10;\r\n    particleLight2.position.y = 10;\r\n\r\n    scene.add( particleLight1 );\r\n    scene.add( particleLight2 );\r\n\r\n    const startTime = Date.now();\r\n\r\n    function update() {\r\n            var currentTime = Date.now();\r\n            var timer = ( currentTime - startTime ) / 4000;\r\n\r\n            particleLight1.position.x = Math.sin( timer * 3 ) * 10;\r\n            particleLight1.position.z = Math.cos( timer * 3 ) * 10;\r\n\r\n            particleLight2.position.x = Math.sin( timer * 3 ) * -10;\r\n            particleLight2.position.z = Math.cos( timer * 3 ) * -10;\r\n            //console.log('a');\r\n    }\r\n\r\n    return {\r\n        update\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}