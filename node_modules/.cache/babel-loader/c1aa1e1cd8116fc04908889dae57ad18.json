{"ast":null,"code":"var _jsxFileName = \"H:\\\\chrlab\\\\src\\\\component\\\\panelComponent\\\\Canvas\\\\Artaskjs\\\\index.js\";\nimport React, { Component } from 'react';\nimport { Header } from 'semantic-ui-react';\nimport threeEntryPoint from \"./threejs/threeEntryPoint\";\nimport \"./canvas.css\"; //import * as THREE from 'three';\n//import Qualaroo from './QualarooLoader';\n//import {THREE} from '../arbuild/js/three.js';\n//require('../arbuild/js/three.js');\n\nvar scene, camera, renderer, clock, deltaTime, totalTime;\nvar arToolkitSource, arToolkitContext;\nvar markerRoot1, markerRoot2;\nvar mesh1;\nexport default class CanvasComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDelayChange = e => {\n      this.setState({\n        delay: Number(e.target.value)\n      });\n    };\n\n    this.tick = () => {\n      if (this.state.init) {\n        this.animate();\n        console.log('nn');\n      } else {\n        console.log('err');\n      }\n    };\n\n    this.state = {\n      activeItem: this.props.activeItem,\n      scriptloaded: [],\n      init: false,\n      delay: 100\n    };\n  }\n\n  componentDidMount() {\n    var loadscript = function (src) {\n      var tag = document.createElement('script');\n      tag.async = false;\n      tag.src = src;\n      var body = document.getElementsByTagName('body')[0];\n      body.appendChild(tag);\n    }; //threeEntryPoint(this.threeRootElement);\n\n\n    loadscript('./assets/arbuild/js/three.js'); //this.loadscript('./assets/arbuild/js/three.js');\n\n    /*\r\n    this.loadscript('./assets/arbuild/jsartoolkit5/artoolkit.min.js');\r\n    this.loadscript('./assets/arbuild/jsartoolkit5/artoolkit.api.js');\r\n    this.loadscript('./assets/arbuild/threex/threex-artoolkitsource.js');\r\n    this.loadscript('./assets/arbuild/threex/threex-artoolkitcontext.js');\r\n    this.loadscript('./assets/arbuild/threex/threex-arbasecontrols.js');\r\n    this.loadscript('./assets/arbuild/threex/threex-armarkercontrols.js');\r\n    */\n    //this.interval = setInterval(this.tick, this.state.delay);\n    //this.init();      \n  }\n  /*\r\n  async loadscript(url,name){\r\n      let script = document.createElement('script');\r\n      script.async = true;\r\n      script.type = 'text/javascript';\r\n      if (script.readyState){  //IE\r\n          script.onreadystatechange = function(){\r\n              if (script.readyState == \"loaded\" ||\r\n                      script.readyState == \"complete\"){\r\n                  script.onreadystatechange = null;\r\n                  //callback();\r\n              }\r\n          };\r\n      } else {  //Others\r\n          script.onload = function(){\r\n              \r\n          };\r\n      }\r\n      script.src = url;\r\n      document.getElementsByTagName('head')[0].appendChild(script);\r\n      console.log(window);\r\n  }\r\n  */\n\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.delay !== this.state.delay) {\n      clearInterval(this.interval);\n      this.interval = setInterval(this.tick, this.state.delay);\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  init() {\n    scene = new window.THREE.Scene();\n    let ambientLight = new window.THREE.AmbientLight(0xcccccc, 0.5);\n    scene.add(ambientLight);\n    camera = new window.THREE.Camera();\n    scene.add(camera);\n    renderer = new window.THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    renderer.setClearColor(new window.THREE.Color('lightgrey'), 0);\n    renderer.setSize(640, 480);\n    renderer.domElement.style.position = 'absolute';\n    renderer.domElement.style.top = '0px';\n    renderer.domElement.style.left = '0px';\n    document.body.appendChild(renderer.domElement);\n    clock = new THREE.Clock();\n    deltaTime = 0;\n    totalTime = 0; //arToolkitSource = new window.THREEx.ArToolkitSource({\n    //    sourceType : 'webcam',\n    //});\n  }\n  /*     \r\n       ////////////////////////////////////////////////////////////\r\n       // setup arToolkitSource\r\n       ////////////////////////////////////////////////////////////\r\n  \n         \r\n  \n           function onResize()\r\n           {\r\n             arToolkitSource.onResize()  \r\n             arToolkitSource.copySizeTo(renderer.domElement) \r\n             if ( arToolkitContext.arController !== null )\r\n             {\r\n               arToolkitSource.copySizeTo(arToolkitContext.arController.canvas)  \r\n             } \r\n           }\r\n  \n           arToolkitSource.init(function onReady(){\r\n             onResize()\r\n           });\r\n       \r\n           // handle resize event\r\n           window.addEventListener('resize', function(){\r\n             onResize()\r\n           });\r\n       \r\n           ////////////////////////////////////////////////////////////\r\n           // setup arToolkitContext\r\n           ////////////////////////////////////////////////////////////  \r\n  \n           // create atToolkitContext\r\n           arToolkitContext = new window.THREEx.ArToolkitContext({\r\n             cameraParametersUrl: '../arbuild/data/camera_para.dat',\r\n             detectionMode: 'mono'\r\n           });\r\n           \r\n           // copy projection matrix to camera when initialization complete\r\n           arToolkitContext.init( function onCompleted(){\r\n             camera.projectionMatrix.copy( arToolkitContext.getProjectionMatrix() );\r\n           });\r\n  \n           ////////////////////////////////////////////////////////////\r\n           // setup markerRoots\r\n           ////////////////////////////////////////////////////////////\r\n  \n           // build markerControls\r\n           markerRoot1 = new window.THREE.Group();\r\n           scene.add(markerRoot1);\r\n           let markerControls1 = new window.THREEx.ArMarkerControls(arToolkitContext, markerRoot1, {\r\n             type: 'pattern', patternUrl: \"../arbuild/data/hiro.patt\",\r\n           })\r\n  \n           let geometry1 = new window.THREE.CubeGeometry(1,1,1);\r\n           let material1 = new window.THREE.MeshNormalMaterial({\r\n             transparent: true,\r\n             opacity: 0.5,\r\n             side: window.THREE.DoubleSide\r\n           }); \r\n           \r\n           mesh1 = new window.THREE.Mesh( geometry1, material1 );\r\n           mesh1.position.y = 0.5;\r\n           \r\n           markerRoot1.add( mesh1 );\r\n     }\r\n  */\n\n\n  update() {\n    // update artoolkit on every frame\n    if (arToolkitSource.ready !== false) arToolkitContext.update(arToolkitSource.domElement);\n  }\n\n  render() {\n    renderer.render(scene, camera);\n  }\n\n  animate() {\n    requestAnimationFrame(this.animate);\n    deltaTime = clock.getDelta();\n    totalTime += deltaTime;\n    this.update();\n    this.render();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"panel-canvas\",\n      className: \"panel-canvas\",\n      ref: element => this.threeRootElement = element,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"canvas-gui-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      as: \"h2\",\n      color: \"black\",\n      inverted: true,\n      \"text-align\": \"center\",\n      key: this.state.activeItem,\n      style: {\n        fontFamily: 'Titillium Web'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }\n    }, this.state.activeItem.toUpperCase())));\n  }\n\n}","map":{"version":3,"sources":["H:/chrlab/src/component/panelComponent/Canvas/Artaskjs/index.js"],"names":["React","Component","Header","threeEntryPoint","scene","camera","renderer","clock","deltaTime","totalTime","arToolkitSource","arToolkitContext","markerRoot1","markerRoot2","mesh1","CanvasComponent","constructor","props","handleDelayChange","e","setState","delay","Number","target","value","tick","state","init","animate","console","log","activeItem","scriptloaded","componentDidMount","loadscript","src","tag","document","createElement","async","body","getElementsByTagName","appendChild","componentDidUpdate","prevProps","prevState","clearInterval","interval","setInterval","componentWillUnmount","window","THREE","Scene","ambientLight","AmbientLight","add","Camera","WebGLRenderer","antialias","alpha","setClearColor","Color","setSize","domElement","style","position","top","left","Clock","update","ready","render","requestAnimationFrame","getDelta","element","threeRootElement","fontFamily","toUpperCase"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Header} from 'semantic-ui-react';\r\nimport threeEntryPoint from \"./threejs/threeEntryPoint\";\r\nimport \"./canvas.css\";\r\n\r\n//import * as THREE from 'three';\r\n//import Qualaroo from './QualarooLoader';\r\n\r\n//import {THREE} from '../arbuild/js/three.js';\r\n//require('../arbuild/js/three.js');\r\n\r\n    var scene, camera, renderer, clock, deltaTime, totalTime;\r\n    var arToolkitSource, arToolkitContext;\r\n    var markerRoot1, markerRoot2;\r\n    var mesh1;\r\n\r\nexport default class CanvasComponent extends Component {\r\n\tconstructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        activeItem: this.props.activeItem,\r\n        scriptloaded: [],\r\n        init:false,\r\n        delay:100\r\n    };\r\n  }\r\n\r\n\r\n    componentDidMount() {\r\n        var loadscript = function (src) {\r\n          var tag = document.createElement('script');\r\n          tag.async = false;\r\n          tag.src = src;\r\n          var body = document.getElementsByTagName('body')[0];\r\n          body.appendChild(tag);\r\n        }\r\n\t    //threeEntryPoint(this.threeRootElement);\r\n        loadscript('./assets/arbuild/js/three.js');\r\n        //this.loadscript('./assets/arbuild/js/three.js');\r\n        /*\r\n        this.loadscript('./assets/arbuild/jsartoolkit5/artoolkit.min.js');\r\n        this.loadscript('./assets/arbuild/jsartoolkit5/artoolkit.api.js');\r\n        this.loadscript('./assets/arbuild/threex/threex-artoolkitsource.js');\r\n        this.loadscript('./assets/arbuild/threex/threex-artoolkitcontext.js');\r\n        this.loadscript('./assets/arbuild/threex/threex-arbasecontrols.js');\r\n        this.loadscript('./assets/arbuild/threex/threex-armarkercontrols.js');\r\n        */\r\n        //this.interval = setInterval(this.tick, this.state.delay);\r\n        \r\n        //this.init();      \r\n    }\r\n    /*\r\n    async loadscript(url,name){\r\n        let script = document.createElement('script');\r\n        script.async = true;\r\n        script.type = 'text/javascript';\r\n        if (script.readyState){  //IE\r\n            script.onreadystatechange = function(){\r\n                if (script.readyState == \"loaded\" ||\r\n                        script.readyState == \"complete\"){\r\n                    script.onreadystatechange = null;\r\n                    //callback();\r\n                }\r\n            };\r\n        } else {  //Others\r\n            script.onload = function(){\r\n                \r\n            };\r\n        }\r\n        script.src = url;\r\n        document.getElementsByTagName('head')[0].appendChild(script);\r\n        console.log(window);\r\n    }\r\n    */\r\n    componentDidUpdate(prevProps, prevState) {    \r\n        if (prevState.delay !== this.state.delay) {      \r\n            clearInterval(this.interval);      \r\n            this.interval = setInterval(this.tick, this.state.delay);    \r\n        }  \r\n    }\r\n\r\n    handleDelayChange = (e) => {\r\n        this.setState({ delay: Number(e.target.value) });\r\n\r\n    }\r\n\r\n    componentWillUnmount() {    \r\n        clearInterval(this.interval);  \r\n    }  \r\n\r\n    tick = () => {   \r\n        if (this.state.init){\r\n            this.animate();\r\n            console.log('nn');\r\n        }else{\r\n            console.log('err');\r\n        }\r\n    }\r\n\r\n\tinit(){\r\n\r\n        scene = new window.THREE.Scene();\r\n        let ambientLight = new window.THREE.AmbientLight( 0xcccccc, 0.5 );\r\n        scene.add( ambientLight );\r\n            \r\n        camera = new window.THREE.Camera();\r\n        scene.add(camera);\r\n\r\n        renderer = new window.THREE.WebGLRenderer({\r\n            antialias : true,\r\n            alpha: true\r\n        });\r\n        renderer.setClearColor(new window.THREE.Color('lightgrey'), 0)\r\n        renderer.setSize( 640, 480 );\r\n        renderer.domElement.style.position = 'absolute'\r\n        renderer.domElement.style.top = '0px'\r\n        renderer.domElement.style.left = '0px'\r\n        document.body.appendChild( renderer.domElement );\r\n\r\n        clock = new THREE.Clock();\r\n        deltaTime = 0;\r\n        totalTime = 0;\r\n\r\n        //arToolkitSource = new window.THREEx.ArToolkitSource({\r\n        //    sourceType : 'webcam',\r\n        //});\r\n    }\r\n /*     \r\n      ////////////////////////////////////////////////////////////\r\n      // setup arToolkitSource\r\n      ////////////////////////////////////////////////////////////\r\n\r\n        \r\n\r\n          function onResize()\r\n          {\r\n            arToolkitSource.onResize()  \r\n            arToolkitSource.copySizeTo(renderer.domElement) \r\n            if ( arToolkitContext.arController !== null )\r\n            {\r\n              arToolkitSource.copySizeTo(arToolkitContext.arController.canvas)  \r\n            } \r\n          }\r\n\r\n          arToolkitSource.init(function onReady(){\r\n            onResize()\r\n          });\r\n      \r\n          // handle resize event\r\n          window.addEventListener('resize', function(){\r\n            onResize()\r\n          });\r\n      \r\n          ////////////////////////////////////////////////////////////\r\n          // setup arToolkitContext\r\n          ////////////////////////////////////////////////////////////  \r\n\r\n          // create atToolkitContext\r\n          arToolkitContext = new window.THREEx.ArToolkitContext({\r\n            cameraParametersUrl: '../arbuild/data/camera_para.dat',\r\n            detectionMode: 'mono'\r\n          });\r\n          \r\n          // copy projection matrix to camera when initialization complete\r\n          arToolkitContext.init( function onCompleted(){\r\n            camera.projectionMatrix.copy( arToolkitContext.getProjectionMatrix() );\r\n          });\r\n\r\n          ////////////////////////////////////////////////////////////\r\n          // setup markerRoots\r\n          ////////////////////////////////////////////////////////////\r\n\r\n          // build markerControls\r\n          markerRoot1 = new window.THREE.Group();\r\n          scene.add(markerRoot1);\r\n          let markerControls1 = new window.THREEx.ArMarkerControls(arToolkitContext, markerRoot1, {\r\n            type: 'pattern', patternUrl: \"../arbuild/data/hiro.patt\",\r\n          })\r\n\r\n          let geometry1 = new window.THREE.CubeGeometry(1,1,1);\r\n          let material1 = new window.THREE.MeshNormalMaterial({\r\n            transparent: true,\r\n            opacity: 0.5,\r\n            side: window.THREE.DoubleSide\r\n          }); \r\n          \r\n          mesh1 = new window.THREE.Mesh( geometry1, material1 );\r\n          mesh1.position.y = 0.5;\r\n          \r\n          markerRoot1.add( mesh1 );\r\n    }\r\n*/\r\n    update()\r\n    {\r\n      // update artoolkit on every frame\r\n      if ( arToolkitSource.ready !== false )\r\n        arToolkitContext.update( arToolkitSource.domElement );\r\n    }\r\n\r\n\r\n    render()\r\n    {\r\n      renderer.render( scene, camera );\r\n    }\r\n\r\n\r\n    animate()\r\n    {\r\n      requestAnimationFrame(this.animate);\r\n      deltaTime = clock.getDelta();\r\n      totalTime += deltaTime;\r\n      this.update();\r\n      this.render();\r\n    }\r\n\r\n    render () {\r\n    \t\r\n        return (\r\n        \t\r\n            <div id=\"panel-canvas\" className=\"panel-canvas\" ref={element => this.threeRootElement = element}>\r\n            \t  <div id=\"canvas-gui-container\">\r\n            \t  \t<Header as='h2' color='black' inverted text-align='center' key={this.state.activeItem}  style={{fontFamily: 'Titillium Web'}}>{this.state.activeItem.toUpperCase()}</Header>\r\n            \t  </div>\r\n            </div>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}