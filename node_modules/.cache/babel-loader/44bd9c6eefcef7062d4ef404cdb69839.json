{"ast":null,"code":"import { Vector3 } from './Vector3.js';\nimport { Sphere } from './Sphere.js';\nimport { Plane } from './Plane.js';\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author bhouston / http://clara.io\n */\n\nvar _sphere = new Sphere();\n\nvar _vector = new Vector3();\n\nfunction Frustum(p0, p1, p2, p3, p4, p5) {\n  this.planes = [p0 !== undefined ? p0 : new Plane(), p1 !== undefined ? p1 : new Plane(), p2 !== undefined ? p2 : new Plane(), p3 !== undefined ? p3 : new Plane(), p4 !== undefined ? p4 : new Plane(), p5 !== undefined ? p5 : new Plane()];\n}\n\nObject.assign(Frustum.prototype, {\n  set: function (p0, p1, p2, p3, p4, p5) {\n    var planes = this.planes;\n    planes[0].copy(p0);\n    planes[1].copy(p1);\n    planes[2].copy(p2);\n    planes[3].copy(p3);\n    planes[4].copy(p4);\n    planes[5].copy(p5);\n    return this;\n  },\n  clone: function () {\n    return new this.constructor().copy(this);\n  },\n  copy: function (frustum) {\n    var planes = this.planes;\n\n    for (var i = 0; i < 6; i++) {\n      planes[i].copy(frustum.planes[i]);\n    }\n\n    return this;\n  },\n  setFromProjectionMatrix: function (m) {\n    var planes = this.planes;\n    var me = m.elements;\n    var me0 = me[0],\n        me1 = me[1],\n        me2 = me[2],\n        me3 = me[3];\n    var me4 = me[4],\n        me5 = me[5],\n        me6 = me[6],\n        me7 = me[7];\n    var me8 = me[8],\n        me9 = me[9],\n        me10 = me[10],\n        me11 = me[11];\n    var me12 = me[12],\n        me13 = me[13],\n        me14 = me[14],\n        me15 = me[15];\n    planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();\n    planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();\n    planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();\n    planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();\n    planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();\n    planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();\n    return this;\n  },\n  intersectsObject: function (object) {\n    var geometry = object.geometry;\n    if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n    _sphere.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);\n\n    return this.intersectsSphere(_sphere);\n  },\n  intersectsSprite: function (sprite) {\n    _sphere.center.set(0, 0, 0);\n\n    _sphere.radius = 0.7071067811865476;\n\n    _sphere.applyMatrix4(sprite.matrixWorld);\n\n    return this.intersectsSphere(_sphere);\n  },\n  intersectsSphere: function (sphere) {\n    var planes = this.planes;\n    var center = sphere.center;\n    var negRadius = -sphere.radius;\n\n    for (var i = 0; i < 6; i++) {\n      var distance = planes[i].distanceToPoint(center);\n\n      if (distance < negRadius) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n  intersectsBox: function (box) {\n    var planes = this.planes;\n\n    for (var i = 0; i < 6; i++) {\n      var plane = planes[i]; // corner at max distance\n\n      _vector.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n      _vector.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n      _vector.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n      if (plane.distanceToPoint(_vector) < 0) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n  containsPoint: function (point) {\n    var planes = this.planes;\n\n    for (var i = 0; i < 6; i++) {\n      if (planes[i].distanceToPoint(point) < 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n});\nexport { Frustum };","map":{"version":3,"sources":["D:/chrlab/src/component/panelComponent/Canvas/threejs/src/math/Frustum.js"],"names":["Vector3","Sphere","Plane","_sphere","_vector","Frustum","p0","p1","p2","p3","p4","p5","planes","undefined","Object","assign","prototype","set","copy","clone","constructor","frustum","i","setFromProjectionMatrix","m","me","elements","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","setComponents","normalize","intersectsObject","object","geometry","boundingSphere","computeBoundingSphere","applyMatrix4","matrixWorld","intersectsSphere","intersectsSprite","sprite","center","radius","sphere","negRadius","distance","distanceToPoint","intersectsBox","box","plane","x","normal","max","min","y","z","containsPoint","point"],"mappings":"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","sourcesContent":["import { Vector3 } from './Vector3.js';\nimport { Sphere } from './Sphere.js';\nimport { Plane } from './Plane.js';\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author alteredq / http://alteredqualia.com/\n * @author bhouston / http://clara.io\n */\n\nvar _sphere = new Sphere();\nvar _vector = new Vector3();\n\nfunction Frustum( p0, p1, p2, p3, p4, p5 ) {\n\n\tthis.planes = [\n\n\t\t( p0 !== undefined ) ? p0 : new Plane(),\n\t\t( p1 !== undefined ) ? p1 : new Plane(),\n\t\t( p2 !== undefined ) ? p2 : new Plane(),\n\t\t( p3 !== undefined ) ? p3 : new Plane(),\n\t\t( p4 !== undefined ) ? p4 : new Plane(),\n\t\t( p5 !== undefined ) ? p5 : new Plane()\n\n\t];\n\n}\n\nObject.assign( Frustum.prototype, {\n\n\tset: function ( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tvar planes = this.planes;\n\n\t\tplanes[ 0 ].copy( p0 );\n\t\tplanes[ 1 ].copy( p1 );\n\t\tplanes[ 2 ].copy( p2 );\n\t\tplanes[ 3 ].copy( p3 );\n\t\tplanes[ 4 ].copy( p4 );\n\t\tplanes[ 5 ].copy( p5 );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( frustum ) {\n\n\t\tvar planes = this.planes;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tsetFromProjectionMatrix: function ( m ) {\n\n\t\tvar planes = this.planes;\n\t\tvar me = m.elements;\n\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\treturn this;\n\n\t},\n\n\tintersectsObject: function ( object ) {\n\n\t\tvar geometry = object.geometry;\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\n\n\t\treturn this.intersectsSphere( _sphere );\n\n\t},\n\n\tintersectsSprite: function ( sprite ) {\n\n\t\t_sphere.center.set( 0, 0, 0 );\n\t\t_sphere.radius = 0.7071067811865476;\n\t\t_sphere.applyMatrix4( sprite.matrixWorld );\n\n\t\treturn this.intersectsSphere( _sphere );\n\n\t},\n\n\tintersectsSphere: function ( sphere ) {\n\n\t\tvar planes = this.planes;\n\t\tvar center = sphere.center;\n\t\tvar negRadius = - sphere.radius;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tvar distance = planes[ i ].distanceToPoint( center );\n\n\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\tvar planes = this.planes;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tvar plane = planes[ i ];\n\n\t\t\t// corner at max distance\n\n\t\t\t_vector.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t_vector.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t_vector.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\tif ( plane.distanceToPoint( _vector ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\tvar planes = this.planes;\n\n\t\tfor ( var i = 0; i < 6; i ++ ) {\n\n\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n} );\n\n\nexport { Frustum };\n"]},"metadata":{},"sourceType":"module"}