{"ast":null,"code":"//import * as THREE from 'three';\nimport * as THREE from '../../threejs/src/Three.js'; //import SceneSubject from './SceneSubject';\n\nimport GeneralLights from './GeneralLights';\nimport * as dat from 'dat.gui';\nimport { OBJLoader } from '../../threejs/examples/jsm/loaders/OBJLoader.js';\nimport { EffectComposer } from '../../threejs/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from '../../threejs/examples/jsm/postprocessing/RenderPass.js';\nimport { FilmPass } from '../../threejs/examples/jsm/postprocessing/FilmPass.js';\nimport { BloomPass } from '../../threejs/examples/jsm/postprocessing/BloomPass.js';\nimport { ShaderPass } from '../../threejs/examples/jsm/postprocessing/ShaderPass.js';\nimport { SobelOperatorShader } from '../../threejs/examples/jsm/shaders/SobelOperatorShader.js';\nimport { OutlinePass } from '../../threejs/examples/jsm/postprocessing/OutlinePass.js';\nimport { RectAreaLightUniformsLib } from '../../threejs/examples/jsm/lights/RectAreaLightUniformsLib.js';\nimport { RectAreaLightHelper } from '../../threejs/examples/jsm/helpers/RectAreaLightHelper.js';\nimport { RGBELoader } from '../../threejs/examples/jsm/loaders/RGBELoader.js';\nimport { HDRCubeTextureLoader } from '../../threejs/examples/jsm/loaders/HDRCubeTextureLoader.js'; //import { RectAreaLightHelper } from '../../threejs/examples/jsm/helpers/RectAreaLightHelper.js';\n//const glsl = require('glslify');\n\nconst OrbitControls = require('three-orbit-controls')(THREE);\n\nconst modelurl = './assets/curationjs/model/xx.obj';\nexport default (canvas => {\n  // =============== DECLEAR ===============\n  var model;\n  var hdrCubeRenderTarget = null;\n  var pmremGenerator;\n  var ground;\n  var diffuseColor;\n  var sceneCube, cubeMesh, sphereMesh;\n  var textureEquirec, textureCube, textureSphere, textureENV;\n  var matHDR = new THREE.MeshStandardMaterial({\n    color: 0xff0000,\n    roughness: 0.1 //emissiveIntensity: .5,\n\n  });\n  var matROOM = new THREE.MeshStandardMaterial({\n    color: 0xffffff,\n    roughness: 0.5\n  });\n  var matGROUND = new THREE.MeshStandardMaterial({\n    color: 0x555555,\n    roughness: 0.3,\n    reflectivity: 0.5\n  }); // =============== HACK ===============\n\n  const screenDimensions = {\n    width: canvas.width,\n    height: canvas.height\n  }; // =============== LOAD ROOM ================\n\n  THREE.Mesh.prototype.clone = function () {\n    var newMaterial = this.material.isMaterial ? this.material.clone() : this.material.slice();\n    return new this.constructor(this.geometry.clone(), newMaterial).copy(this);\n  }; // =============== LOAD ROOM ================\n\n\n  var loadRoom = function (renderer, scene) {\n    var loader = new OBJLoader(new THREE.LoadingManager(() => {})); // =================object will install into ./public not in ./src===================\n\n    loader.load(modelurl, function (obj) {\n      // Object\n      obj.children.forEach(child => {\n        if (child.isMesh) {\n          var geo = child;\n          geo.material = matROOM;\n          geo.material.needsUpdate = true;\n          geo.castShadow = true;\n          geo.receiveShadow = true;\n          scene.add(geo);\n        }\n      }); // ground\t\t\t\t\t\n\n      ground = new THREE.Mesh(new THREE.PlaneBufferGeometry(200, 200), matGROUND);\n      ground.rotation.x = -Math.PI / 2;\n      ground.castShadow = true;\n      ground.receiveShadow = true;\n      scene.add(ground);\n      /*\r\n      obj.traverse( function ( child ) {\r\n          if ( child.isMesh ) {\r\n              var geo = child;\r\n              geo.material = matRoom;                            \r\n              geo.castShadow = true;\r\n              scene.add(geo);                  \r\n          }               \r\n      });\r\n      */\n    }, onProgress, onError);\n  };\n\n  function onProgress(xhr) {\n    if (xhr.lengthComputable) {\n      var percentComplete = xhr.loaded / xhr.total * 100;\n      console.log('model ' + Math.round(percentComplete, 2) + '% downloaded');\n    }\n  }\n\n  function onError() {\n    console.log('error!!');\n  } //=============== BUILD ================\n\n\n  const scene = buildScene();\n  const renderer = buildRender(screenDimensions);\n  const camera = buildCamera(screenDimensions);\n  const contorls = buildControls(camera);\n  init();\n\n  function buildScene() {\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color('#000');\n    return scene;\n  }\n\n  function buildRender({\n    width,\n    height\n  }) {\n    const renderer = new THREE.WebGLRenderer({\n      canvas: canvas,\n      antialias: true\n    });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(width, height); //renderer.shadowMap.enabled = true;\n    //renderer.shadowMap.type = THREE.VSMShadowMap;\n    //renderer.setClearColor( 0xCCCCCC, 1 );\n\n    renderer.physicallyCorrectLights = true;\n    renderer.toneMapping = THREE.LinearToneMapping; // HDR\n\n    THREE.DefaultLoadingManager.onLoad = function () {\n      pmremGenerator.dispose();\n    }; // ================= SET HDRI-MATERIAL ======================\n    // Textures\n\n    /*\r\n    var hdrUrls = [ 'px.hdr', 'nx.hdr', 'py.hdr', 'ny.hdr', 'pz.hdr', 'nz.hdr' ];\r\n    textureCube = new HDRCubeTextureLoader()\r\n    .setPath( './assets/textures/cube/pisaHDR/' )\r\n    .setDataType( THREE.UnsignedByteType )\r\n    .load( hdrUrls, function () {\r\n    hdrCubeRenderTarget = pmremGenerator.fromCubemap( textureCube );\r\n    textureCube.magFilter = THREE.LinearFilter;\r\n    textureCube.needsUpdate = true;\r\n    } );\r\n    pmremGenerator = new THREE.PMREMGenerator( renderer );\r\n    pmremGenerator.compileCubemapShader();\r\n    */\n\n\n    renderer.toneMappingExposure = 2;\n    return renderer;\n  }\n\n  function buildCamera({\n    width,\n    height\n  }) {\n    const camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.1, 100);\n    camera.position.x = 6;\n    camera.position.y = 1.5;\n    camera.position.z = 0;\n    camera.lookAt(scene);\n    return camera;\n  }\n\n  function buildControls(camera) {\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.update();\n    return controls;\n  } // GENERATE ENV\n\n\n  function buildENV() {\n    // create environmet\n    var envScene = new THREE.Scene();\n    var mainLight = new THREE.PointLight(0xffffff, 1, 30, 1.6); //( color : Integer, intensity : Float, distance : Number, decay : Float )\n\n    mainLight.position.set(0, 3, 0); //mainLight.shadow = true;\n\n    envScene.add(mainLight);\n    var geometry = new THREE.BoxBufferGeometry(); //geometry.deleteAttribute( 'uv' );\n\n    var roomMaterial = new THREE.MeshStandardMaterial({\n      metalness: 0,\n      side: THREE.BackSide\n    });\n    var room = new THREE.Mesh(geometry, roomMaterial);\n    room.scale.setScalar(10);\n    envScene.add(room);\n    var lightMaterial = new THREE.MeshLambertMaterial({\n      color: 0x000000,\n      emissive: 0xffffff,\n      emissiveIntensity: 10\n    });\n    var light1 = new THREE.Mesh(geometry, lightMaterial);\n    light1.position.set(-500, 200, 0);\n    light1.scale.set(0.1, 1, 1);\n    envScene.add(light1);\n    var light2 = new THREE.Mesh(geometry, lightMaterial);\n    light2.position.set(0, 500, 0);\n    light2.scale.set(1, 0.1, 1);\n    envScene.add(light2);\n    var light2 = new THREE.Mesh(geometry, lightMaterial);\n    light2.position.set(200, 100, 500);\n    light2.scale.set(1.5, 2, 0.1);\n    envScene.add(light2); // upload as teture map\n\n    var pmremGenerator = new THREE.PMREMGenerator(renderer);\n    pmremGenerator.compileCubemapShader();\n    textureENV = pmremGenerator.fromScene(envScene, 0.1);\n    matHDR.envMap = textureENV.texture;\n    matROOM.envMap = textureENV.texture;\n    matGROUND.envMap = textureENV.texture;\n    renderer.outputEncoding = THREE.sRGBEncoding;\n    return envScene;\n  }\n\n  function init() {\n    // room\n\n    /*\r\n    var materials = [];\r\n    \r\n    for ( var i = 0; i < 8; i ++ ) {\r\n    \t\t\tmaterials.push( new THREE.MeshBasicMaterial( { color: 0xfaaaaa, side: THREE.BackSide } ) );\r\n    \t\t}\r\n    var geometry = new THREE.BoxBufferGeometry( 3, 3, 3 );\r\n    var mesh = new THREE.Mesh( geometry, materials );\r\n    scene.add( mesh );\r\n    */\n    // ================= ROOM ======================\n    new loadRoom(renderer, scene);\n    buildENV(); //var material = new THREE.MeshBasicMaterial( { vertexColors: true } );\n\n    model = new THREE.Mesh(new THREE.TorusKnotBufferGeometry(0.75, 0.3, 128, 32, 1), matHDR);\n    model.geometry.translate(0, 1.5, 0);\n    scene.add(model); //new SimpleGI( renderer, scene );\n  }\n\n  function onWindowResize() {\n    const {\n      width,\n      height\n    } = canvas;\n    screenDimensions.width = width;\n    screenDimensions.height = height;\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n    renderer.setSize(width, height);\n  }\n\n  function update() {\n    requestAnimationFrame(update); //renderer.setRenderTarget( null );\n\n    renderer.render(scene, camera);\n  }\n\n  return {\n    update,\n    onWindowResize\n  };\n});","map":{"version":3,"sources":["D:/chrlab/src/component/panelComponent/Canvas/Curationjs/threejs/SceneManager.js"],"names":["THREE","GeneralLights","dat","OBJLoader","EffectComposer","RenderPass","FilmPass","BloomPass","ShaderPass","SobelOperatorShader","OutlinePass","RectAreaLightUniformsLib","RectAreaLightHelper","RGBELoader","HDRCubeTextureLoader","OrbitControls","require","modelurl","canvas","model","hdrCubeRenderTarget","pmremGenerator","ground","diffuseColor","sceneCube","cubeMesh","sphereMesh","textureEquirec","textureCube","textureSphere","textureENV","matHDR","MeshStandardMaterial","color","roughness","matROOM","matGROUND","reflectivity","screenDimensions","width","height","Mesh","prototype","clone","newMaterial","material","isMaterial","slice","constructor","geometry","copy","loadRoom","renderer","scene","loader","LoadingManager","load","obj","children","forEach","child","isMesh","geo","needsUpdate","castShadow","receiveShadow","add","PlaneBufferGeometry","rotation","x","Math","PI","onProgress","onError","xhr","lengthComputable","percentComplete","loaded","total","console","log","round","buildScene","buildRender","camera","buildCamera","contorls","buildControls","init","Scene","background","Color","WebGLRenderer","antialias","setPixelRatio","window","devicePixelRatio","setSize","physicallyCorrectLights","toneMapping","LinearToneMapping","DefaultLoadingManager","onLoad","dispose","toneMappingExposure","PerspectiveCamera","innerWidth","innerHeight","position","y","z","lookAt","controls","domElement","update","buildENV","envScene","mainLight","PointLight","set","BoxBufferGeometry","roomMaterial","metalness","side","BackSide","room","scale","setScalar","lightMaterial","MeshLambertMaterial","emissive","emissiveIntensity","light1","light2","PMREMGenerator","compileCubemapShader","fromScene","envMap","texture","outputEncoding","sRGBEncoding","TorusKnotBufferGeometry","translate","onWindowResize","aspect","updateProjectionMatrix","requestAnimationFrame","render"],"mappings":"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","sourcesContent":["//import * as THREE from 'three';\r\nimport * as THREE from '../../threejs/src/Three.js';\r\n//import SceneSubject from './SceneSubject';\r\nimport GeneralLights from './GeneralLights';\r\nimport * as dat from 'dat.gui';\r\nimport { OBJLoader } from '../../threejs/examples/jsm/loaders/OBJLoader.js';\r\n\r\nimport { EffectComposer } from '../../threejs/examples/jsm/postprocessing/EffectComposer.js';\r\nimport { RenderPass } from '../../threejs/examples/jsm/postprocessing/RenderPass.js';\r\nimport { FilmPass } from '../../threejs/examples/jsm/postprocessing/FilmPass.js';\r\nimport { BloomPass } from '../../threejs/examples/jsm/postprocessing/BloomPass.js';\r\n\r\nimport { ShaderPass } from '../../threejs/examples/jsm/postprocessing/ShaderPass.js';\r\nimport { SobelOperatorShader } from '../../threejs/examples/jsm/shaders/SobelOperatorShader.js';\r\nimport { OutlinePass } from '../../threejs/examples/jsm/postprocessing/OutlinePass.js';\r\n\r\nimport { RectAreaLightUniformsLib } from '../../threejs/examples/jsm/lights/RectAreaLightUniformsLib.js';\r\nimport { RectAreaLightHelper } from '../../threejs/examples/jsm/helpers/RectAreaLightHelper.js';\r\n\r\nimport { RGBELoader } from '../../threejs/examples/jsm/loaders/RGBELoader.js';\r\n\r\nimport { HDRCubeTextureLoader } from '../../threejs/examples/jsm/loaders/HDRCubeTextureLoader.js';\r\n//import { RectAreaLightHelper } from '../../threejs/examples/jsm/helpers/RectAreaLightHelper.js';\r\n\r\n//const glsl = require('glslify');\r\nconst OrbitControls = require('three-orbit-controls')(THREE);\r\nconst modelurl = './assets/curationjs/model/xx.obj';\r\n\r\nexport default canvas => {\r\n\t\t\t// =============== DECLEAR ===============\r\n            var model;\r\n\t\t\tvar hdrCubeRenderTarget = null;\r\n\t\t\tvar pmremGenerator;\r\n\t\t\t\t\r\n\t\t\tvar ground;\r\n\t\t\tvar diffuseColor;\r\n\t\t\tvar sceneCube, cubeMesh, sphereMesh;\r\n\r\n\t\t\tvar textureEquirec, textureCube, textureSphere, textureENV;\r\n\r\n\t\t\tvar matHDR = new THREE.MeshStandardMaterial({\r\n\t\t\t\tcolor: 0xff0000,\r\n\t\t\t\troughness: 0.1\r\n        \t\t//emissiveIntensity: .5,\r\n\t\t\t});\r\n\r\n\t\t\tvar matROOM = new THREE.MeshStandardMaterial( {\r\n\t\t\t\t\tcolor: 0xffffff,\r\n\t\t\t\t\troughness: 0.5\r\n\t\t\t\t});\r\n\t\t\tvar matGROUND = new THREE.MeshStandardMaterial( {\r\n\t\t\t\t\tcolor: 0x555555,\r\n\t\t\t\t\troughness: 0.3,\r\n\t\t\t\t\treflectivity: 0.5\r\n\t\t\t\t});\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// =============== HACK ===============\r\n\t\t\tconst screenDimensions = {\r\n\t\t        width: canvas.width,\r\n\t\t        height: canvas.height\r\n\t\t    }\r\n\t\t    // =============== LOAD ROOM ================\r\n\t\t    \r\n\t\t\tTHREE.Mesh.prototype.clone = function () {\r\n\r\n\t\t\t\tvar newMaterial = ( this.material.isMaterial ) ? this.material.clone() : this.material.slice();\r\n\r\n\t\t\t\treturn new this.constructor( this.geometry.clone(), newMaterial ).copy( this );\r\n\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\t// =============== LOAD ROOM ================\r\n            var loadRoom = function(renderer, scene){\r\n\r\n                var loader = new OBJLoader(new THREE.LoadingManager(()=>{}));\r\n                \r\n                // =================object will install into ./public not in ./src===================\r\n                loader.load( modelurl , function ( obj ) {\r\n                    // Object\r\n                    obj.children.forEach((child)=>{\r\n\r\n                    \tif ( child.isMesh ) {\r\n                    \t\t\r\n                    \t\tvar geo = child;\r\n                    \t\tgeo.material = matROOM;\r\n                    \t\tgeo.material.needsUpdate = true;\r\n                    \t\tgeo.castShadow = true;\r\n                    \t\tgeo.receiveShadow = true;\r\n                            scene.add(geo);\r\n                    \t}\r\n                    });\r\n\r\n                    // ground\t\t\t\t\t\r\n                    ground = new THREE.Mesh( new THREE.PlaneBufferGeometry( 200, 200 ), matGROUND );\r\n\t\t\t\t\tground.rotation.x = -Math.PI/2;\r\n\t\t\t\t\tground.castShadow = true;\r\n\t\t\t\t\tground.receiveShadow = true;\r\n\t\t\t\t\tscene.add( ground );\r\n                    /*\r\n                    obj.traverse( function ( child ) {\r\n                        if ( child.isMesh ) {\r\n                            var geo = child;\r\n                            geo.material = matRoom;                            \r\n                            geo.castShadow = true;\r\n                            scene.add(geo);                  \r\n                        }               \r\n                    });\r\n                    */\r\n                }, onProgress, onError );\r\n            }\r\n            function onProgress( xhr ) {\r\n\t            if ( xhr.lengthComputable ) {\r\n\t                var percentComplete = xhr.loaded / xhr.total * 100;\r\n\t                console.log( 'model ' + Math.round( percentComplete, 2 ) + '% downloaded' );\r\n\t                }\r\n    \t\t}\r\n\r\n\t\t    function onError() {\r\n\t\t            console.log( 'error!!' );\r\n\t\t    }\r\n\t\t\t\t\t\r\n\t\t\t//=============== BUILD ================\r\n\t\t    const scene = buildScene();\r\n\t\t    const renderer = buildRender(screenDimensions);\r\n\t\t    const camera = buildCamera(screenDimensions);\r\n\t\t    const contorls = buildControls(camera);\r\n\t\t\tinit();\r\n\r\n\r\n\t\t\tfunction buildScene() {\r\n\t\t        const scene = new THREE.Scene();\r\n\t\t        scene.background = new THREE.Color('#000');\r\n\t\t        return scene;\r\n\t\t    }\r\n\t\t    \r\n\t\t    function buildRender({ width, height }) {\r\n\t\t        const renderer = new THREE.WebGLRenderer( {canvas: canvas, antialias: true } );\r\n\t\t        renderer.setPixelRatio( window.devicePixelRatio );\r\n\t\t        renderer.setSize( width, height );\r\n\r\n\t\t        //renderer.shadowMap.enabled = true;\r\n\t\t\t\t//renderer.shadowMap.type = THREE.VSMShadowMap;\r\n\t\t\t\t//renderer.setClearColor( 0xCCCCCC, 1 );\r\n\t\t\t\trenderer.physicallyCorrectLights = true;\r\n\t\t\t\trenderer.toneMapping = THREE.LinearToneMapping;\r\n\r\n\t\t\t\t// HDR\r\n\r\n\t\t\t\tTHREE.DefaultLoadingManager.onLoad = function ( ) {\r\n\r\n\t\t\t\t\tpmremGenerator.dispose();\r\n\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\r\n\t\t        // ================= SET HDRI-MATERIAL ======================\r\n\t\t        // Textures\r\n\t\t        /*\r\n\t\t\t\tvar hdrUrls = [ 'px.hdr', 'nx.hdr', 'py.hdr', 'ny.hdr', 'pz.hdr', 'nz.hdr' ];\r\n\t\t\t\ttextureCube = new HDRCubeTextureLoader()\r\n\t\t\t\t\t.setPath( './assets/textures/cube/pisaHDR/' )\r\n\t\t\t\t\t.setDataType( THREE.UnsignedByteType )\r\n\t\t\t\t\t.load( hdrUrls, function () {\r\n\r\n\t\t\t\t\t\thdrCubeRenderTarget = pmremGenerator.fromCubemap( textureCube );\r\n\t\t\t\t\t\ttextureCube.magFilter = THREE.LinearFilter;\r\n\t\t\t\t\t\ttextureCube.needsUpdate = true;\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\tpmremGenerator = new THREE.PMREMGenerator( renderer );\r\n\t\t\t\tpmremGenerator.compileCubemapShader();\r\n\r\n\t\t\t\t*/\r\n\r\n\t\t\t\trenderer.toneMappingExposure = 2;\r\n\t\t        return renderer;\r\n\t\t    }\r\n\r\n\t\t    function buildCamera({ width, height }) {\r\n\r\n\t\t        const camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 0.1, 100 );\r\n\t\t\t\tcamera.position.x = 6;\r\n\t\t\t\tcamera.position.y = 1.5;\r\n\t\t\t\tcamera.position.z = 0;\r\n\t\t\t\tcamera.lookAt(scene);\r\n\t\t        return camera;\r\n\t\t    }\r\n\t\t    function buildControls(camera){\r\n\t\t    \tconst controls = new OrbitControls( camera, renderer.domElement );\r\n\t\t        controls.update();\r\n\t\t        return controls\r\n\t\t    }\r\n\t\t    // GENERATE ENV\r\n\t\t    function buildENV(){\r\n\t\t    \t// create environmet\r\n\t\t    \tvar envScene = new THREE.Scene();\r\n\r\n\t\t    \tvar mainLight = new THREE.PointLight( 0xffffff, 1, 30, 1.6 ); //( color : Integer, intensity : Float, distance : Number, decay : Float )\r\n\t\t    \tmainLight.position.set( 0, 3, 0 );\r\n\t\t    \t//mainLight.shadow = true;\r\n\t\t\t\tenvScene.add( mainLight );\r\n\r\n\t\t\t\tvar geometry = new THREE.BoxBufferGeometry();\r\n\t\t\t\t//geometry.deleteAttribute( 'uv' );\r\n\t\t\t\tvar roomMaterial = new THREE.MeshStandardMaterial( { metalness: 0, side: THREE.BackSide } );\r\n\t\t\t\tvar room = new THREE.Mesh( geometry, roomMaterial );\r\n\t\t\t\troom.scale.setScalar( 10 );\r\n\t\t\t\tenvScene.add( room );\r\n\r\n\t\t\t\tvar lightMaterial = new THREE.MeshLambertMaterial( { color: 0x000000, emissive: 0xffffff, emissiveIntensity: 10 } );\r\n\r\n\t\t\t\tvar light1 = new THREE.Mesh( geometry, lightMaterial );\r\n\t\t\t\tlight1.position.set( - 500, 200, 0 );\r\n\t\t\t\tlight1.scale.set( 0.1, 1, 1 );\r\n\t\t\t\tenvScene.add( light1 );\r\n\r\n\t\t\t\tvar light2 = new THREE.Mesh( geometry, lightMaterial );\r\n\t\t\t\tlight2.position.set( 0, 500, 0 );\r\n\t\t\t\tlight2.scale.set( 1, 0.1, 1 );\r\n\t\t\t\tenvScene.add( light2 );\r\n\r\n\t\t\t\tvar light2 = new THREE.Mesh( geometry, lightMaterial );\r\n\t\t\t\tlight2.position.set( 200, 100, 500 );\r\n\t\t\t\tlight2.scale.set( 1.5, 2, 0.1 );\r\n\t\t\t\tenvScene.add( light2 );\r\n\r\n\t\t\t\t// upload as teture map\r\n\t\t\t\tvar pmremGenerator = new THREE.PMREMGenerator( renderer );\r\n\t\t\t\tpmremGenerator.compileCubemapShader();\r\n\t\t\t\ttextureENV = pmremGenerator.fromScene( envScene, 0.1 );\r\n\r\n\t\t\t\tmatHDR.envMap = textureENV.texture;\r\n\t\t        \r\n\t\t        matROOM.envMap = textureENV.texture;\r\n\t\t        matGROUND.envMap = textureENV.texture;\r\n\r\n\t\t        renderer.outputEncoding = THREE.sRGBEncoding;\r\n\r\n\t\t\t\treturn envScene;\r\n\t\t    }\r\n\r\n\r\n\t\t    function init() {\r\n\r\n\t\t\t\t\r\n\r\n\t\t\t\t// room\r\n\t\t\t\t/*\r\n\t\t\t\tvar materials = [];\r\n\t\t\t\t\r\n\t\t\t\tfor ( var i = 0; i < 8; i ++ ) {\r\n\r\n\t\t\t\t\tmaterials.push( new THREE.MeshBasicMaterial( { color: 0xfaaaaa, side: THREE.BackSide } ) );\r\n\r\n\t\t\t\t}\r\n\t\t\t\tvar geometry = new THREE.BoxBufferGeometry( 3, 3, 3 );\r\n\t\t\t\tvar mesh = new THREE.Mesh( geometry, materials );\r\n\t\t\t\tscene.add( mesh );\r\n\t\t\t\t*/\r\n\t\t\t\t// ================= ROOM ======================\r\n\t\t\t\tnew loadRoom( renderer, scene );\r\n\t\t\t\tbuildENV();\r\n\r\n\t\t\t\t//var material = new THREE.MeshBasicMaterial( { vertexColors: true } );\r\n\t\t\t\tmodel = new THREE.Mesh( new THREE.TorusKnotBufferGeometry( 0.75, 0.3, 128, 32, 1 ), matHDR );\r\n\t\t\t\tmodel.geometry.translate(0,1.5,0);\r\n\t\t\t\tscene.add( model );\r\n\t\t\t\t//new SimpleGI( renderer, scene );\r\n\t\t\t}\r\n\r\n\t\t\tfunction onWindowResize() {\r\n\t\t        const { width, height } = canvas;\t\t        \r\n\t\t        screenDimensions.width = width;\r\n\t\t        screenDimensions.height = height;\r\n\t\t        camera.aspect = width / height;\r\n\t\t        camera.updateProjectionMatrix();\t\t        \r\n\t\t        renderer.setSize(width, height);\r\n\t\t    }\r\n\r\n\t\t\tfunction update() {\r\n\r\n\t\t\t\trequestAnimationFrame( update );\r\n\t\t\t\t//renderer.setRenderTarget( null );\r\n\t\t\t\trenderer.render( scene, camera );\r\n\r\n\t\t\t}\r\n    return {\r\n        update,\r\n        onWindowResize\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}