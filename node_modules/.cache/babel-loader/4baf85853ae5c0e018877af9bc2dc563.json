{"ast":null,"code":"import { Curve } from '../core/Curve.js';\nimport { Vector2 } from '../../math/Vector2.js';\n\nfunction EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n  Curve.call(this);\n  this.type = 'EllipseCurve';\n  this.aX = aX || 0;\n  this.aY = aY || 0;\n  this.xRadius = xRadius || 1;\n  this.yRadius = yRadius || 1;\n  this.aStartAngle = aStartAngle || 0;\n  this.aEndAngle = aEndAngle || 2 * Math.PI;\n  this.aClockwise = aClockwise || false;\n  this.aRotation = aRotation || 0;\n}\n\nEllipseCurve.prototype = Object.create(Curve.prototype);\nEllipseCurve.prototype.constructor = EllipseCurve;\nEllipseCurve.prototype.isEllipseCurve = true;\n\nEllipseCurve.prototype.getPoint = function (t, optionalTarget) {\n  var point = optionalTarget || new Vector2();\n  var twoPi = Math.PI * 2;\n  var deltaAngle = this.aEndAngle - this.aStartAngle;\n  var samePoints = Math.abs(deltaAngle) < Number.EPSILON; // ensures that deltaAngle is 0 .. 2 PI\n\n  while (deltaAngle < 0) deltaAngle += twoPi;\n\n  while (deltaAngle > twoPi) deltaAngle -= twoPi;\n\n  if (deltaAngle < Number.EPSILON) {\n    if (samePoints) {\n      deltaAngle = 0;\n    } else {\n      deltaAngle = twoPi;\n    }\n  }\n\n  if (this.aClockwise === true && !samePoints) {\n    if (deltaAngle === twoPi) {\n      deltaAngle = -twoPi;\n    } else {\n      deltaAngle = deltaAngle - twoPi;\n    }\n  }\n\n  var angle = this.aStartAngle + t * deltaAngle;\n  var x = this.aX + this.xRadius * Math.cos(angle);\n  var y = this.aY + this.yRadius * Math.sin(angle);\n\n  if (this.aRotation !== 0) {\n    var cos = Math.cos(this.aRotation);\n    var sin = Math.sin(this.aRotation);\n    var tx = x - this.aX;\n    var ty = y - this.aY; // Rotate the point about the center of the ellipse.\n\n    x = tx * cos - ty * sin + this.aX;\n    y = tx * sin + ty * cos + this.aY;\n  }\n\n  return point.set(x, y);\n};\n\nEllipseCurve.prototype.copy = function (source) {\n  Curve.prototype.copy.call(this, source);\n  this.aX = source.aX;\n  this.aY = source.aY;\n  this.xRadius = source.xRadius;\n  this.yRadius = source.yRadius;\n  this.aStartAngle = source.aStartAngle;\n  this.aEndAngle = source.aEndAngle;\n  this.aClockwise = source.aClockwise;\n  this.aRotation = source.aRotation;\n  return this;\n};\n\nEllipseCurve.prototype.toJSON = function () {\n  var data = Curve.prototype.toJSON.call(this);\n  data.aX = this.aX;\n  data.aY = this.aY;\n  data.xRadius = this.xRadius;\n  data.yRadius = this.yRadius;\n  data.aStartAngle = this.aStartAngle;\n  data.aEndAngle = this.aEndAngle;\n  data.aClockwise = this.aClockwise;\n  data.aRotation = this.aRotation;\n  return data;\n};\n\nEllipseCurve.prototype.fromJSON = function (json) {\n  Curve.prototype.fromJSON.call(this, json);\n  this.aX = json.aX;\n  this.aY = json.aY;\n  this.xRadius = json.xRadius;\n  this.yRadius = json.yRadius;\n  this.aStartAngle = json.aStartAngle;\n  this.aEndAngle = json.aEndAngle;\n  this.aClockwise = json.aClockwise;\n  this.aRotation = json.aRotation;\n  return this;\n};\n\nexport { EllipseCurve };","map":{"version":3,"sources":["H:/chrlab/src/component/panelComponent/Canvas/threejs/src/extras/curves/EllipseCurve.js"],"names":["Curve","Vector2","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","call","type","Math","PI","prototype","Object","create","constructor","isEllipseCurve","getPoint","t","optionalTarget","point","twoPi","deltaAngle","samePoints","abs","Number","EPSILON","angle","x","cos","y","sin","tx","ty","set","copy","source","toJSON","data","fromJSON","json"],"mappings":"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","sourcesContent":["import { Curve } from '../core/Curve.js';\nimport { Vector2 } from '../../math/Vector2.js';\n\n\nfunction EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'EllipseCurve';\n\n\tthis.aX = aX || 0;\n\tthis.aY = aY || 0;\n\n\tthis.xRadius = xRadius || 1;\n\tthis.yRadius = yRadius || 1;\n\n\tthis.aStartAngle = aStartAngle || 0;\n\tthis.aEndAngle = aEndAngle || 2 * Math.PI;\n\n\tthis.aClockwise = aClockwise || false;\n\n\tthis.aRotation = aRotation || 0;\n\n}\n\nEllipseCurve.prototype = Object.create( Curve.prototype );\nEllipseCurve.prototype.constructor = EllipseCurve;\n\nEllipseCurve.prototype.isEllipseCurve = true;\n\nEllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector2();\n\n\tvar twoPi = Math.PI * 2;\n\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n\t// ensures that deltaAngle is 0 .. 2 PI\n\twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\n\twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\n\n\tif ( deltaAngle < Number.EPSILON ) {\n\n\t\tif ( samePoints ) {\n\n\t\t\tdeltaAngle = 0;\n\n\t\t} else {\n\n\t\t\tdeltaAngle = twoPi;\n\n\t\t}\n\n\t}\n\n\tif ( this.aClockwise === true && ! samePoints ) {\n\n\t\tif ( deltaAngle === twoPi ) {\n\n\t\t\tdeltaAngle = - twoPi;\n\n\t\t} else {\n\n\t\t\tdeltaAngle = deltaAngle - twoPi;\n\n\t\t}\n\n\t}\n\n\tvar angle = this.aStartAngle + t * deltaAngle;\n\tvar x = this.aX + this.xRadius * Math.cos( angle );\n\tvar y = this.aY + this.yRadius * Math.sin( angle );\n\n\tif ( this.aRotation !== 0 ) {\n\n\t\tvar cos = Math.cos( this.aRotation );\n\t\tvar sin = Math.sin( this.aRotation );\n\n\t\tvar tx = x - this.aX;\n\t\tvar ty = y - this.aY;\n\n\t\t// Rotate the point about the center of the ellipse.\n\t\tx = tx * cos - ty * sin + this.aX;\n\t\ty = tx * sin + ty * cos + this.aY;\n\n\t}\n\n\treturn point.set( x, y );\n\n};\n\nEllipseCurve.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.aX = source.aX;\n\tthis.aY = source.aY;\n\n\tthis.xRadius = source.xRadius;\n\tthis.yRadius = source.yRadius;\n\n\tthis.aStartAngle = source.aStartAngle;\n\tthis.aEndAngle = source.aEndAngle;\n\n\tthis.aClockwise = source.aClockwise;\n\n\tthis.aRotation = source.aRotation;\n\n\treturn this;\n\n};\n\n\nEllipseCurve.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.aX = this.aX;\n\tdata.aY = this.aY;\n\n\tdata.xRadius = this.xRadius;\n\tdata.yRadius = this.yRadius;\n\n\tdata.aStartAngle = this.aStartAngle;\n\tdata.aEndAngle = this.aEndAngle;\n\n\tdata.aClockwise = this.aClockwise;\n\n\tdata.aRotation = this.aRotation;\n\n\treturn data;\n\n};\n\nEllipseCurve.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.aX = json.aX;\n\tthis.aY = json.aY;\n\n\tthis.xRadius = json.xRadius;\n\tthis.yRadius = json.yRadius;\n\n\tthis.aStartAngle = json.aStartAngle;\n\tthis.aEndAngle = json.aEndAngle;\n\n\tthis.aClockwise = json.aClockwise;\n\n\tthis.aRotation = json.aRotation;\n\n\treturn this;\n\n};\n\n\nexport { EllipseCurve };\n"]},"metadata":{},"sourceType":"module"}