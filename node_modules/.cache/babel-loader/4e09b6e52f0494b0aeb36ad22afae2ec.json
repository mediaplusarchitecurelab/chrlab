{"ast":null,"code":"/**\n * @author alteredq / http://alteredqualia.com/\n *\n * Film grain & scanlines shader\n *\n * - ported from HLSL to WebGL / GLSL\n * http://www.truevision3d.com/forums/showcase/staticnoise_colorblackwhite_scanline_shaders-t18698.0.html\n *\n * Screen Space Static Postprocessor\n *\n * Produces an analogue noise overlay similar to a film grain / TV static\n *\n * Original implementation and noise algorithm\n * Pat 'Hawthorne' Shearon\n *\n * Optimized scanlines + noise version with intensity scaling\n * Georg 'Leviathan' Steinrohder\n *\n * This version is provided under a Creative Commons Attribution 3.0 License\n * http://creativecommons.org/licenses/by/3.0/\n */\nvar FilmShader = {\n  uniforms: {\n    \"tDiffuse\": {\n      value: null\n    },\n    \"time\": {\n      value: 0.0\n    },\n    \"nIntensity\": {\n      value: 0.5\n    },\n    \"sIntensity\": {\n      value: 0.05\n    },\n    \"sCount\": {\n      value: 4096\n    },\n    \"grayscale\": {\n      value: 1\n    }\n  },\n  vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"\tvUv = uv;\", \"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n  fragmentShader: [\"#include <common>\", // control parameter\n  \"uniform float time;\", \"uniform bool grayscale;\", // noise effect intensity value (0 = no effect, 1 = full effect)\n  \"uniform float nIntensity;\", // scanlines effect intensity value (0 = no effect, 1 = full effect)\n  \"uniform float sIntensity;\", // scanlines effect count value (0 = no effect, 4096 = full effect)\n  \"uniform float sCount;\", \"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"void main() {\", // sample the source\n  \"\tvec4 cTextureScreen = texture2D( tDiffuse, vUv );\", // make some noise\n  \"\tfloat dx = rand( vUv + time );\", // add noise\n  \"\tvec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx, 0.0, 1.0 );\", // get us a sine and cosine\n  \"\tvec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );\", // add scanlines\n  \"\tcResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;\", // interpolate between source and result by intensity\n  \"\tcResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );\", // convert to grayscale if desired\n  \"\tif( grayscale ) {\", \"\t\tcResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );\", \"\t}\", \"\tgl_FragColor =  vec4( cResult, cTextureScreen.a );\", \"}\"].join(\"\\n\")\n};\nexport { FilmShader };","map":{"version":3,"sources":["H:/chrlab/src/component/panelComponent/Canvas/threejs/examples/jsm/shaders/FilmShader.js"],"names":["FilmShader","uniforms","value","vertexShader","join","fragmentShader"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;AAwBA,IAAIA,UAAU,GAAG;AAEhBC,EAAAA,QAAQ,EAAE;AAET,gBAAY;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAFH;AAGT,YAAQ;AAAEA,MAAAA,KAAK,EAAE;AAAT,KAHC;AAIT,kBAAc;AAAEA,MAAAA,KAAK,EAAE;AAAT,KAJL;AAKT,kBAAc;AAAEA,MAAAA,KAAK,EAAE;AAAT,KALL;AAMT,cAAU;AAAEA,MAAAA,KAAK,EAAE;AAAT,KAND;AAOT,iBAAa;AAAEA,MAAAA,KAAK,EAAE;AAAT;AAPJ,GAFM;AAahBC,EAAAA,YAAY,EAAE,CAEb,mBAFa,EAIb,eAJa,EAMb,YANa,EAOb,4EAPa,EASb,GATa,EAWZC,IAXY,CAWN,IAXM,CAbE;AA0BhBC,EAAAA,cAAc,EAAE,CAEf,mBAFe,EAIf;AACA,uBALe,EAOf,yBAPe,EASf;AACA,6BAVe,EAYf;AACA,6BAbe,EAef;AACA,yBAhBe,EAkBf,6BAlBe,EAoBf,mBApBe,EAsBf,eAtBe,EAwBf;AACA,sDAzBe,EA2Bf;AACA,mCA5Be,EA8Bf;AACA,0FA/Be,EAiCf;AACA,oEAlCe,EAoCf;AACA,2EArCe,EAuCf;AACA,oGAxCe,EA0Cf;AACA,sBA3Ce,EA6Cf,4EA7Ce,EA+Cf,IA/Ce,EAiDf,qDAjDe,EAmDf,GAnDe,EAqDdD,IArDc,CAqDR,IArDQ;AA1BA,CAAjB;AAmFA,SAASJ,UAAT","sourcesContent":["/**\n * @author alteredq / http://alteredqualia.com/\n *\n * Film grain & scanlines shader\n *\n * - ported from HLSL to WebGL / GLSL\n * http://www.truevision3d.com/forums/showcase/staticnoise_colorblackwhite_scanline_shaders-t18698.0.html\n *\n * Screen Space Static Postprocessor\n *\n * Produces an analogue noise overlay similar to a film grain / TV static\n *\n * Original implementation and noise algorithm\n * Pat 'Hawthorne' Shearon\n *\n * Optimized scanlines + noise version with intensity scaling\n * Georg 'Leviathan' Steinrohder\n *\n * This version is provided under a Creative Commons Attribution 3.0 License\n * http://creativecommons.org/licenses/by/3.0/\n */\n\n\n\nvar FilmShader = {\n\n\tuniforms: {\n\n\t\t\"tDiffuse\": { value: null },\n\t\t\"time\": { value: 0.0 },\n\t\t\"nIntensity\": { value: 0.5 },\n\t\t\"sIntensity\": { value: 0.05 },\n\t\t\"sCount\": { value: 4096 },\n\t\t\"grayscale\": { value: 1 }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvUv = uv;\",\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"#include <common>\",\n\n\t\t// control parameter\n\t\t\"uniform float time;\",\n\n\t\t\"uniform bool grayscale;\",\n\n\t\t// noise effect intensity value (0 = no effect, 1 = full effect)\n\t\t\"uniform float nIntensity;\",\n\n\t\t// scanlines effect intensity value (0 = no effect, 1 = full effect)\n\t\t\"uniform float sIntensity;\",\n\n\t\t// scanlines effect count value (0 = no effect, 4096 = full effect)\n\t\t\"uniform float sCount;\",\n\n\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t// sample the source\n\t\t\"\tvec4 cTextureScreen = texture2D( tDiffuse, vUv );\",\n\n\t\t// make some noise\n\t\t\"\tfloat dx = rand( vUv + time );\",\n\n\t\t// add noise\n\t\t\"\tvec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx, 0.0, 1.0 );\",\n\n\t\t// get us a sine and cosine\n\t\t\"\tvec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );\",\n\n\t\t// add scanlines\n\t\t\"\tcResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;\",\n\n\t\t// interpolate between source and result by intensity\n\t\t\"\tcResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );\",\n\n\t\t// convert to grayscale if desired\n\t\t\"\tif( grayscale ) {\",\n\n\t\t\"\t\tcResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );\",\n\n\t\t\"\t}\",\n\n\t\t\"\tgl_FragColor =  vec4( cResult, cTextureScreen.a );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n\n};\n\nexport { FilmShader };\n"]},"metadata":{},"sourceType":"module"}