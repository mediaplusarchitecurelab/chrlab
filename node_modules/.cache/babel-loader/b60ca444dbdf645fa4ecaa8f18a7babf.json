{"ast":null,"code":"import { Curve } from '../core/Curve.js';\nimport { CubicBezier } from '../core/Interpolations.js';\nimport { Vector3 } from '../../math/Vector3.js';\n\nfunction CubicBezierCurve3(v0, v1, v2, v3) {\n  Curve.call(this);\n  this.type = 'CubicBezierCurve3';\n  this.v0 = v0 || new Vector3();\n  this.v1 = v1 || new Vector3();\n  this.v2 = v2 || new Vector3();\n  this.v3 = v3 || new Vector3();\n}\n\nCubicBezierCurve3.prototype = Object.create(Curve.prototype);\nCubicBezierCurve3.prototype.constructor = CubicBezierCurve3;\nCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\nCubicBezierCurve3.prototype.getPoint = function (t, optionalTarget) {\n  var point = optionalTarget || new Vector3();\n  var v0 = this.v0,\n      v1 = this.v1,\n      v2 = this.v2,\n      v3 = this.v3;\n  point.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y), CubicBezier(t, v0.z, v1.z, v2.z, v3.z));\n  return point;\n};\n\nCubicBezierCurve3.prototype.copy = function (source) {\n  Curve.prototype.copy.call(this, source);\n  this.v0.copy(source.v0);\n  this.v1.copy(source.v1);\n  this.v2.copy(source.v2);\n  this.v3.copy(source.v3);\n  return this;\n};\n\nCubicBezierCurve3.prototype.toJSON = function () {\n  var data = Curve.prototype.toJSON.call(this);\n  data.v0 = this.v0.toArray();\n  data.v1 = this.v1.toArray();\n  data.v2 = this.v2.toArray();\n  data.v3 = this.v3.toArray();\n  return data;\n};\n\nCubicBezierCurve3.prototype.fromJSON = function (json) {\n  Curve.prototype.fromJSON.call(this, json);\n  this.v0.fromArray(json.v0);\n  this.v1.fromArray(json.v1);\n  this.v2.fromArray(json.v2);\n  this.v3.fromArray(json.v3);\n  return this;\n};\n\nexport { CubicBezierCurve3 };","map":{"version":3,"sources":["D:/chrlab/src/component/panelComponent/Canvas/threejs/src/extras/curves/CubicBezierCurve3.js"],"names":["Curve","CubicBezier","Vector3","CubicBezierCurve3","v0","v1","v2","v3","call","type","prototype","Object","create","constructor","isCubicBezierCurve3","getPoint","t","optionalTarget","point","set","x","y","z","copy","source","toJSON","data","toArray","fromJSON","json","fromArray"],"mappings":"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","sourcesContent":["import { Curve } from '../core/Curve.js';\nimport { CubicBezier } from '../core/Interpolations.js';\nimport { Vector3 } from '../../math/Vector3.js';\n\n\nfunction CubicBezierCurve3( v0, v1, v2, v3 ) {\n\n\tCurve.call( this );\n\n\tthis.type = 'CubicBezierCurve3';\n\n\tthis.v0 = v0 || new Vector3();\n\tthis.v1 = v1 || new Vector3();\n\tthis.v2 = v2 || new Vector3();\n\tthis.v3 = v3 || new Vector3();\n\n}\n\nCubicBezierCurve3.prototype = Object.create( Curve.prototype );\nCubicBezierCurve3.prototype.constructor = CubicBezierCurve3;\n\nCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\nCubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\n\n\tvar point = optionalTarget || new Vector3();\n\n\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\tpoint.set(\n\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\n\t\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\n\t);\n\n\treturn point;\n\n};\n\nCubicBezierCurve3.prototype.copy = function ( source ) {\n\n\tCurve.prototype.copy.call( this, source );\n\n\tthis.v0.copy( source.v0 );\n\tthis.v1.copy( source.v1 );\n\tthis.v2.copy( source.v2 );\n\tthis.v3.copy( source.v3 );\n\n\treturn this;\n\n};\n\nCubicBezierCurve3.prototype.toJSON = function () {\n\n\tvar data = Curve.prototype.toJSON.call( this );\n\n\tdata.v0 = this.v0.toArray();\n\tdata.v1 = this.v1.toArray();\n\tdata.v2 = this.v2.toArray();\n\tdata.v3 = this.v3.toArray();\n\n\treturn data;\n\n};\n\nCubicBezierCurve3.prototype.fromJSON = function ( json ) {\n\n\tCurve.prototype.fromJSON.call( this, json );\n\n\tthis.v0.fromArray( json.v0 );\n\tthis.v1.fromArray( json.v1 );\n\tthis.v2.fromArray( json.v2 );\n\tthis.v3.fromArray( json.v3 );\n\n\treturn this;\n\n};\n\n\nexport { CubicBezierCurve3 };\n"]},"metadata":{},"sourceType":"module"}