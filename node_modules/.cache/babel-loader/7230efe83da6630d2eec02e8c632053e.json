{"ast":null,"code":"import { Color } from '../math/Color.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { Vector4 } from '../math/Vector4.js';\nimport { Matrix3 } from '../math/Matrix3.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { FileLoader } from './FileLoader.js';\nimport { Loader } from './Loader.js';\nimport * as Materials from '../materials/Materials.js';\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction MaterialLoader(manager) {\n  Loader.call(this, manager);\n  this.textures = {};\n}\n\nMaterialLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: MaterialLoader,\n  load: function (url, onLoad, onProgress, onError) {\n    var scope = this;\n    var loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.load(url, function (text) {\n      onLoad(scope.parse(JSON.parse(text)));\n    }, onProgress, onError);\n  },\n  parse: function (json) {\n    var textures = this.textures;\n\n    function getTexture(name) {\n      if (textures[name] === undefined) {\n        console.warn('THREE.MaterialLoader: Undefined texture', name);\n      }\n\n      return textures[name];\n    }\n\n    var material = new Materials[json.type]();\n    if (json.uuid !== undefined) material.uuid = json.uuid;\n    if (json.name !== undefined) material.name = json.name;\n    if (json.color !== undefined) material.color.setHex(json.color);\n    if (json.roughness !== undefined) material.roughness = json.roughness;\n    if (json.metalness !== undefined) material.metalness = json.metalness;\n    if (json.sheen !== undefined) material.sheen = new Color().setHex(json.sheen);\n    if (json.emissive !== undefined) material.emissive.setHex(json.emissive);\n    if (json.specular !== undefined) material.specular.setHex(json.specular);\n    if (json.shininess !== undefined) material.shininess = json.shininess;\n    if (json.clearcoat !== undefined) material.clearcoat = json.clearcoat;\n    if (json.clearcoatRoughness !== undefined) material.clearcoatRoughness = json.clearcoatRoughness;\n    if (json.fog !== undefined) material.fog = json.fog;\n    if (json.flatShading !== undefined) material.flatShading = json.flatShading;\n    if (json.blending !== undefined) material.blending = json.blending;\n    if (json.combine !== undefined) material.combine = json.combine;\n    if (json.side !== undefined) material.side = json.side;\n    if (json.opacity !== undefined) material.opacity = json.opacity;\n    if (json.transparent !== undefined) material.transparent = json.transparent;\n    if (json.alphaTest !== undefined) material.alphaTest = json.alphaTest;\n    if (json.depthTest !== undefined) material.depthTest = json.depthTest;\n    if (json.depthWrite !== undefined) material.depthWrite = json.depthWrite;\n    if (json.colorWrite !== undefined) material.colorWrite = json.colorWrite;\n    if (json.stencilWrite !== undefined) material.stencilWrite = json.stencilWrite;\n    if (json.stencilWriteMask !== undefined) material.stencilWriteMask = json.stencilWriteMask;\n    if (json.stencilFunc !== undefined) material.stencilFunc = json.stencilFunc;\n    if (json.stencilRef !== undefined) material.stencilRef = json.stencilRef;\n    if (json.stencilFuncMask !== undefined) material.stencilFuncMask = json.stencilFuncMask;\n    if (json.stencilFail !== undefined) material.stencilFail = json.stencilFail;\n    if (json.stencilZFail !== undefined) material.stencilZFail = json.stencilZFail;\n    if (json.stencilZPass !== undefined) material.stencilZPass = json.stencilZPass;\n    if (json.wireframe !== undefined) material.wireframe = json.wireframe;\n    if (json.wireframeLinewidth !== undefined) material.wireframeLinewidth = json.wireframeLinewidth;\n    if (json.wireframeLinecap !== undefined) material.wireframeLinecap = json.wireframeLinecap;\n    if (json.wireframeLinejoin !== undefined) material.wireframeLinejoin = json.wireframeLinejoin;\n    if (json.rotation !== undefined) material.rotation = json.rotation;\n    if (json.linewidth !== 1) material.linewidth = json.linewidth;\n    if (json.dashSize !== undefined) material.dashSize = json.dashSize;\n    if (json.gapSize !== undefined) material.gapSize = json.gapSize;\n    if (json.scale !== undefined) material.scale = json.scale;\n    if (json.polygonOffset !== undefined) material.polygonOffset = json.polygonOffset;\n    if (json.polygonOffsetFactor !== undefined) material.polygonOffsetFactor = json.polygonOffsetFactor;\n    if (json.polygonOffsetUnits !== undefined) material.polygonOffsetUnits = json.polygonOffsetUnits;\n    if (json.skinning !== undefined) material.skinning = json.skinning;\n    if (json.morphTargets !== undefined) material.morphTargets = json.morphTargets;\n    if (json.morphNormals !== undefined) material.morphNormals = json.morphNormals;\n    if (json.dithering !== undefined) material.dithering = json.dithering;\n    if (json.vertexTangents !== undefined) material.vertexTangents = json.vertexTangents;\n    if (json.visible !== undefined) material.visible = json.visible;\n    if (json.toneMapped !== undefined) material.toneMapped = json.toneMapped;\n    if (json.userData !== undefined) material.userData = json.userData;\n\n    if (json.vertexColors !== undefined) {\n      if (typeof json.vertexColors === 'number') {\n        material.vertexColors = json.vertexColors > 0 ? true : false;\n      } else {\n        material.vertexColors = json.vertexColors;\n      }\n    } // Shader Material\n\n\n    if (json.uniforms !== undefined) {\n      for (var name in json.uniforms) {\n        var uniform = json.uniforms[name];\n        material.uniforms[name] = {};\n\n        switch (uniform.type) {\n          case 't':\n            material.uniforms[name].value = getTexture(uniform.value);\n            break;\n\n          case 'c':\n            material.uniforms[name].value = new Color().setHex(uniform.value);\n            break;\n\n          case 'v2':\n            material.uniforms[name].value = new Vector2().fromArray(uniform.value);\n            break;\n\n          case 'v3':\n            material.uniforms[name].value = new Vector3().fromArray(uniform.value);\n            break;\n\n          case 'v4':\n            material.uniforms[name].value = new Vector4().fromArray(uniform.value);\n            break;\n\n          case 'm3':\n            material.uniforms[name].value = new Matrix3().fromArray(uniform.value);\n\n          case 'm4':\n            material.uniforms[name].value = new Matrix4().fromArray(uniform.value);\n            break;\n\n          default:\n            material.uniforms[name].value = uniform.value;\n        }\n      }\n    }\n\n    if (json.defines !== undefined) material.defines = json.defines;\n    if (json.vertexShader !== undefined) material.vertexShader = json.vertexShader;\n    if (json.fragmentShader !== undefined) material.fragmentShader = json.fragmentShader;\n\n    if (json.extensions !== undefined) {\n      for (var key in json.extensions) {\n        material.extensions[key] = json.extensions[key];\n      }\n    } // Deprecated\n\n\n    if (json.shading !== undefined) material.flatShading = json.shading === 1; // THREE.FlatShading\n    // for PointsMaterial\n\n    if (json.size !== undefined) material.size = json.size;\n    if (json.sizeAttenuation !== undefined) material.sizeAttenuation = json.sizeAttenuation; // maps\n\n    if (json.map !== undefined) material.map = getTexture(json.map);\n    if (json.matcap !== undefined) material.matcap = getTexture(json.matcap);\n    if (json.alphaMap !== undefined) material.alphaMap = getTexture(json.alphaMap);\n    if (json.bumpMap !== undefined) material.bumpMap = getTexture(json.bumpMap);\n    if (json.bumpScale !== undefined) material.bumpScale = json.bumpScale;\n    if (json.normalMap !== undefined) material.normalMap = getTexture(json.normalMap);\n    if (json.normalMapType !== undefined) material.normalMapType = json.normalMapType;\n\n    if (json.normalScale !== undefined) {\n      var normalScale = json.normalScale;\n\n      if (Array.isArray(normalScale) === false) {\n        // Blender exporter used to export a scalar. See #7459\n        normalScale = [normalScale, normalScale];\n      }\n\n      material.normalScale = new Vector2().fromArray(normalScale);\n    }\n\n    if (json.displacementMap !== undefined) material.displacementMap = getTexture(json.displacementMap);\n    if (json.displacementScale !== undefined) material.displacementScale = json.displacementScale;\n    if (json.displacementBias !== undefined) material.displacementBias = json.displacementBias;\n    if (json.roughnessMap !== undefined) material.roughnessMap = getTexture(json.roughnessMap);\n    if (json.metalnessMap !== undefined) material.metalnessMap = getTexture(json.metalnessMap);\n    if (json.emissiveMap !== undefined) material.emissiveMap = getTexture(json.emissiveMap);\n    if (json.emissiveIntensity !== undefined) material.emissiveIntensity = json.emissiveIntensity;\n    if (json.specularMap !== undefined) material.specularMap = getTexture(json.specularMap);\n    if (json.envMap !== undefined) material.envMap = getTexture(json.envMap);\n    if (json.envMapIntensity !== undefined) material.envMapIntensity = json.envMapIntensity;\n    if (json.reflectivity !== undefined) material.reflectivity = json.reflectivity;\n    if (json.refractionRatio !== undefined) material.refractionRatio = json.refractionRatio;\n    if (json.lightMap !== undefined) material.lightMap = getTexture(json.lightMap);\n    if (json.lightMapIntensity !== undefined) material.lightMapIntensity = json.lightMapIntensity;\n    if (json.aoMap !== undefined) material.aoMap = getTexture(json.aoMap);\n    if (json.aoMapIntensity !== undefined) material.aoMapIntensity = json.aoMapIntensity;\n    if (json.gradientMap !== undefined) material.gradientMap = getTexture(json.gradientMap);\n    if (json.clearcoatMap !== undefined) material.clearcoatMap = getTexture(json.clearcoatMap);\n    if (json.clearcoatRoughnessMap !== undefined) material.clearcoatRoughnessMap = getTexture(json.clearcoatRoughnessMap);\n    if (json.clearcoatNormalMap !== undefined) material.clearcoatNormalMap = getTexture(json.clearcoatNormalMap);\n    if (json.clearcoatNormalScale !== undefined) material.clearcoatNormalScale = new Vector2().fromArray(json.clearcoatNormalScale);\n    return material;\n  },\n  setTextures: function (value) {\n    this.textures = value;\n    return this;\n  }\n});\nexport { MaterialLoader };","map":{"version":3,"sources":["H:/chrlab/src/component/panelComponent/Canvas/threejs/src/loaders/MaterialLoader.js"],"names":["Color","Vector2","Vector3","Vector4","Matrix3","Matrix4","FileLoader","Loader","Materials","MaterialLoader","manager","call","textures","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","text","parse","JSON","json","getTexture","name","undefined","console","warn","material","type","uuid","color","setHex","roughness","metalness","sheen","emissive","specular","shininess","clearcoat","clearcoatRoughness","fog","flatShading","blending","combine","side","opacity","transparent","alphaTest","depthTest","depthWrite","colorWrite","stencilWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","rotation","linewidth","dashSize","gapSize","scale","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","skinning","morphTargets","morphNormals","dithering","vertexTangents","visible","toneMapped","userData","vertexColors","uniforms","uniform","value","fromArray","defines","vertexShader","fragmentShader","extensions","key","shading","size","sizeAttenuation","map","matcap","alphaMap","bumpMap","bumpScale","normalMap","normalMapType","normalScale","Array","isArray","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","emissiveIntensity","specularMap","envMap","envMapIntensity","reflectivity","refractionRatio","lightMap","lightMapIntensity","aoMap","aoMapIntensity","gradientMap","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","clearcoatNormalScale","setTextures"],"mappings":"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","sourcesContent":["import { Color } from '../math/Color.js';\nimport { Vector2 } from '../math/Vector2.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { Vector4 } from '../math/Vector4.js';\nimport { Matrix3 } from '../math/Matrix3.js';\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { FileLoader } from './FileLoader.js';\nimport { Loader } from './Loader.js';\nimport * as Materials from '../materials/Materials.js';\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction MaterialLoader( manager ) {\n\n\tLoader.call( this, manager );\n\n\tthis.textures = {};\n\n}\n\nMaterialLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: MaterialLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tparse: function ( json ) {\n\n\t\tvar textures = this.textures;\n\n\t\tfunction getTexture( name ) {\n\n\t\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t\t}\n\n\t\t\treturn textures[ name ];\n\n\t\t}\n\n\t\tvar material = new Materials[ json.type ]();\n\n\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n\t\tif ( json.name !== undefined ) material.name = json.name;\n\t\tif ( json.color !== undefined ) material.color.setHex( json.color );\n\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n\t\tif ( json.sheen !== undefined ) material.sheen = new Color().setHex( json.sheen );\n\t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\n\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t\tif ( json.clearcoat !== undefined ) material.clearcoat = json.clearcoat;\n\t\tif ( json.clearcoatRoughness !== undefined ) material.clearcoatRoughness = json.clearcoatRoughness;\n\t\tif ( json.fog !== undefined ) material.fog = json.fog;\n\t\tif ( json.flatShading !== undefined ) material.flatShading = json.flatShading;\n\t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t\tif ( json.combine !== undefined ) material.combine = json.combine;\n\t\tif ( json.side !== undefined ) material.side = json.side;\n\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n\n\t\tif ( json.stencilWrite !== undefined ) material.stencilWrite = json.stencilWrite;\n\t\tif ( json.stencilWriteMask !== undefined ) material.stencilWriteMask = json.stencilWriteMask;\n\t\tif ( json.stencilFunc !== undefined ) material.stencilFunc = json.stencilFunc;\n\t\tif ( json.stencilRef !== undefined ) material.stencilRef = json.stencilRef;\n\t\tif ( json.stencilFuncMask !== undefined ) material.stencilFuncMask = json.stencilFuncMask;\n\t\tif ( json.stencilFail !== undefined ) material.stencilFail = json.stencilFail;\n\t\tif ( json.stencilZFail !== undefined ) material.stencilZFail = json.stencilZFail;\n\t\tif ( json.stencilZPass !== undefined ) material.stencilZPass = json.stencilZPass;\n\n\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\n\t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\n\n\t\tif ( json.rotation !== undefined ) material.rotation = json.rotation;\n\n\t\tif ( json.linewidth !== 1 ) material.linewidth = json.linewidth;\n\t\tif ( json.dashSize !== undefined ) material.dashSize = json.dashSize;\n\t\tif ( json.gapSize !== undefined ) material.gapSize = json.gapSize;\n\t\tif ( json.scale !== undefined ) material.scale = json.scale;\n\n\t\tif ( json.polygonOffset !== undefined ) material.polygonOffset = json.polygonOffset;\n\t\tif ( json.polygonOffsetFactor !== undefined ) material.polygonOffsetFactor = json.polygonOffsetFactor;\n\t\tif ( json.polygonOffsetUnits !== undefined ) material.polygonOffsetUnits = json.polygonOffsetUnits;\n\n\t\tif ( json.skinning !== undefined ) material.skinning = json.skinning;\n\t\tif ( json.morphTargets !== undefined ) material.morphTargets = json.morphTargets;\n\t\tif ( json.morphNormals !== undefined ) material.morphNormals = json.morphNormals;\n\t\tif ( json.dithering !== undefined ) material.dithering = json.dithering;\n\n\t\tif ( json.vertexTangents !== undefined ) material.vertexTangents = json.vertexTangents;\n\n\t\tif ( json.visible !== undefined ) material.visible = json.visible;\n\n\t\tif ( json.toneMapped !== undefined ) material.toneMapped = json.toneMapped;\n\n\t\tif ( json.userData !== undefined ) material.userData = json.userData;\n\n\t\tif ( json.vertexColors !== undefined ) {\n\n\t\t\tif ( typeof json.vertexColors === 'number' ) {\n\n\t\t\t\tmaterial.vertexColors = ( json.vertexColors > 0 ) ? true : false;\n\n\t\t\t} else {\n\n\t\t\t\tmaterial.vertexColors = json.vertexColors;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Shader Material\n\n\t\tif ( json.uniforms !== undefined ) {\n\n\t\t\tfor ( var name in json.uniforms ) {\n\n\t\t\t\tvar uniform = json.uniforms[ name ];\n\n\t\t\t\tmaterial.uniforms[ name ] = {};\n\n\t\t\t\tswitch ( uniform.type ) {\n\n\t\t\t\t\tcase 't':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = getTexture( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'c':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Color().setHex( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector2().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector3().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector4().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );\n\n\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = uniform.value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json.defines !== undefined ) material.defines = json.defines;\n\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n\n\t\tif ( json.extensions !== undefined ) {\n\n\t\t\tfor ( var key in json.extensions ) {\n\n\t\t\t\tmaterial.extensions[ key ] = json.extensions[ key ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Deprecated\n\n\t\tif ( json.shading !== undefined ) material.flatShading = json.shading === 1; // THREE.FlatShading\n\n\t\t// for PointsMaterial\n\n\t\tif ( json.size !== undefined ) material.size = json.size;\n\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\n\t\t// maps\n\n\t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\n\t\tif ( json.matcap !== undefined ) material.matcap = getTexture( json.matcap );\n\n\t\tif ( json.alphaMap !== undefined ) material.alphaMap = getTexture( json.alphaMap );\n\n\t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\n\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\n\t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\n\t\tif ( json.normalMapType !== undefined ) material.normalMapType = json.normalMapType;\n\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\tvar normalScale = json.normalScale;\n\n\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t}\n\n\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n\t\t}\n\n\t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\n\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\n\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\n\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\n\n\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\n\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\n\t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\n\n\t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\n\t\tif ( json.envMapIntensity !== undefined ) material.envMapIntensity = json.envMapIntensity;\n\n\t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\t\tif ( json.refractionRatio !== undefined ) material.refractionRatio = json.refractionRatio;\n\n\t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\n\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\n\t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\n\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\n\t\tif ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );\n\n\t\tif ( json.clearcoatMap !== undefined ) material.clearcoatMap = getTexture( json.clearcoatMap );\n\t\tif ( json.clearcoatRoughnessMap !== undefined ) material.clearcoatRoughnessMap = getTexture( json.clearcoatRoughnessMap );\n\t\tif ( json.clearcoatNormalMap !== undefined ) material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap );\n\t\tif ( json.clearcoatNormalScale !== undefined ) material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale );\n\n\t\treturn material;\n\n\t},\n\n\tsetTextures: function ( value ) {\n\n\t\tthis.textures = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n\nexport { MaterialLoader };\n"]},"metadata":{},"sourceType":"module"}