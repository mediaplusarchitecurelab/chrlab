{"ast":null,"code":"/**\n* @author Prashant Sharma / spidersharma03\n* @author Ben Houston / http://clara.io / bhouston\n*/\nimport { CubeTexture, DataTexture, FileLoader, FloatType, HalfFloatType, LinearEncoding, LinearFilter, Loader, NearestFilter, RGBAFormat, RGBEEncoding, RGBFormat, UnsignedByteType } from \"../../../build/three.module.js\";\nimport { RGBELoader } from \"../loaders/RGBELoader.js\";\n\nvar HDRCubeTextureLoader = function (manager) {\n  Loader.call(this, manager);\n  this.hdrLoader = new RGBELoader();\n  this.type = UnsignedByteType;\n};\n\nHDRCubeTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: HDRCubeTextureLoader,\n  load: function (urls, onLoad, onProgress, onError) {\n    if (!Array.isArray(urls)) {\n      console.warn('THREE.HDRCubeTextureLoader signature has changed. Use .setDataType() instead.');\n      this.setDataType(urls);\n      urls = onLoad;\n      onLoad = onProgress;\n      onProgress = onError;\n      onError = arguments[4];\n    }\n\n    var texture = new CubeTexture();\n    texture.type = this.type;\n\n    switch (texture.type) {\n      case UnsignedByteType:\n        texture.encoding = RGBEEncoding;\n        texture.format = RGBAFormat;\n        texture.minFilter = NearestFilter;\n        texture.magFilter = NearestFilter;\n        texture.generateMipmaps = false;\n        break;\n\n      case FloatType:\n        texture.encoding = LinearEncoding;\n        texture.format = RGBFormat;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n\n      case HalfFloatType:\n        texture.encoding = LinearEncoding;\n        texture.format = RGBFormat;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n    }\n\n    var scope = this;\n    var loaded = 0;\n\n    function loadHDRData(i, onLoad, onProgress, onError) {\n      new FileLoader(scope.manager).setPath(scope.path).setResponseType('arraybuffer').load(urls[i], function (buffer) {\n        loaded++;\n        var texData = scope.hdrLoader.parse(buffer);\n        if (!texData) return;\n\n        if (texData.data !== undefined) {\n          var dataTexture = new DataTexture(texData.data, texData.width, texData.height);\n          dataTexture.type = texture.type;\n          dataTexture.encoding = texture.encoding;\n          dataTexture.format = texture.format;\n          dataTexture.minFilter = texture.minFilter;\n          dataTexture.magFilter = texture.magFilter;\n          dataTexture.generateMipmaps = texture.generateMipmaps;\n          texture.images[i] = dataTexture;\n        }\n\n        if (loaded === 6) {\n          texture.needsUpdate = true;\n          if (onLoad) onLoad(texture);\n        }\n      }, onProgress, onError);\n    }\n\n    for (var i = 0; i < urls.length; i++) {\n      loadHDRData(i, onLoad, onProgress, onError);\n    }\n\n    return texture;\n  },\n  setDataType: function (value) {\n    this.type = value;\n    this.hdrLoader.setDataType(value);\n    return this;\n  }\n});\nexport { HDRCubeTextureLoader };","map":{"version":3,"sources":["H:/chrlab/src/component/panelComponent/Canvas/threejs/examples/jsm/loaders/HDRCubeTextureLoader.js"],"names":["CubeTexture","DataTexture","FileLoader","FloatType","HalfFloatType","LinearEncoding","LinearFilter","Loader","NearestFilter","RGBAFormat","RGBEEncoding","RGBFormat","UnsignedByteType","RGBELoader","HDRCubeTextureLoader","manager","call","hdrLoader","type","prototype","Object","assign","create","constructor","load","urls","onLoad","onProgress","onError","Array","isArray","console","warn","setDataType","arguments","texture","encoding","format","minFilter","magFilter","generateMipmaps","scope","loaded","loadHDRData","i","setPath","path","setResponseType","buffer","texData","parse","data","undefined","dataTexture","width","height","images","needsUpdate","length","value"],"mappings":"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","sourcesContent":["/**\n* @author Prashant Sharma / spidersharma03\n* @author Ben Houston / http://clara.io / bhouston\n*/\n\nimport {\n\tCubeTexture,\n\tDataTexture,\n\tFileLoader,\n\tFloatType,\n\tHalfFloatType,\n\tLinearEncoding,\n\tLinearFilter,\n\tLoader,\n\tNearestFilter,\n\tRGBAFormat,\n\tRGBEEncoding,\n\tRGBFormat,\n\tUnsignedByteType\n} from \"../../../build/three.module.js\";\nimport { RGBELoader } from \"../loaders/RGBELoader.js\";\n\nvar HDRCubeTextureLoader = function ( manager ) {\n\n\tLoader.call( this, manager );\n\n\tthis.hdrLoader = new RGBELoader();\n\tthis.type = UnsignedByteType;\n\n};\n\nHDRCubeTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: HDRCubeTextureLoader,\n\n\tload: function ( urls, onLoad, onProgress, onError ) {\n\n\t\tif ( ! Array.isArray( urls ) ) {\n\n\t\t\tconsole.warn( 'THREE.HDRCubeTextureLoader signature has changed. Use .setDataType() instead.' );\n\n\t\t\tthis.setDataType( urls );\n\n\t\t\turls = onLoad;\n\t\t\tonLoad = onProgress;\n\t\t\tonProgress = onError;\n\t\t\tonError = arguments[ 4 ];\n\n\t\t}\n\n\t\tvar texture = new CubeTexture();\n\n\t\ttexture.type = this.type;\n\n\t\tswitch ( texture.type ) {\n\n\t\t\tcase UnsignedByteType:\n\n\t\t\t\ttexture.encoding = RGBEEncoding;\n\t\t\t\ttexture.format = RGBAFormat;\n\t\t\t\ttexture.minFilter = NearestFilter;\n\t\t\t\ttexture.magFilter = NearestFilter;\n\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\tbreak;\n\n\t\t\tcase FloatType:\n\n\t\t\t\ttexture.encoding = LinearEncoding;\n\t\t\t\ttexture.format = RGBFormat;\n\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\tbreak;\n\n\t\t\tcase HalfFloatType:\n\n\t\t\t\ttexture.encoding = LinearEncoding;\n\t\t\t\ttexture.format = RGBFormat;\n\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tvar scope = this;\n\n\t\tvar loaded = 0;\n\n\t\tfunction loadHDRData( i, onLoad, onProgress, onError ) {\n\n\t\t\tnew FileLoader( scope.manager )\n\t\t\t\t.setPath( scope.path )\n\t\t\t\t.setResponseType( 'arraybuffer' )\n\t\t\t\t.load( urls[ i ], function ( buffer ) {\n\n\t\t\t\t\tloaded ++;\n\n\t\t\t\t\tvar texData = scope.hdrLoader.parse( buffer );\n\n\t\t\t\t\tif ( ! texData ) return;\n\n\t\t\t\t\tif ( texData.data !== undefined ) {\n\n\t\t\t\t\t\tvar dataTexture = new DataTexture( texData.data, texData.width, texData.height );\n\n\t\t\t\t\t\tdataTexture.type = texture.type;\n\t\t\t\t\t\tdataTexture.encoding = texture.encoding;\n\t\t\t\t\t\tdataTexture.format = texture.format;\n\t\t\t\t\t\tdataTexture.minFilter = texture.minFilter;\n\t\t\t\t\t\tdataTexture.magFilter = texture.magFilter;\n\t\t\t\t\t\tdataTexture.generateMipmaps = texture.generateMipmaps;\n\n\t\t\t\t\t\ttexture.images[ i ] = dataTexture;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t\t}\n\n\t\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < urls.length; i ++ ) {\n\n\t\t\tloadHDRData( i, onLoad, onProgress, onError );\n\n\t\t}\n\n\t\treturn texture;\n\n\t},\n\n\tsetDataType: function ( value ) {\n\n\t\tthis.type = value;\n\t\tthis.hdrLoader.setDataType( value );\n\n\t\treturn this;\n\n\t}\n\n} );\n\nexport { HDRCubeTextureLoader };\n"]},"metadata":{},"sourceType":"module"}