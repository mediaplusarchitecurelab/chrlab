{"ast":null,"code":"/**\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n * @author WestLangley / http://github.com/WestLangley\n*/\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { Object3D } from '../core/Object3D.js';\nimport { Vector3 } from '../math/Vector3.js';\n\nfunction Camera() {\n  Object3D.call(this);\n  this.type = 'Camera';\n  this.matrixWorldInverse = new Matrix4();\n  this.projectionMatrix = new Matrix4();\n  this.projectionMatrixInverse = new Matrix4();\n}\n\nCamera.prototype = Object.assign(Object.create(Object3D.prototype), {\n  constructor: Camera,\n  isCamera: true,\n  copy: function (source, recursive) {\n    Object3D.prototype.copy.call(this, source, recursive);\n    this.matrixWorldInverse.copy(source.matrixWorldInverse);\n    this.projectionMatrix.copy(source.projectionMatrix);\n    this.projectionMatrixInverse.copy(source.projectionMatrixInverse);\n    return this;\n  },\n  getWorldDirection: function (target) {\n    if (target === undefined) {\n      console.warn('THREE.Camera: .getWorldDirection() target is now required');\n      target = new Vector3();\n    }\n\n    this.updateMatrixWorld(true);\n    var e = this.matrixWorld.elements;\n    return target.set(-e[8], -e[9], -e[10]).normalize();\n  },\n  updateMatrixWorld: function (force) {\n    Object3D.prototype.updateMatrixWorld.call(this, force);\n    this.matrixWorldInverse.getInverse(this.matrixWorld);\n  },\n  updateWorldMatrix: function (updateParents, updateChildren) {\n    Object3D.prototype.updateWorldMatrix.call(this, updateParents, updateChildren);\n    this.matrixWorldInverse.getInverse(this.matrixWorld);\n  },\n  clone: function () {\n    return new this.constructor().copy(this);\n  }\n});\nexport { Camera };","map":{"version":3,"sources":["H:/chrlab/src/component/panelComponent/Canvas/threejs/src/cameras/Camera.js"],"names":["Matrix4","Object3D","Vector3","Camera","call","type","matrixWorldInverse","projectionMatrix","projectionMatrixInverse","prototype","Object","assign","create","constructor","isCamera","copy","source","recursive","getWorldDirection","target","undefined","console","warn","updateMatrixWorld","e","matrixWorld","elements","set","normalize","force","getInverse","updateWorldMatrix","updateParents","updateChildren","clone"],"mappings":"AAAA;;;;;AAMA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,OAAT,QAAwB,oBAAxB;;AAEA,SAASC,MAAT,GAAkB;AAEjBF,EAAAA,QAAQ,CAACG,IAAT,CAAe,IAAf;AAEA,OAAKC,IAAL,GAAY,QAAZ;AAEA,OAAKC,kBAAL,GAA0B,IAAIN,OAAJ,EAA1B;AAEA,OAAKO,gBAAL,GAAwB,IAAIP,OAAJ,EAAxB;AACA,OAAKQ,uBAAL,GAA+B,IAAIR,OAAJ,EAA/B;AAEA;;AAEDG,MAAM,CAACM,SAAP,GAAmBC,MAAM,CAACC,MAAP,CAAeD,MAAM,CAACE,MAAP,CAAeX,QAAQ,CAACQ,SAAxB,CAAf,EAAoD;AAEtEI,EAAAA,WAAW,EAAEV,MAFyD;AAItEW,EAAAA,QAAQ,EAAE,IAJ4D;AAMtEC,EAAAA,IAAI,EAAE,UAAWC,MAAX,EAAmBC,SAAnB,EAA+B;AAEpChB,IAAAA,QAAQ,CAACQ,SAAT,CAAmBM,IAAnB,CAAwBX,IAAxB,CAA8B,IAA9B,EAAoCY,MAApC,EAA4CC,SAA5C;AAEA,SAAKX,kBAAL,CAAwBS,IAAxB,CAA8BC,MAAM,CAACV,kBAArC;AAEA,SAAKC,gBAAL,CAAsBQ,IAAtB,CAA4BC,MAAM,CAACT,gBAAnC;AACA,SAAKC,uBAAL,CAA6BO,IAA7B,CAAmCC,MAAM,CAACR,uBAA1C;AAEA,WAAO,IAAP;AAEA,GAjBqE;AAmBtEU,EAAAA,iBAAiB,EAAE,UAAWC,MAAX,EAAoB;AAEtC,QAAKA,MAAM,KAAKC,SAAhB,EAA4B;AAE3BC,MAAAA,OAAO,CAACC,IAAR,CAAc,2DAAd;AACAH,MAAAA,MAAM,GAAG,IAAIjB,OAAJ,EAAT;AAEA;;AAED,SAAKqB,iBAAL,CAAwB,IAAxB;AAEA,QAAIC,CAAC,GAAG,KAAKC,WAAL,CAAiBC,QAAzB;AAEA,WAAOP,MAAM,CAACQ,GAAP,CAAY,CAAEH,CAAC,CAAE,CAAF,CAAf,EAAsB,CAAEA,CAAC,CAAE,CAAF,CAAzB,EAAgC,CAAEA,CAAC,CAAE,EAAF,CAAnC,EAA4CI,SAA5C,EAAP;AAEA,GAlCqE;AAoCtEL,EAAAA,iBAAiB,EAAE,UAAWM,KAAX,EAAmB;AAErC5B,IAAAA,QAAQ,CAACQ,SAAT,CAAmBc,iBAAnB,CAAqCnB,IAArC,CAA2C,IAA3C,EAAiDyB,KAAjD;AAEA,SAAKvB,kBAAL,CAAwBwB,UAAxB,CAAoC,KAAKL,WAAzC;AAEA,GA1CqE;AA4CtEM,EAAAA,iBAAiB,EAAE,UAAWC,aAAX,EAA0BC,cAA1B,EAA2C;AAE7DhC,IAAAA,QAAQ,CAACQ,SAAT,CAAmBsB,iBAAnB,CAAqC3B,IAArC,CAA2C,IAA3C,EAAiD4B,aAAjD,EAAgEC,cAAhE;AAEA,SAAK3B,kBAAL,CAAwBwB,UAAxB,CAAoC,KAAKL,WAAzC;AAEA,GAlDqE;AAoDtES,EAAAA,KAAK,EAAE,YAAY;AAElB,WAAO,IAAI,KAAKrB,WAAT,GAAuBE,IAAvB,CAA6B,IAA7B,CAAP;AAEA;AAxDqE,CAApD,CAAnB;AA4DA,SAASZ,MAAT","sourcesContent":["/**\n * @author mrdoob / http://mrdoob.com/\n * @author mikael emtinger / http://gomo.se/\n * @author WestLangley / http://github.com/WestLangley\n*/\n\nimport { Matrix4 } from '../math/Matrix4.js';\nimport { Object3D } from '../core/Object3D.js';\nimport { Vector3 } from '../math/Vector3.js';\n\nfunction Camera() {\n\n\tObject3D.call( this );\n\n\tthis.type = 'Camera';\n\n\tthis.matrixWorldInverse = new Matrix4();\n\n\tthis.projectionMatrix = new Matrix4();\n\tthis.projectionMatrixInverse = new Matrix4();\n\n}\n\nCamera.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: Camera,\n\n\tisCamera: true,\n\n\tcopy: function ( source, recursive ) {\n\n\t\tObject3D.prototype.copy.call( this, source, recursive );\n\n\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\n\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\t\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\n\n\t\treturn this;\n\n\t},\n\n\tgetWorldDirection: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Camera: .getWorldDirection() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\tthis.updateMatrixWorld( true );\n\n\t\tvar e = this.matrixWorld.elements;\n\n\t\treturn target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();\n\n\t},\n\n\tupdateMatrixWorld: function ( force ) {\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\n\n\t\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\n\n\t},\n\n\tupdateWorldMatrix: function ( updateParents, updateChildren ) {\n\n\t\tObject3D.prototype.updateWorldMatrix.call( this, updateParents, updateChildren );\n\n\t\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n} );\n\nexport { Camera };\n"]},"metadata":{},"sourceType":"module"}