{"ast":null,"code":"import { MathUtils } from './MathUtils.js';\n/**\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n *\n * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n *\n * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n * The azimuthal angle (theta) is measured from the positive z-axis.\n */\n\nfunction Spherical(radius, phi, theta) {\n  this.radius = radius !== undefined ? radius : 1.0;\n  this.phi = phi !== undefined ? phi : 0; // polar angle\n\n  this.theta = theta !== undefined ? theta : 0; // azimuthal angle\n\n  return this;\n}\n\nObject.assign(Spherical.prototype, {\n  set: function (radius, phi, theta) {\n    this.radius = radius;\n    this.phi = phi;\n    this.theta = theta;\n    return this;\n  },\n  clone: function () {\n    return new this.constructor().copy(this);\n  },\n  copy: function (other) {\n    this.radius = other.radius;\n    this.phi = other.phi;\n    this.theta = other.theta;\n    return this;\n  },\n  // restrict phi to be betwee EPS and PI-EPS\n  makeSafe: function () {\n    var EPS = 0.000001;\n    this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));\n    return this;\n  },\n  setFromVector3: function (v) {\n    return this.setFromCartesianCoords(v.x, v.y, v.z);\n  },\n  setFromCartesianCoords: function (x, y, z) {\n    this.radius = Math.sqrt(x * x + y * y + z * z);\n\n    if (this.radius === 0) {\n      this.theta = 0;\n      this.phi = 0;\n    } else {\n      this.theta = Math.atan2(x, z);\n      this.phi = Math.acos(MathUtils.clamp(y / this.radius, -1, 1));\n    }\n\n    return this;\n  }\n});\nexport { Spherical };","map":{"version":3,"sources":["H:/chrlab/src/component/panelComponent/Canvas/threejs/src/math/Spherical.js"],"names":["MathUtils","Spherical","radius","phi","theta","undefined","Object","assign","prototype","set","clone","constructor","copy","other","makeSafe","EPS","Math","max","min","PI","setFromVector3","v","setFromCartesianCoords","x","y","z","sqrt","atan2","acos","clamp"],"mappings":"AAAA,SAASA,SAAT,QAA0B,gBAA1B;AAEA;;;;;;;;;;AAUA,SAASC,SAAT,CAAoBC,MAApB,EAA4BC,GAA5B,EAAiCC,KAAjC,EAAyC;AAExC,OAAKF,MAAL,GAAgBA,MAAM,KAAKG,SAAb,GAA2BH,MAA3B,GAAoC,GAAlD;AACA,OAAKC,GAAL,GAAaA,GAAG,KAAKE,SAAV,GAAwBF,GAAxB,GAA8B,CAAzC,CAHwC,CAGI;;AAC5C,OAAKC,KAAL,GAAeA,KAAK,KAAKC,SAAZ,GAA0BD,KAA1B,GAAkC,CAA/C,CAJwC,CAIU;;AAElD,SAAO,IAAP;AAEA;;AAEDE,MAAM,CAACC,MAAP,CAAeN,SAAS,CAACO,SAAzB,EAAoC;AAEnCC,EAAAA,GAAG,EAAE,UAAWP,MAAX,EAAmBC,GAAnB,EAAwBC,KAAxB,EAAgC;AAEpC,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKC,GAAL,GAAWA,GAAX;AACA,SAAKC,KAAL,GAAaA,KAAb;AAEA,WAAO,IAAP;AAEA,GAVkC;AAYnCM,EAAAA,KAAK,EAAE,YAAY;AAElB,WAAO,IAAI,KAAKC,WAAT,GAAuBC,IAAvB,CAA6B,IAA7B,CAAP;AAEA,GAhBkC;AAkBnCA,EAAAA,IAAI,EAAE,UAAWC,KAAX,EAAmB;AAExB,SAAKX,MAAL,GAAcW,KAAK,CAACX,MAApB;AACA,SAAKC,GAAL,GAAWU,KAAK,CAACV,GAAjB;AACA,SAAKC,KAAL,GAAaS,KAAK,CAACT,KAAnB;AAEA,WAAO,IAAP;AAEA,GA1BkC;AA4BnC;AACAU,EAAAA,QAAQ,EAAE,YAAY;AAErB,QAAIC,GAAG,GAAG,QAAV;AACA,SAAKZ,GAAL,GAAWa,IAAI,CAACC,GAAL,CAAUF,GAAV,EAAeC,IAAI,CAACE,GAAL,CAAUF,IAAI,CAACG,EAAL,GAAUJ,GAApB,EAAyB,KAAKZ,GAA9B,CAAf,CAAX;AAEA,WAAO,IAAP;AAEA,GApCkC;AAsCnCiB,EAAAA,cAAc,EAAE,UAAWC,CAAX,EAAe;AAE9B,WAAO,KAAKC,sBAAL,CAA6BD,CAAC,CAACE,CAA/B,EAAkCF,CAAC,CAACG,CAApC,EAAuCH,CAAC,CAACI,CAAzC,CAAP;AAEA,GA1CkC;AA4CnCH,EAAAA,sBAAsB,EAAE,UAAWC,CAAX,EAAcC,CAAd,EAAiBC,CAAjB,EAAqB;AAE5C,SAAKvB,MAAL,GAAcc,IAAI,CAACU,IAAL,CAAWH,CAAC,GAAGA,CAAJ,GAAQC,CAAC,GAAGA,CAAZ,GAAgBC,CAAC,GAAGA,CAA/B,CAAd;;AAEA,QAAK,KAAKvB,MAAL,KAAgB,CAArB,EAAyB;AAExB,WAAKE,KAAL,GAAa,CAAb;AACA,WAAKD,GAAL,GAAW,CAAX;AAEA,KALD,MAKO;AAEN,WAAKC,KAAL,GAAaY,IAAI,CAACW,KAAL,CAAYJ,CAAZ,EAAeE,CAAf,CAAb;AACA,WAAKtB,GAAL,GAAWa,IAAI,CAACY,IAAL,CAAW5B,SAAS,CAAC6B,KAAV,CAAiBL,CAAC,GAAG,KAAKtB,MAA1B,EAAkC,CAAE,CAApC,EAAuC,CAAvC,CAAX,CAAX;AAEA;;AAED,WAAO,IAAP;AAEA;AA9DkC,CAApC;AAmEA,SAASD,SAAT","sourcesContent":["import { MathUtils } from './MathUtils.js';\n\n/**\n * @author bhouston / http://clara.io\n * @author WestLangley / http://github.com/WestLangley\n *\n * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n *\n * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n * The azimuthal angle (theta) is measured from the positive z-axis.\n */\n\nfunction Spherical( radius, phi, theta ) {\n\n\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\n\tthis.phi = ( phi !== undefined ) ? phi : 0; // polar angle\n\tthis.theta = ( theta !== undefined ) ? theta : 0; // azimuthal angle\n\n\treturn this;\n\n}\n\nObject.assign( Spherical.prototype, {\n\n\tset: function ( radius, phi, theta ) {\n\n\t\tthis.radius = radius;\n\t\tthis.phi = phi;\n\t\tthis.theta = theta;\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( other ) {\n\n\t\tthis.radius = other.radius;\n\t\tthis.phi = other.phi;\n\t\tthis.theta = other.theta;\n\n\t\treturn this;\n\n\t},\n\n\t// restrict phi to be betwee EPS and PI-EPS\n\tmakeSafe: function () {\n\n\t\tvar EPS = 0.000001;\n\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromVector3: function ( v ) {\n\n\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t},\n\n\tsetFromCartesianCoords: function ( x, y, z ) {\n\n\t\tthis.radius = Math.sqrt( x * x + y * y + z * z );\n\n\t\tif ( this.radius === 0 ) {\n\n\t\t\tthis.theta = 0;\n\t\t\tthis.phi = 0;\n\n\t\t} else {\n\n\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\tthis.phi = Math.acos( MathUtils.clamp( y / this.radius, - 1, 1 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n} );\n\n\nexport { Spherical };\n"]},"metadata":{},"sourceType":"module"}