{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _react = require('react');\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nvar createLink = function createLink(fonts, subsets, display) {\n  var families = fonts.reduce(function (acc, font) {\n    var family = font.font.replace(/ +/g, '+');\n    var weights = (font.weights || []).join(',');\n    return [].concat(_toConsumableArray(acc), [family + (weights && ':' + weights)]);\n  }, []).join('|');\n  var link = document.createElement('link');\n  link.rel = 'stylesheet';\n  link.href = 'https://fonts.googleapis.com/css?family=' + families;\n\n  if (subsets && Array.isArray(subsets) && subsets.length > 0) {\n    link.href += '&subset=' + subsets.join(',');\n  }\n\n  if (display) {\n    link.href += '&display=' + display;\n  }\n\n  return link;\n};\n\nvar GoogleFontLoader = function GoogleFontLoader(_ref) {\n  var fonts = _ref.fonts,\n      subsets = _ref.subsets,\n      _ref$display = _ref.display,\n      display = _ref$display === undefined ? null : _ref$display;\n\n  var _useState = (0, _react.useState)(createLink(fonts, subsets, display)),\n      _useState2 = _slicedToArray(_useState, 2),\n      link = _useState2[0],\n      setLink = _useState2[1];\n\n  (0, _react.useEffect)(function () {\n    document.head.appendChild(link);\n    return function () {\n      return document.head.removeChild(link);\n    };\n  }, [link]);\n  (0, _react.useEffect)(function () {\n    setLink(createLink(fonts, subsets, display));\n  }, [fonts, subsets, display]);\n  return null;\n};\n\nGoogleFontLoader.propTypes = {\n  fonts: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n    font: _propTypes2.default.string.isRequired,\n    weights: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]))\n  })).isRequired,\n  subsets: _propTypes2.default.arrayOf(_propTypes2.default.string),\n  display: _propTypes2.default.string\n};\nexports.default = GoogleFontLoader;","map":null,"metadata":{},"sourceType":"script"}