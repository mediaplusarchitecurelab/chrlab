{"ast":null,"code":"import { Vector3 } from '../math/Vector3.js';\nimport { Object3D } from '../core/Object3D.js';\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar _v1 = new Vector3();\n\nvar _v2 = new Vector3();\n\nfunction LOD() {\n  Object3D.call(this);\n  this._currentLevel = 0;\n  this.type = 'LOD';\n  Object.defineProperties(this, {\n    levels: {\n      enumerable: true,\n      value: []\n    }\n  });\n  this.autoUpdate = true;\n}\n\nLOD.prototype = Object.assign(Object.create(Object3D.prototype), {\n  constructor: LOD,\n  isLOD: true,\n  copy: function (source) {\n    Object3D.prototype.copy.call(this, source, false);\n    var levels = source.levels;\n\n    for (var i = 0, l = levels.length; i < l; i++) {\n      var level = levels[i];\n      this.addLevel(level.object.clone(), level.distance);\n    }\n\n    this.autoUpdate = source.autoUpdate;\n    return this;\n  },\n  addLevel: function (object, distance) {\n    if (distance === undefined) distance = 0;\n    distance = Math.abs(distance);\n    var levels = this.levels;\n\n    for (var l = 0; l < levels.length; l++) {\n      if (distance < levels[l].distance) {\n        break;\n      }\n    }\n\n    levels.splice(l, 0, {\n      distance: distance,\n      object: object\n    });\n    this.add(object);\n    return this;\n  },\n  getCurrentLevel: function () {\n    return this._currentLevel;\n  },\n  getObjectForDistance: function (distance) {\n    var levels = this.levels;\n\n    if (levels.length > 0) {\n      for (var i = 1, l = levels.length; i < l; i++) {\n        if (distance < levels[i].distance) {\n          break;\n        }\n      }\n\n      return levels[i - 1].object;\n    }\n\n    return null;\n  },\n  raycast: function (raycaster, intersects) {\n    var levels = this.levels;\n\n    if (levels.length > 0) {\n      _v1.setFromMatrixPosition(this.matrixWorld);\n\n      var distance = raycaster.ray.origin.distanceTo(_v1);\n      this.getObjectForDistance(distance).raycast(raycaster, intersects);\n    }\n  },\n  update: function (camera) {\n    var levels = this.levels;\n\n    if (levels.length > 1) {\n      _v1.setFromMatrixPosition(camera.matrixWorld);\n\n      _v2.setFromMatrixPosition(this.matrixWorld);\n\n      var distance = _v1.distanceTo(_v2) / camera.zoom;\n      levels[0].object.visible = true;\n\n      for (var i = 1, l = levels.length; i < l; i++) {\n        if (distance >= levels[i].distance) {\n          levels[i - 1].object.visible = false;\n          levels[i].object.visible = true;\n        } else {\n          break;\n        }\n      }\n\n      this._currentLevel = i - 1;\n\n      for (; i < l; i++) {\n        levels[i].object.visible = false;\n      }\n    }\n  },\n  toJSON: function (meta) {\n    var data = Object3D.prototype.toJSON.call(this, meta);\n    if (this.autoUpdate === false) data.object.autoUpdate = false;\n    data.object.levels = [];\n    var levels = this.levels;\n\n    for (var i = 0, l = levels.length; i < l; i++) {\n      var level = levels[i];\n      data.object.levels.push({\n        object: level.object.uuid,\n        distance: level.distance\n      });\n    }\n\n    return data;\n  }\n});\nexport { LOD };","map":{"version":3,"sources":["H:/chrlab/src/component/panelComponent/Canvas/threejs/src/objects/LOD.js"],"names":["Vector3","Object3D","_v1","_v2","LOD","call","_currentLevel","type","Object","defineProperties","levels","enumerable","value","autoUpdate","prototype","assign","create","constructor","isLOD","copy","source","i","l","length","level","addLevel","object","clone","distance","undefined","Math","abs","splice","add","getCurrentLevel","getObjectForDistance","raycast","raycaster","intersects","setFromMatrixPosition","matrixWorld","ray","origin","distanceTo","update","camera","zoom","visible","toJSON","meta","data","push","uuid"],"mappings":"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","sourcesContent":["import { Vector3 } from '../math/Vector3.js';\nimport { Object3D } from '../core/Object3D.js';\n\n/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar _v1 = new Vector3();\nvar _v2 = new Vector3();\n\nfunction LOD() {\n\n\tObject3D.call( this );\n\n\tthis._currentLevel = 0;\n\n\tthis.type = 'LOD';\n\n\tObject.defineProperties( this, {\n\t\tlevels: {\n\t\t\tenumerable: true,\n\t\t\tvalue: []\n\t\t}\n\t} );\n\n\tthis.autoUpdate = true;\n\n}\n\nLOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: LOD,\n\n\tisLOD: true,\n\n\tcopy: function ( source ) {\n\n\t\tObject3D.prototype.copy.call( this, source, false );\n\n\t\tvar levels = source.levels;\n\n\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tvar level = levels[ i ];\n\n\t\t\tthis.addLevel( level.object.clone(), level.distance );\n\n\t\t}\n\n\t\tthis.autoUpdate = source.autoUpdate;\n\n\t\treturn this;\n\n\t},\n\n\taddLevel: function ( object, distance ) {\n\n\t\tif ( distance === undefined ) distance = 0;\n\n\t\tdistance = Math.abs( distance );\n\n\t\tvar levels = this.levels;\n\n\t\tfor ( var l = 0; l < levels.length; l ++ ) {\n\n\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\n\t\tthis.add( object );\n\n\t\treturn this;\n\n\t},\n\n\tgetCurrentLevel: function () {\n\n\t\treturn this._currentLevel;\n\n\t},\n\n\tgetObjectForDistance: function ( distance ) {\n\n\t\tvar levels = this.levels;\n\n\t\tif ( levels.length > 0 ) {\n\n\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tif ( distance < levels[ i ].distance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn levels[ i - 1 ].object;\n\n\t\t}\n\n\t\treturn null;\n\n\t},\n\n\traycast: function ( raycaster, intersects ) {\n\n\t\tvar levels = this.levels;\n\n\t\tif ( levels.length > 0 ) {\n\n\t\t\t_v1.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( _v1 );\n\n\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t}\n\n\t},\n\n\tupdate: function ( camera ) {\n\n\t\tvar levels = this.levels;\n\n\t\tif ( levels.length > 1 ) {\n\n\t\t\t_v1.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t_v2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tvar distance = _v1.distanceTo( _v2 ) / camera.zoom;\n\n\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\n\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._currentLevel = i - 1;\n\n\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\ttoJSON: function ( meta ) {\n\n\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\n\n\t\tif ( this.autoUpdate === false ) data.object.autoUpdate = false;\n\n\t\tdata.object.levels = [];\n\n\t\tvar levels = this.levels;\n\n\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tvar level = levels[ i ];\n\n\t\t\tdata.object.levels.push( {\n\t\t\t\tobject: level.object.uuid,\n\t\t\t\tdistance: level.distance\n\t\t\t} );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n} );\n\n\nexport { LOD };\n"]},"metadata":{},"sourceType":"module"}