{"ast":null,"code":"import { Vector3 } from './Vector3.js';\nimport { Plane } from './Plane.js';\n/**\n * @author bhouston / http://clara.io\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar _v0 = new Vector3();\n\nvar _v1 = new Vector3();\n\nvar _v2 = new Vector3();\n\nvar _v3 = new Vector3();\n\nvar _vab = new Vector3();\n\nvar _vac = new Vector3();\n\nvar _vbc = new Vector3();\n\nvar _vap = new Vector3();\n\nvar _vbp = new Vector3();\n\nvar _vcp = new Vector3();\n\nfunction Triangle(a, b, c) {\n  this.a = a !== undefined ? a : new Vector3();\n  this.b = b !== undefined ? b : new Vector3();\n  this.c = c !== undefined ? c : new Vector3();\n}\n\nObject.assign(Triangle, {\n  getNormal: function (a, b, c, target) {\n    if (target === undefined) {\n      console.warn('THREE.Triangle: .getNormal() target is now required');\n      target = new Vector3();\n    }\n\n    target.subVectors(c, b);\n\n    _v0.subVectors(a, b);\n\n    target.cross(_v0);\n    var targetLengthSq = target.lengthSq();\n\n    if (targetLengthSq > 0) {\n      return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));\n    }\n\n    return target.set(0, 0, 0);\n  },\n  // static/instance method to calculate barycentric coordinates\n  // based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n  getBarycoord: function (point, a, b, c, target) {\n    _v0.subVectors(c, a);\n\n    _v1.subVectors(b, a);\n\n    _v2.subVectors(point, a);\n\n    var dot00 = _v0.dot(_v0);\n\n    var dot01 = _v0.dot(_v1);\n\n    var dot02 = _v0.dot(_v2);\n\n    var dot11 = _v1.dot(_v1);\n\n    var dot12 = _v1.dot(_v2);\n\n    var denom = dot00 * dot11 - dot01 * dot01;\n\n    if (target === undefined) {\n      console.warn('THREE.Triangle: .getBarycoord() target is now required');\n      target = new Vector3();\n    } // collinear or singular triangle\n\n\n    if (denom === 0) {\n      // arbitrary location outside of triangle?\n      // not sure if this is the best idea, maybe should be returning undefined\n      return target.set(-2, -1, -1);\n    }\n\n    var invDenom = 1 / denom;\n    var u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n    var v = (dot00 * dot12 - dot01 * dot02) * invDenom; // barycentric coordinates must always sum to 1\n\n    return target.set(1 - u - v, v, u);\n  },\n  containsPoint: function (point, a, b, c) {\n    Triangle.getBarycoord(point, a, b, c, _v3);\n    return _v3.x >= 0 && _v3.y >= 0 && _v3.x + _v3.y <= 1;\n  },\n  getUV: function (point, p1, p2, p3, uv1, uv2, uv3, target) {\n    this.getBarycoord(point, p1, p2, p3, _v3);\n    target.set(0, 0);\n    target.addScaledVector(uv1, _v3.x);\n    target.addScaledVector(uv2, _v3.y);\n    target.addScaledVector(uv3, _v3.z);\n    return target;\n  },\n  isFrontFacing: function (a, b, c, direction) {\n    _v0.subVectors(c, b);\n\n    _v1.subVectors(a, b); // strictly front facing\n\n\n    return _v0.cross(_v1).dot(direction) < 0 ? true : false;\n  }\n});\nObject.assign(Triangle.prototype, {\n  set: function (a, b, c) {\n    this.a.copy(a);\n    this.b.copy(b);\n    this.c.copy(c);\n    return this;\n  },\n  setFromPointsAndIndices: function (points, i0, i1, i2) {\n    this.a.copy(points[i0]);\n    this.b.copy(points[i1]);\n    this.c.copy(points[i2]);\n    return this;\n  },\n  clone: function () {\n    return new this.constructor().copy(this);\n  },\n  copy: function (triangle) {\n    this.a.copy(triangle.a);\n    this.b.copy(triangle.b);\n    this.c.copy(triangle.c);\n    return this;\n  },\n  getArea: function () {\n    _v0.subVectors(this.c, this.b);\n\n    _v1.subVectors(this.a, this.b);\n\n    return _v0.cross(_v1).length() * 0.5;\n  },\n  getMidpoint: function (target) {\n    if (target === undefined) {\n      console.warn('THREE.Triangle: .getMidpoint() target is now required');\n      target = new Vector3();\n    }\n\n    return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);\n  },\n  getNormal: function (target) {\n    return Triangle.getNormal(this.a, this.b, this.c, target);\n  },\n  getPlane: function (target) {\n    if (target === undefined) {\n      console.warn('THREE.Triangle: .getPlane() target is now required');\n      target = new Plane();\n    }\n\n    return target.setFromCoplanarPoints(this.a, this.b, this.c);\n  },\n  getBarycoord: function (point, target) {\n    return Triangle.getBarycoord(point, this.a, this.b, this.c, target);\n  },\n  getUV: function (point, uv1, uv2, uv3, target) {\n    return Triangle.getUV(point, this.a, this.b, this.c, uv1, uv2, uv3, target);\n  },\n  containsPoint: function (point) {\n    return Triangle.containsPoint(point, this.a, this.b, this.c);\n  },\n  isFrontFacing: function (direction) {\n    return Triangle.isFrontFacing(this.a, this.b, this.c, direction);\n  },\n  intersectsBox: function (box) {\n    return box.intersectsTriangle(this);\n  },\n  closestPointToPoint: function (p, target) {\n    if (target === undefined) {\n      console.warn('THREE.Triangle: .closestPointToPoint() target is now required');\n      target = new Vector3();\n    }\n\n    var a = this.a,\n        b = this.b,\n        c = this.c;\n    var v, w; // algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n    // published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n    // under the accompanying license; see chapter 5.1.5 for detailed explanation.\n    // basically, we're distinguishing which of the voronoi regions of the triangle\n    // the point lies in with the minimum amount of redundant computation.\n\n    _vab.subVectors(b, a);\n\n    _vac.subVectors(c, a);\n\n    _vap.subVectors(p, a);\n\n    var d1 = _vab.dot(_vap);\n\n    var d2 = _vac.dot(_vap);\n\n    if (d1 <= 0 && d2 <= 0) {\n      // vertex region of A; barycentric coords (1, 0, 0)\n      return target.copy(a);\n    }\n\n    _vbp.subVectors(p, b);\n\n    var d3 = _vab.dot(_vbp);\n\n    var d4 = _vac.dot(_vbp);\n\n    if (d3 >= 0 && d4 <= d3) {\n      // vertex region of B; barycentric coords (0, 1, 0)\n      return target.copy(b);\n    }\n\n    var vc = d1 * d4 - d3 * d2;\n\n    if (vc <= 0 && d1 >= 0 && d3 <= 0) {\n      v = d1 / (d1 - d3); // edge region of AB; barycentric coords (1-v, v, 0)\n\n      return target.copy(a).addScaledVector(_vab, v);\n    }\n\n    _vcp.subVectors(p, c);\n\n    var d5 = _vab.dot(_vcp);\n\n    var d6 = _vac.dot(_vcp);\n\n    if (d6 >= 0 && d5 <= d6) {\n      // vertex region of C; barycentric coords (0, 0, 1)\n      return target.copy(c);\n    }\n\n    var vb = d5 * d2 - d1 * d6;\n\n    if (vb <= 0 && d2 >= 0 && d6 <= 0) {\n      w = d2 / (d2 - d6); // edge region of AC; barycentric coords (1-w, 0, w)\n\n      return target.copy(a).addScaledVector(_vac, w);\n    }\n\n    var va = d3 * d6 - d5 * d4;\n\n    if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {\n      _vbc.subVectors(c, b);\n\n      w = (d4 - d3) / (d4 - d3 + (d5 - d6)); // edge region of BC; barycentric coords (0, 1-w, w)\n\n      return target.copy(b).addScaledVector(_vbc, w); // edge region of BC\n    } // face region\n\n\n    var denom = 1 / (va + vb + vc); // u = va * denom\n\n    v = vb * denom;\n    w = vc * denom;\n    return target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);\n  },\n  equals: function (triangle) {\n    return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);\n  }\n});\nexport { Triangle };","map":{"version":3,"sources":["D:/chrlab/src/component/panelComponent/Canvas/threejs/src/math/Triangle.js"],"names":["Vector3","Plane","_v0","_v1","_v2","_v3","_vab","_vac","_vbc","_vap","_vbp","_vcp","Triangle","a","b","c","undefined","Object","assign","getNormal","target","console","warn","subVectors","cross","targetLengthSq","lengthSq","multiplyScalar","Math","sqrt","set","getBarycoord","point","dot00","dot","dot01","dot02","dot11","dot12","denom","invDenom","u","v","containsPoint","x","y","getUV","p1","p2","p3","uv1","uv2","uv3","addScaledVector","z","isFrontFacing","direction","prototype","copy","setFromPointsAndIndices","points","i0","i1","i2","clone","constructor","triangle","getArea","length","getMidpoint","addVectors","add","getPlane","setFromCoplanarPoints","intersectsBox","box","intersectsTriangle","closestPointToPoint","p","w","d1","d2","d3","d4","vc","d5","d6","vb","va","equals"],"mappings":"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","sourcesContent":["import { Vector3 } from './Vector3.js';\nimport { Plane } from './Plane.js';\n\n/**\n * @author bhouston / http://clara.io\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar _v0 = new Vector3();\nvar _v1 = new Vector3();\nvar _v2 = new Vector3();\nvar _v3 = new Vector3();\n\nvar _vab = new Vector3();\nvar _vac = new Vector3();\nvar _vbc = new Vector3();\nvar _vap = new Vector3();\nvar _vbp = new Vector3();\nvar _vcp = new Vector3();\n\nfunction Triangle( a, b, c ) {\n\n\tthis.a = ( a !== undefined ) ? a : new Vector3();\n\tthis.b = ( b !== undefined ) ? b : new Vector3();\n\tthis.c = ( c !== undefined ) ? c : new Vector3();\n\n}\n\nObject.assign( Triangle, {\n\n\tgetNormal: function ( a, b, c, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .getNormal() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\ttarget.subVectors( c, b );\n\t\t_v0.subVectors( a, b );\n\t\ttarget.cross( _v0 );\n\n\t\tvar targetLengthSq = target.lengthSq();\n\t\tif ( targetLengthSq > 0 ) {\n\n\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\n\n\t\t}\n\n\t\treturn target.set( 0, 0, 0 );\n\n\t},\n\n\t// static/instance method to calculate barycentric coordinates\n\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\tgetBarycoord: function ( point, a, b, c, target ) {\n\n\t\t_v0.subVectors( c, a );\n\t\t_v1.subVectors( b, a );\n\t\t_v2.subVectors( point, a );\n\n\t\tvar dot00 = _v0.dot( _v0 );\n\t\tvar dot01 = _v0.dot( _v1 );\n\t\tvar dot02 = _v0.dot( _v2 );\n\t\tvar dot11 = _v1.dot( _v1 );\n\t\tvar dot12 = _v1.dot( _v2 );\n\n\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .getBarycoord() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\t// collinear or singular triangle\n\t\tif ( denom === 0 ) {\n\n\t\t\t// arbitrary location outside of triangle?\n\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\treturn target.set( - 2, - 1, - 1 );\n\n\t\t}\n\n\t\tvar invDenom = 1 / denom;\n\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t// barycentric coordinates must always sum to 1\n\t\treturn target.set( 1 - u - v, v, u );\n\n\t},\n\n\tcontainsPoint: function ( point, a, b, c ) {\n\n\t\tTriangle.getBarycoord( point, a, b, c, _v3 );\n\n\t\treturn ( _v3.x >= 0 ) && ( _v3.y >= 0 ) && ( ( _v3.x + _v3.y ) <= 1 );\n\n\t},\n\n\tgetUV: function ( point, p1, p2, p3, uv1, uv2, uv3, target ) {\n\n\t\tthis.getBarycoord( point, p1, p2, p3, _v3 );\n\n\t\ttarget.set( 0, 0 );\n\t\ttarget.addScaledVector( uv1, _v3.x );\n\t\ttarget.addScaledVector( uv2, _v3.y );\n\t\ttarget.addScaledVector( uv3, _v3.z );\n\n\t\treturn target;\n\n\t},\n\n\tisFrontFacing: function ( a, b, c, direction ) {\n\n\t\t_v0.subVectors( c, b );\n\t\t_v1.subVectors( a, b );\n\n\t\t// strictly front facing\n\t\treturn ( _v0.cross( _v1 ).dot( direction ) < 0 ) ? true : false;\n\n\t}\n\n} );\n\nObject.assign( Triangle.prototype, {\n\n\tset: function ( a, b, c ) {\n\n\t\tthis.a.copy( a );\n\t\tthis.b.copy( b );\n\t\tthis.c.copy( c );\n\n\t\treturn this;\n\n\t},\n\n\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\n\n\t\tthis.a.copy( points[ i0 ] );\n\t\tthis.b.copy( points[ i1 ] );\n\t\tthis.c.copy( points[ i2 ] );\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor().copy( this );\n\n\t},\n\n\tcopy: function ( triangle ) {\n\n\t\tthis.a.copy( triangle.a );\n\t\tthis.b.copy( triangle.b );\n\t\tthis.c.copy( triangle.c );\n\n\t\treturn this;\n\n\t},\n\n\tgetArea: function () {\n\n\t\t_v0.subVectors( this.c, this.b );\n\t\t_v1.subVectors( this.a, this.b );\n\n\t\treturn _v0.cross( _v1 ).length() * 0.5;\n\n\t},\n\n\tgetMidpoint: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .getMidpoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t},\n\n\tgetNormal: function ( target ) {\n\n\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\n\n\t},\n\n\tgetPlane: function ( target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .getPlane() target is now required' );\n\t\t\ttarget = new Plane();\n\n\t\t}\n\n\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t},\n\n\tgetBarycoord: function ( point, target ) {\n\n\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\n\n\t},\n\n\tgetUV: function ( point, uv1, uv2, uv3, target ) {\n\n\t\treturn Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );\n\n\t},\n\n\tcontainsPoint: function ( point ) {\n\n\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t},\n\n\tisFrontFacing: function ( direction ) {\n\n\t\treturn Triangle.isFrontFacing( this.a, this.b, this.c, direction );\n\n\t},\n\n\tintersectsBox: function ( box ) {\n\n\t\treturn box.intersectsTriangle( this );\n\n\t},\n\n\tclosestPointToPoint: function ( p, target ) {\n\n\t\tif ( target === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle: .closestPointToPoint() target is now required' );\n\t\t\ttarget = new Vector3();\n\n\t\t}\n\n\t\tvar a = this.a, b = this.b, c = this.c;\n\t\tvar v, w;\n\n\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t_vab.subVectors( b, a );\n\t\t_vac.subVectors( c, a );\n\t\t_vap.subVectors( p, a );\n\t\tvar d1 = _vab.dot( _vap );\n\t\tvar d2 = _vac.dot( _vap );\n\t\tif ( d1 <= 0 && d2 <= 0 ) {\n\n\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\treturn target.copy( a );\n\n\t\t}\n\n\t\t_vbp.subVectors( p, b );\n\t\tvar d3 = _vab.dot( _vbp );\n\t\tvar d4 = _vac.dot( _vbp );\n\t\tif ( d3 >= 0 && d4 <= d3 ) {\n\n\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\treturn target.copy( b );\n\n\t\t}\n\n\t\tvar vc = d1 * d4 - d3 * d2;\n\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\n\n\t\t\tv = d1 / ( d1 - d3 );\n\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\n\t\t\treturn target.copy( a ).addScaledVector( _vab, v );\n\n\t\t}\n\n\t\t_vcp.subVectors( p, c );\n\t\tvar d5 = _vab.dot( _vcp );\n\t\tvar d6 = _vac.dot( _vcp );\n\t\tif ( d6 >= 0 && d5 <= d6 ) {\n\n\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\treturn target.copy( c );\n\n\t\t}\n\n\t\tvar vb = d5 * d2 - d1 * d6;\n\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\n\n\t\t\tw = d2 / ( d2 - d6 );\n\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\n\t\t\treturn target.copy( a ).addScaledVector( _vac, w );\n\n\t\t}\n\n\t\tvar va = d3 * d6 - d5 * d4;\n\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\n\n\t\t\t_vbc.subVectors( c, b );\n\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\n\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\n\t\t\treturn target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC\n\n\t\t}\n\n\t\t// face region\n\t\tvar denom = 1 / ( va + vb + vc );\n\t\t// u = va * denom\n\t\tv = vb * denom;\n\t\tw = vc * denom;\n\n\t\treturn target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );\n\n\t},\n\n\tequals: function ( triangle ) {\n\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t}\n\n} );\n\n\nexport { Triangle };\n"]},"metadata":{},"sourceType":"module"}