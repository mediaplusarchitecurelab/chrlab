{"ast":null,"code":"var _jsxFileName = \"H:\\\\chrlab\\\\src\\\\component\\\\panelComponent\\\\Canvas\\\\Artaskjs\\\\index.js\";\nimport React, { Component } from 'react';\nimport { Header } from 'semantic-ui-react';\nimport threeEntryPoint from \"./threejs/threeEntryPoint\";\nimport \"./canvas.css\";\nimport * as THREE from 'three'; //import Qualaroo from './QualarooLoader';\n//import {THREE} from '../arbuild/js/three.js';\n//require('../arbuild/js/three.js');\n\nvar scene, camera, renderer, clock, deltaTime, totalTime;\nvar arToolkitSource, arToolkitContext;\nvar markerRoot1, markerRoot2;\nvar mesh1;\nexport default class CanvasComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDelayChange = e => {\n      this.setState({\n        delay: Number(e.target.value)\n      });\n    };\n\n    this.tick = () => {\n      if (this.state.init) {\n        this.animate();\n        console.log('nn');\n      } else {\n        console.log('err');\n      }\n    };\n\n    this.state = {\n      activeItem: this.props.activeItem,\n      scriptloaded: [],\n      init: false,\n      delay: 100\n    };\n  }\n\n  componentDidMount() {//threeEntryPoint(this.threeRootElement);\n    //this.loadscript('./assets/arbuild/js/three.js');\n\n    /*\r\n    this.loadscript('./assets/arbuild/jsartoolkit5/artoolkit.min.js');\r\n    this.loadscript('./assets/arbuild/jsartoolkit5/artoolkit.api.js');\r\n    this.loadscript('./assets/arbuild/threex/threex-artoolkitsource.js');\r\n    this.loadscript('./assets/arbuild/threex/threex-artoolkitcontext.js');\r\n    this.loadscript('./assets/arbuild/threex/threex-arbasecontrols.js');\r\n    this.loadscript('./assets/arbuild/threex/threex-armarkercontrols.js');\r\n      this.interval = setInterval(this.tick, this.state.delay);\r\n    */\n    //scene = new window.three.THREE.Scene();      \n  }\n\n  async loadscript(url) {\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n\n    if (script.readyState) {\n      //IE\n      script.onreadystatechange = function () {\n        if (script.readyState == \"loaded\" || script.readyState == \"complete\") {\n          script.onreadystatechange = null; //callback();\n        }\n      };\n    } else {\n      //Others\n      script.onload = function () {\n        script.src = url;\n        console.log('a');\n      };\n    }\n\n    document.getElementsByTagName('head')[0].appendChild(script);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.delay !== this.state.delay) {\n      clearInterval(this.interval);\n      this.interval = setInterval(this.tick, this.state.delay);\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  init() {\n    scene = new window.THREE.Scene();\n    let ambientLight = new window.THREE.AmbientLight(0xcccccc, 0.5);\n    scene.add(ambientLight);\n    camera = new window.THREE.Camera();\n    scene.add(camera);\n    renderer = new window.THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    renderer.setClearColor(new window.THREE.Color('lightgrey'), 0);\n    renderer.setSize(640, 480);\n    renderer.domElement.style.position = 'absolute';\n    renderer.domElement.style.top = '0px';\n    renderer.domElement.style.left = '0px';\n    document.body.appendChild(renderer.domElement);\n    clock = new window.THREE.Clock();\n    deltaTime = 0;\n    totalTime = 0; ////////////////////////////////////////////////////////////\n    // setup arToolkitSource\n    ////////////////////////////////////////////////////////////\n\n    arToolkitSource = new window.THREEx.ArToolkitSource({\n      sourceType: 'webcam'\n    });\n\n    function onResize() {\n      arToolkitSource.onResize();\n      arToolkitSource.copySizeTo(renderer.domElement);\n\n      if (arToolkitContext.arController !== null) {\n        arToolkitSource.copySizeTo(arToolkitContext.arController.canvas);\n      }\n    }\n\n    arToolkitSource.init(function onReady() {\n      onResize();\n    }); // handle resize event\n\n    window.addEventListener('resize', function () {\n      onResize();\n    }); ////////////////////////////////////////////////////////////\n    // setup arToolkitContext\n    ////////////////////////////////////////////////////////////  \n    // create atToolkitContext\n\n    arToolkitContext = new window.THREEx.ArToolkitContext({\n      cameraParametersUrl: '../arbuild/data/camera_para.dat',\n      detectionMode: 'mono'\n    }); // copy projection matrix to camera when initialization complete\n\n    arToolkitContext.init(function onCompleted() {\n      camera.projectionMatrix.copy(arToolkitContext.getProjectionMatrix());\n    }); ////////////////////////////////////////////////////////////\n    // setup markerRoots\n    ////////////////////////////////////////////////////////////\n    // build markerControls\n\n    markerRoot1 = new window.THREE.Group();\n    scene.add(markerRoot1);\n    let markerControls1 = new window.THREEx.ArMarkerControls(arToolkitContext, markerRoot1, {\n      type: 'pattern',\n      patternUrl: \"../arbuild/data/hiro.patt\"\n    });\n    let geometry1 = new window.THREE.CubeGeometry(1, 1, 1);\n    let material1 = new window.THREE.MeshNormalMaterial({\n      transparent: true,\n      opacity: 0.5,\n      side: window.THREE.DoubleSide\n    });\n    mesh1 = new window.THREE.Mesh(geometry1, material1);\n    mesh1.position.y = 0.5;\n    markerRoot1.add(mesh1);\n  }\n\n  update() {\n    // update artoolkit on every frame\n    if (arToolkitSource.ready !== false) arToolkitContext.update(arToolkitSource.domElement);\n  }\n\n  render() {\n    renderer.render(scene, camera);\n  }\n\n  animate() {\n    requestAnimationFrame(this.animate);\n    deltaTime = clock.getDelta();\n    totalTime += deltaTime;\n    this.update();\n    this.render();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"panel-canvas\",\n      className: \"panel-canvas\",\n      ref: element => this.threeRootElement = element,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Qualaroo, {\n      delayMs: 500,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 16\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"canvas-gui-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      as: \"h2\",\n      color: \"black\",\n      inverted: true,\n      \"text-align\": \"center\",\n      key: this.state.activeItem,\n      style: {\n        fontFamily: 'Titillium Web'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }\n    }, this.state.activeItem.toUpperCase())));\n  }\n\n}","map":{"version":3,"sources":["H:/chrlab/src/component/panelComponent/Canvas/Artaskjs/index.js"],"names":["React","Component","Header","threeEntryPoint","THREE","scene","camera","renderer","clock","deltaTime","totalTime","arToolkitSource","arToolkitContext","markerRoot1","markerRoot2","mesh1","CanvasComponent","constructor","props","handleDelayChange","e","setState","delay","Number","target","value","tick","state","init","animate","console","log","activeItem","scriptloaded","componentDidMount","loadscript","url","script","document","createElement","type","readyState","onreadystatechange","onload","src","getElementsByTagName","appendChild","componentDidUpdate","prevProps","prevState","clearInterval","interval","setInterval","componentWillUnmount","window","Scene","ambientLight","AmbientLight","add","Camera","WebGLRenderer","antialias","alpha","setClearColor","Color","setSize","domElement","style","position","top","left","body","Clock","THREEx","ArToolkitSource","sourceType","onResize","copySizeTo","arController","canvas","onReady","addEventListener","ArToolkitContext","cameraParametersUrl","detectionMode","onCompleted","projectionMatrix","copy","getProjectionMatrix","Group","markerControls1","ArMarkerControls","patternUrl","geometry1","CubeGeometry","material1","MeshNormalMaterial","transparent","opacity","side","DoubleSide","Mesh","y","update","ready","render","requestAnimationFrame","getDelta","element","threeRootElement","fontFamily","toUpperCase"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Header} from 'semantic-ui-react';\r\nimport threeEntryPoint from \"./threejs/threeEntryPoint\";\r\nimport \"./canvas.css\";\r\n\r\nimport * as THREE from 'three';\r\n//import Qualaroo from './QualarooLoader';\r\n\r\n//import {THREE} from '../arbuild/js/three.js';\r\n//require('../arbuild/js/three.js');\r\n\r\n    var scene, camera, renderer, clock, deltaTime, totalTime;\r\n    var arToolkitSource, arToolkitContext;\r\n    var markerRoot1, markerRoot2;\r\n    var mesh1;\r\n\r\nexport default class CanvasComponent extends Component {\r\n\tconstructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        activeItem: this.props.activeItem,\r\n        scriptloaded: [],\r\n        init:false,\r\n        delay:100\r\n    };\r\n  }\r\n\r\n\r\n    componentDidMount() {\r\n\t    //threeEntryPoint(this.threeRootElement);\r\n        \r\n        //this.loadscript('./assets/arbuild/js/three.js');\r\n        /*\r\n        this.loadscript('./assets/arbuild/jsartoolkit5/artoolkit.min.js');\r\n        this.loadscript('./assets/arbuild/jsartoolkit5/artoolkit.api.js');\r\n        this.loadscript('./assets/arbuild/threex/threex-artoolkitsource.js');\r\n        this.loadscript('./assets/arbuild/threex/threex-artoolkitcontext.js');\r\n        this.loadscript('./assets/arbuild/threex/threex-arbasecontrols.js');\r\n        this.loadscript('./assets/arbuild/threex/threex-armarkercontrols.js');\r\n\r\n        this.interval = setInterval(this.tick, this.state.delay);\r\n        */\r\n\r\n        //scene = new window.three.THREE.Scene();      \r\n    }\r\n    async loadscript(url){\r\n        var script = document.createElement('script');\r\n        script.type = 'text/javascript';\r\n        if (script.readyState){  //IE\r\n            script.onreadystatechange = function(){\r\n                if (script.readyState == \"loaded\" ||\r\n                        script.readyState == \"complete\"){\r\n                    script.onreadystatechange = null;\r\n                    //callback();\r\n                }\r\n            };\r\n        } else {  //Others\r\n            script.onload = function(){\r\n                script.src = url;\r\n                console.log('a');\r\n            };\r\n        }\r\n        document.getElementsByTagName('head')[0].appendChild(script);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {    \r\n        if (prevState.delay !== this.state.delay) {      \r\n            clearInterval(this.interval);      \r\n            this.interval = setInterval(this.tick, this.state.delay);    \r\n        }  \r\n    }\r\n\r\n    handleDelayChange = (e) => {\r\n        this.setState({ delay: Number(e.target.value) });\r\n\r\n    }\r\n\r\n    componentWillUnmount() {    \r\n        clearInterval(this.interval);  \r\n    }  \r\n\r\n    tick = () => {   \r\n        if (this.state.init){\r\n            this.animate();\r\n            console.log('nn');\r\n        }else{\r\n            console.log('err');\r\n        }\r\n    }\r\n\r\n\tinit(){\r\n\r\n        scene = new window.THREE.Scene();\r\n        let ambientLight = new window.THREE.AmbientLight( 0xcccccc, 0.5 );\r\n        scene.add( ambientLight );\r\n            \r\n        camera = new window.THREE.Camera();\r\n        scene.add(camera);\r\n\r\n        renderer = new window.THREE.WebGLRenderer({\r\n            antialias : true,\r\n            alpha: true\r\n        });\r\n        renderer.setClearColor(new window.THREE.Color('lightgrey'), 0)\r\n        renderer.setSize( 640, 480 );\r\n        renderer.domElement.style.position = 'absolute'\r\n        renderer.domElement.style.top = '0px'\r\n        renderer.domElement.style.left = '0px'\r\n        document.body.appendChild( renderer.domElement );\r\n\r\n        clock = new window.THREE.Clock();\r\n        deltaTime = 0;\r\n        totalTime = 0;\r\n      \r\n      ////////////////////////////////////////////////////////////\r\n      // setup arToolkitSource\r\n      ////////////////////////////////////////////////////////////\r\n\r\n        arToolkitSource = new window.THREEx.ArToolkitSource({\r\n            sourceType : 'webcam',\r\n        });\r\n\r\n          function onResize()\r\n          {\r\n            arToolkitSource.onResize()  \r\n            arToolkitSource.copySizeTo(renderer.domElement) \r\n            if ( arToolkitContext.arController !== null )\r\n            {\r\n              arToolkitSource.copySizeTo(arToolkitContext.arController.canvas)  \r\n            } \r\n          }\r\n\r\n          arToolkitSource.init(function onReady(){\r\n            onResize()\r\n          });\r\n      \r\n          // handle resize event\r\n          window.addEventListener('resize', function(){\r\n            onResize()\r\n          });\r\n      \r\n          ////////////////////////////////////////////////////////////\r\n          // setup arToolkitContext\r\n          ////////////////////////////////////////////////////////////  \r\n\r\n          // create atToolkitContext\r\n          arToolkitContext = new window.THREEx.ArToolkitContext({\r\n            cameraParametersUrl: '../arbuild/data/camera_para.dat',\r\n            detectionMode: 'mono'\r\n          });\r\n          \r\n          // copy projection matrix to camera when initialization complete\r\n          arToolkitContext.init( function onCompleted(){\r\n            camera.projectionMatrix.copy( arToolkitContext.getProjectionMatrix() );\r\n          });\r\n\r\n          ////////////////////////////////////////////////////////////\r\n          // setup markerRoots\r\n          ////////////////////////////////////////////////////////////\r\n\r\n          // build markerControls\r\n          markerRoot1 = new window.THREE.Group();\r\n          scene.add(markerRoot1);\r\n          let markerControls1 = new window.THREEx.ArMarkerControls(arToolkitContext, markerRoot1, {\r\n            type: 'pattern', patternUrl: \"../arbuild/data/hiro.patt\",\r\n          })\r\n\r\n          let geometry1 = new window.THREE.CubeGeometry(1,1,1);\r\n          let material1 = new window.THREE.MeshNormalMaterial({\r\n            transparent: true,\r\n            opacity: 0.5,\r\n            side: window.THREE.DoubleSide\r\n          }); \r\n          \r\n          mesh1 = new window.THREE.Mesh( geometry1, material1 );\r\n          mesh1.position.y = 0.5;\r\n          \r\n          markerRoot1.add( mesh1 );\r\n    }\r\n\r\n    update()\r\n    {\r\n      // update artoolkit on every frame\r\n      if ( arToolkitSource.ready !== false )\r\n        arToolkitContext.update( arToolkitSource.domElement );\r\n    }\r\n\r\n\r\n    render()\r\n    {\r\n      renderer.render( scene, camera );\r\n    }\r\n\r\n\r\n    animate()\r\n    {\r\n      requestAnimationFrame(this.animate);\r\n      deltaTime = clock.getDelta();\r\n      totalTime += deltaTime;\r\n      this.update();\r\n      this.render();\r\n    }\r\n\r\n    render () {\r\n    \t\r\n        return (\r\n        \t\r\n            <div id=\"panel-canvas\" className=\"panel-canvas\" ref={element => this.threeRootElement = element}>\r\n            \t  <Qualaroo delayMs={500}/>\r\n            \t  <div id=\"canvas-gui-container\">\r\n            \t  \t<Header as='h2' color='black' inverted text-align='center' key={this.state.activeItem}  style={{fontFamily: 'Titillium Web'}}>{this.state.activeItem.toUpperCase()}</Header>\r\n            \t  </div>\r\n            </div>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}