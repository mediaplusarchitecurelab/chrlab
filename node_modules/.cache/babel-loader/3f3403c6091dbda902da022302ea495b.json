{"ast":null,"code":"/**\n * @author mrdoob / http://mrdoob.com/\n */\nimport { Color } from '../../math/Color.js';\nimport { Matrix4 } from '../../math/Matrix4.js';\nimport { Vector2 } from '../../math/Vector2.js';\nimport { Vector3 } from '../../math/Vector3.js';\n\nfunction UniformsCache() {\n  var lights = {};\n  return {\n    get: function (light) {\n      if (lights[light.id] !== undefined) {\n        return lights[light.id];\n      }\n\n      var uniforms;\n\n      switch (light.type) {\n        case 'DirectionalLight':\n          uniforms = {\n            direction: new Vector3(),\n            color: new Color()\n          };\n          break;\n\n        case 'SpotLight':\n          uniforms = {\n            position: new Vector3(),\n            direction: new Vector3(),\n            color: new Color(),\n            distance: 0,\n            coneCos: 0,\n            penumbraCos: 0,\n            decay: 0\n          };\n          break;\n\n        case 'PointLight':\n          uniforms = {\n            position: new Vector3(),\n            color: new Color(),\n            distance: 0,\n            decay: 0\n          };\n          break;\n\n        case 'HemisphereLight':\n          uniforms = {\n            direction: new Vector3(),\n            skyColor: new Color(),\n            groundColor: new Color()\n          };\n          break;\n\n        case 'RectAreaLight':\n          uniforms = {\n            color: new Color(),\n            position: new Vector3(),\n            halfWidth: new Vector3(),\n            halfHeight: new Vector3()\n          };\n          break;\n      }\n\n      lights[light.id] = uniforms;\n      return uniforms;\n    }\n  };\n}\n\nfunction ShadowUniformsCache() {\n  var lights = {};\n  return {\n    get: function (light) {\n      if (lights[light.id] !== undefined) {\n        return lights[light.id];\n      }\n\n      var uniforms;\n\n      switch (light.type) {\n        case 'DirectionalLight':\n          uniforms = {\n            shadowBias: 0,\n            shadowRadius: 1,\n            shadowMapSize: new Vector2()\n          };\n          break;\n\n        case 'SpotLight':\n          uniforms = {\n            shadowBias: 0,\n            shadowRadius: 1,\n            shadowMapSize: new Vector2()\n          };\n          break;\n\n        case 'PointLight':\n          uniforms = {\n            shadowBias: 0,\n            shadowRadius: 1,\n            shadowMapSize: new Vector2(),\n            shadowCameraNear: 1,\n            shadowCameraFar: 1000\n          };\n          break;\n        // TODO (abelnation): set RectAreaLight shadow uniforms\n      }\n\n      lights[light.id] = uniforms;\n      return uniforms;\n    }\n  };\n}\n\nvar nextVersion = 0;\n\nfunction shadowCastingLightsFirst(lightA, lightB) {\n  return (lightB.castShadow ? 1 : 0) - (lightA.castShadow ? 1 : 0);\n}\n\nfunction WebGLLights() {\n  var cache = new UniformsCache();\n  var shadowCache = ShadowUniformsCache();\n  var state = {\n    version: 0,\n    hash: {\n      directionalLength: -1,\n      pointLength: -1,\n      spotLength: -1,\n      rectAreaLength: -1,\n      hemiLength: -1,\n      numDirectionalShadows: -1,\n      numPointShadows: -1,\n      numSpotShadows: -1\n    },\n    ambient: [0, 0, 0],\n    probe: [],\n    directional: [],\n    directionalShadow: [],\n    directionalShadowMap: [],\n    directionalShadowMatrix: [],\n    spot: [],\n    spotShadow: [],\n    spotShadowMap: [],\n    spotShadowMatrix: [],\n    rectArea: [],\n    point: [],\n    pointShadow: [],\n    pointShadowMap: [],\n    pointShadowMatrix: [],\n    hemi: []\n  };\n\n  for (var i = 0; i < 9; i++) state.probe.push(new Vector3());\n\n  var vector3 = new Vector3();\n  var matrix4 = new Matrix4();\n  var matrix42 = new Matrix4();\n\n  function setup(lights, shadows, camera) {\n    var r = 0,\n        g = 0,\n        b = 0;\n\n    for (var i = 0; i < 9; i++) state.probe[i].set(0, 0, 0);\n\n    var directionalLength = 0;\n    var pointLength = 0;\n    var spotLength = 0;\n    var rectAreaLength = 0;\n    var hemiLength = 0;\n    var numDirectionalShadows = 0;\n    var numPointShadows = 0;\n    var numSpotShadows = 0;\n    var viewMatrix = camera.matrixWorldInverse;\n    lights.sort(shadowCastingLightsFirst);\n\n    for (var i = 0, l = lights.length; i < l; i++) {\n      var light = lights[i];\n      var color = light.color;\n      var intensity = light.intensity;\n      var distance = light.distance;\n      var shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;\n\n      if (light.isAmbientLight) {\n        r += color.r * intensity;\n        g += color.g * intensity;\n        b += color.b * intensity;\n      } else if (light.isLightProbe) {\n        for (var j = 0; j < 9; j++) {\n          state.probe[j].addScaledVector(light.sh.coefficients[j], intensity);\n        }\n      } else if (light.isDirectionalLight) {\n        var uniforms = cache.get(light);\n        uniforms.color.copy(light.color).multiplyScalar(light.intensity);\n        uniforms.direction.setFromMatrixPosition(light.matrixWorld);\n        vector3.setFromMatrixPosition(light.target.matrixWorld);\n        uniforms.direction.sub(vector3);\n        uniforms.direction.transformDirection(viewMatrix);\n\n        if (light.castShadow) {\n          var shadow = light.shadow;\n          var shadowUniforms = shadowCache.get(light);\n          shadowUniforms.shadowBias = shadow.bias;\n          shadowUniforms.shadowRadius = shadow.radius;\n          shadowUniforms.shadowMapSize = shadow.mapSize;\n          state.directionalShadow[directionalLength] = shadowUniforms;\n          state.directionalShadowMap[directionalLength] = shadowMap;\n          state.directionalShadowMatrix[directionalLength] = light.shadow.matrix;\n          numDirectionalShadows++;\n        }\n\n        state.directional[directionalLength] = uniforms;\n        directionalLength++;\n      } else if (light.isSpotLight) {\n        var uniforms = cache.get(light);\n        uniforms.position.setFromMatrixPosition(light.matrixWorld);\n        uniforms.position.applyMatrix4(viewMatrix);\n        uniforms.color.copy(color).multiplyScalar(intensity);\n        uniforms.distance = distance;\n        uniforms.direction.setFromMatrixPosition(light.matrixWorld);\n        vector3.setFromMatrixPosition(light.target.matrixWorld);\n        uniforms.direction.sub(vector3);\n        uniforms.direction.transformDirection(viewMatrix);\n        uniforms.coneCos = Math.cos(light.angle);\n        uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));\n        uniforms.decay = light.decay;\n\n        if (light.castShadow) {\n          var shadow = light.shadow;\n          var shadowUniforms = shadowCache.get(light);\n          shadowUniforms.shadowBias = shadow.bias;\n          shadowUniforms.shadowRadius = shadow.radius;\n          shadowUniforms.shadowMapSize = shadow.mapSize;\n          state.spotShadow[spotLength] = shadowUniforms;\n          state.spotShadowMap[spotLength] = shadowMap;\n          state.spotShadowMatrix[spotLength] = light.shadow.matrix;\n          numSpotShadows++;\n        }\n\n        state.spot[spotLength] = uniforms;\n        spotLength++;\n      } else if (light.isRectAreaLight) {\n        var uniforms = cache.get(light); // (a) intensity is the total visible light emitted\n        //uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n        // (b) intensity is the brightness of the light\n\n        uniforms.color.copy(color).multiplyScalar(intensity);\n        uniforms.position.setFromMatrixPosition(light.matrixWorld);\n        uniforms.position.applyMatrix4(viewMatrix); // extract local rotation of light to derive width/height half vectors\n\n        matrix42.identity();\n        matrix4.copy(light.matrixWorld);\n        matrix4.premultiply(viewMatrix);\n        matrix42.extractRotation(matrix4);\n        uniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);\n        uniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);\n        uniforms.halfWidth.applyMatrix4(matrix42);\n        uniforms.halfHeight.applyMatrix4(matrix42); // TODO (abelnation): RectAreaLight distance?\n        // uniforms.distance = distance;\n\n        state.rectArea[rectAreaLength] = uniforms;\n        rectAreaLength++;\n      } else if (light.isPointLight) {\n        var uniforms = cache.get(light);\n        uniforms.position.setFromMatrixPosition(light.matrixWorld);\n        uniforms.position.applyMatrix4(viewMatrix);\n        uniforms.color.copy(light.color).multiplyScalar(light.intensity);\n        uniforms.distance = light.distance;\n        uniforms.decay = light.decay;\n\n        if (light.castShadow) {\n          var shadow = light.shadow;\n          var shadowUniforms = shadowCache.get(light);\n          shadowUniforms.shadowBias = shadow.bias;\n          shadowUniforms.shadowRadius = shadow.radius;\n          shadowUniforms.shadowMapSize = shadow.mapSize;\n          shadowUniforms.shadowCameraNear = shadow.camera.near;\n          shadowUniforms.shadowCameraFar = shadow.camera.far;\n          state.pointShadow[pointLength] = shadowUniforms;\n          state.pointShadowMap[pointLength] = shadowMap;\n          state.pointShadowMatrix[pointLength] = light.shadow.matrix;\n          numPointShadows++;\n        }\n\n        state.point[pointLength] = uniforms;\n        pointLength++;\n      } else if (light.isHemisphereLight) {\n        var uniforms = cache.get(light);\n        uniforms.direction.setFromMatrixPosition(light.matrixWorld);\n        uniforms.direction.transformDirection(viewMatrix);\n        uniforms.direction.normalize();\n        uniforms.skyColor.copy(light.color).multiplyScalar(intensity);\n        uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity);\n        state.hemi[hemiLength] = uniforms;\n        hemiLength++;\n      }\n    }\n\n    state.ambient[0] = r;\n    state.ambient[1] = g;\n    state.ambient[2] = b;\n    var hash = state.hash;\n\n    if (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows) {\n      state.directional.length = directionalLength;\n      state.spot.length = spotLength;\n      state.rectArea.length = rectAreaLength;\n      state.point.length = pointLength;\n      state.hemi.length = hemiLength;\n      state.directionalShadow.length = numDirectionalShadows;\n      state.directionalShadowMap.length = numDirectionalShadows;\n      state.pointShadow.length = numPointShadows;\n      state.pointShadowMap.length = numPointShadows;\n      state.spotShadow.length = numSpotShadows;\n      state.spotShadowMap.length = numSpotShadows;\n      state.directionalShadowMatrix.length = numDirectionalShadows;\n      state.pointShadowMatrix.length = numPointShadows;\n      state.spotShadowMatrix.length = numSpotShadows;\n      hash.directionalLength = directionalLength;\n      hash.pointLength = pointLength;\n      hash.spotLength = spotLength;\n      hash.rectAreaLength = rectAreaLength;\n      hash.hemiLength = hemiLength;\n      hash.numDirectionalShadows = numDirectionalShadows;\n      hash.numPointShadows = numPointShadows;\n      hash.numSpotShadows = numSpotShadows;\n      state.version = nextVersion++;\n    }\n  }\n\n  return {\n    setup: setup,\n    state: state\n  };\n}\n\nexport { WebGLLights };","map":{"version":3,"sources":["H:/chrlab/src/component/panelComponent/Canvas/threejs/src/renderers/webgl/WebGLLights.js"],"names":["Color","Matrix4","Vector2","Vector3","UniformsCache","lights","get","light","id","undefined","uniforms","type","direction","color","position","distance","coneCos","penumbraCos","decay","skyColor","groundColor","halfWidth","halfHeight","ShadowUniformsCache","shadowBias","shadowRadius","shadowMapSize","shadowCameraNear","shadowCameraFar","nextVersion","shadowCastingLightsFirst","lightA","lightB","castShadow","WebGLLights","cache","shadowCache","state","version","hash","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","numDirectionalShadows","numPointShadows","numSpotShadows","ambient","probe","directional","directionalShadow","directionalShadowMap","directionalShadowMatrix","spot","spotShadow","spotShadowMap","spotShadowMatrix","rectArea","point","pointShadow","pointShadowMap","pointShadowMatrix","hemi","i","push","vector3","matrix4","matrix42","setup","shadows","camera","r","g","b","set","viewMatrix","matrixWorldInverse","sort","l","length","intensity","shadowMap","shadow","map","texture","isAmbientLight","isLightProbe","j","addScaledVector","sh","coefficients","isDirectionalLight","copy","multiplyScalar","setFromMatrixPosition","matrixWorld","target","sub","transformDirection","shadowUniforms","bias","radius","mapSize","matrix","isSpotLight","applyMatrix4","Math","cos","angle","penumbra","isRectAreaLight","identity","premultiply","extractRotation","width","height","isPointLight","near","far","isHemisphereLight","normalize"],"mappings":"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","sourcesContent":["/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nimport { Color } from '../../math/Color.js';\nimport { Matrix4 } from '../../math/Matrix4.js';\nimport { Vector2 } from '../../math/Vector2.js';\nimport { Vector3 } from '../../math/Vector3.js';\n\nfunction UniformsCache() {\n\n\tvar lights = {};\n\n\treturn {\n\n\t\tget: function ( light ) {\n\n\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\treturn lights[ light.id ];\n\n\t\t\t}\n\n\t\t\tvar uniforms;\n\n\t\t\tswitch ( light.type ) {\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tcolor: new Color()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\treturn uniforms;\n\n\t\t}\n\n\t};\n\n}\n\nfunction ShadowUniformsCache() {\n\n\tvar lights = {};\n\n\treturn {\n\n\t\tget: function ( light ) {\n\n\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\treturn lights[ light.id ];\n\n\t\t\t}\n\n\t\t\tvar uniforms;\n\n\t\t\tswitch ( light.type ) {\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\n\t\t\t}\n\n\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\treturn uniforms;\n\n\t\t}\n\n\t};\n\n}\n\n\n\nvar nextVersion = 0;\n\nfunction shadowCastingLightsFirst( lightA, lightB ) {\n\n\treturn ( lightB.castShadow ? 1 : 0 ) - ( lightA.castShadow ? 1 : 0 );\n\n}\n\nfunction WebGLLights() {\n\n\tvar cache = new UniformsCache();\n\n\tvar shadowCache = ShadowUniformsCache();\n\n\tvar state = {\n\n\t\tversion: 0,\n\n\t\thash: {\n\t\t\tdirectionalLength: - 1,\n\t\t\tpointLength: - 1,\n\t\t\tspotLength: - 1,\n\t\t\trectAreaLength: - 1,\n\t\t\themiLength: - 1,\n\n\t\t\tnumDirectionalShadows: - 1,\n\t\t\tnumPointShadows: - 1,\n\t\t\tnumSpotShadows: - 1\n\t\t},\n\n\t\tambient: [ 0, 0, 0 ],\n\t\tprobe: [],\n\t\tdirectional: [],\n\t\tdirectionalShadow: [],\n\t\tdirectionalShadowMap: [],\n\t\tdirectionalShadowMatrix: [],\n\t\tspot: [],\n\t\tspotShadow: [],\n\t\tspotShadowMap: [],\n\t\tspotShadowMatrix: [],\n\t\trectArea: [],\n\t\tpoint: [],\n\t\tpointShadow: [],\n\t\tpointShadowMap: [],\n\t\tpointShadowMatrix: [],\n\t\themi: []\n\n\t};\n\n\tfor ( var i = 0; i < 9; i ++ ) state.probe.push( new Vector3() );\n\n\tvar vector3 = new Vector3();\n\tvar matrix4 = new Matrix4();\n\tvar matrix42 = new Matrix4();\n\n\tfunction setup( lights, shadows, camera ) {\n\n\t\tvar r = 0, g = 0, b = 0;\n\n\t\tfor ( var i = 0; i < 9; i ++ ) state.probe[ i ].set( 0, 0, 0 );\n\n\t\tvar directionalLength = 0;\n\t\tvar pointLength = 0;\n\t\tvar spotLength = 0;\n\t\tvar rectAreaLength = 0;\n\t\tvar hemiLength = 0;\n\n\t\tvar numDirectionalShadows = 0;\n\t\tvar numPointShadows = 0;\n\t\tvar numSpotShadows = 0;\n\n\t\tvar viewMatrix = camera.matrixWorldInverse;\n\n\t\tlights.sort( shadowCastingLightsFirst );\n\n\t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\tvar light = lights[ i ];\n\n\t\t\tvar color = light.color;\n\t\t\tvar intensity = light.intensity;\n\t\t\tvar distance = light.distance;\n\n\t\t\tvar shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\tr += color.r * intensity;\n\t\t\t\tg += color.g * intensity;\n\t\t\t\tb += color.b * intensity;\n\n\t\t\t} else if ( light.isLightProbe ) {\n\n\t\t\t\tfor ( var j = 0; j < 9; j ++ ) {\n\n\t\t\t\t\tstate.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );\n\n\t\t\t\t}\n\n\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\tvar shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\tstate.directionalShadow[ directionalLength ] = shadowUniforms;\n\t\t\t\t\tstate.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\t\tstate.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\n\t\t\t\t\tnumDirectionalShadows ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.directional[ directionalLength ] = uniforms;\n\n\t\t\t\tdirectionalLength ++;\n\n\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\t\t\t\tuniforms.distance = distance;\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\tvar shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\tstate.spotShadow[ spotLength ] = shadowUniforms;\n\t\t\t\t\tstate.spotShadowMap[ spotLength ] = shadowMap;\n\t\t\t\t\tstate.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\n\t\t\t\t\tnumSpotShadows ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.spot[ spotLength ] = uniforms;\n\n\t\t\t\tspotLength ++;\n\n\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\t// (a) intensity is the total visible light emitted\n\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\n\t\t\t\t// (b) intensity is the brightness of the light\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t// extract local rotation of light to derive width/height half vectors\n\t\t\t\tmatrix42.identity();\n\t\t\t\tmatrix4.copy( light.matrixWorld );\n\t\t\t\tmatrix4.premultiply( viewMatrix );\n\t\t\t\tmatrix42.extractRotation( matrix4 );\n\n\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\tuniforms.halfWidth.applyMatrix4( matrix42 );\n\t\t\t\tuniforms.halfHeight.applyMatrix4( matrix42 );\n\n\t\t\t\t// TODO (abelnation): RectAreaLight distance?\n\t\t\t\t// uniforms.distance = distance;\n\n\t\t\t\tstate.rectArea[ rectAreaLength ] = uniforms;\n\n\t\t\t\trectAreaLength ++;\n\n\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\n\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\t\tvar shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\tshadowUniforms.shadowCameraNear = shadow.camera.near;\n\t\t\t\t\tshadowUniforms.shadowCameraFar = shadow.camera.far;\n\n\t\t\t\t\tstate.pointShadow[ pointLength ] = shadowUniforms;\n\t\t\t\t\tstate.pointShadowMap[ pointLength ] = shadowMap;\n\t\t\t\t\tstate.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\n\n\t\t\t\t\tnumPointShadows ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.point[ pointLength ] = uniforms;\n\n\t\t\t\tpointLength ++;\n\n\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\tvar uniforms = cache.get( light );\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\t\t\tuniforms.direction.normalize();\n\n\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\n\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\n\n\t\t\t\tstate.hemi[ hemiLength ] = uniforms;\n\n\t\t\t\themiLength ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.ambient[ 0 ] = r;\n\t\tstate.ambient[ 1 ] = g;\n\t\tstate.ambient[ 2 ] = b;\n\n\t\tvar hash = state.hash;\n\n\t\tif ( hash.directionalLength !== directionalLength ||\n\t\t\thash.pointLength !== pointLength ||\n\t\t\thash.spotLength !== spotLength ||\n\t\t\thash.rectAreaLength !== rectAreaLength ||\n\t\t\thash.hemiLength !== hemiLength ||\n\t\t\thash.numDirectionalShadows !== numDirectionalShadows ||\n\t\t\thash.numPointShadows !== numPointShadows ||\n\t\t\thash.numSpotShadows !== numSpotShadows ) {\n\n\t\t\tstate.directional.length = directionalLength;\n\t\t\tstate.spot.length = spotLength;\n\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\tstate.point.length = pointLength;\n\t\t\tstate.hemi.length = hemiLength;\n\n\t\t\tstate.directionalShadow.length = numDirectionalShadows;\n\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\n\t\t\tstate.pointShadow.length = numPointShadows;\n\t\t\tstate.pointShadowMap.length = numPointShadows;\n\t\t\tstate.spotShadow.length = numSpotShadows;\n\t\t\tstate.spotShadowMap.length = numSpotShadows;\n\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\n\t\t\tstate.pointShadowMatrix.length = numPointShadows;\n\t\t\tstate.spotShadowMatrix.length = numSpotShadows;\n\n\t\t\thash.directionalLength = directionalLength;\n\t\t\thash.pointLength = pointLength;\n\t\t\thash.spotLength = spotLength;\n\t\t\thash.rectAreaLength = rectAreaLength;\n\t\t\thash.hemiLength = hemiLength;\n\n\t\t\thash.numDirectionalShadows = numDirectionalShadows;\n\t\t\thash.numPointShadows = numPointShadows;\n\t\t\thash.numSpotShadows = numSpotShadows;\n\n\t\t\tstate.version = nextVersion ++;\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\tsetup: setup,\n\t\tstate: state\n\t};\n\n}\n\n\nexport { WebGLLights };\n"]},"metadata":{},"sourceType":"module"}