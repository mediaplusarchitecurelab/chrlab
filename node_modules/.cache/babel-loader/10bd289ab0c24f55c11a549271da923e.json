{"ast":null,"code":"var _jsxFileName = \"D:\\\\chrlab\\\\src\\\\component\\\\menuComponent\\\\menuComponent.js\";\nimport React from 'react';\nimport { Menu, Dropdown } from 'semantic-ui-react';\nimport logo from \"./assets/logo.svg\";\nimport styled, { keyframes } from 'styled-components'; // stlyed \n//======================logo======================\n\nconst spin = keyframes`\n    \t0% { transform: rotate(0deg); }\n    \t25% { transform: rotate(360deg); }\n    \t50% { transform: rotate(0deg); }\n    \t75% { transform: rotate(-360deg); }\n    \t100% { transform: rotate(0deg); }\n\t`;\nconst SpinLogo = styled.img`\n\t \tanimation: ${spin} 4s linear infinite;\n\t `; //======================menutab======================\n\nconst HeaderContain = styled.div`\n\t\twidth:100%;\n\t`;\nconst menuMapurl = './assets/json/menuMap.json';\nexport default class MenuComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.menurender = () => {\n      let menuitem = [];\n\n      if (this.state.menuMap != null) {\n        for (let i = 0; i < this.state.menuMap.length; i += 1) {\n          let type = this.state.menuMap[i].type;\n          let title = this.state.menuMap[i].title; //=======================BUTTOn====================\n\n          if (type === 'button') {\n            menuitem.push( /*#__PURE__*/React.createElement(Menu.Item, {\n              key: title,\n              id: title,\n              active: this.state.activeItem === {\n                title\n              },\n              onClick: this.props.handleItemUpdate,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 15\n              }\n            }, title.toUpperCase())); //=======================DROPDOWN====================\n          } else if (type === 'dropdown') {\n            let dropdownitem = [];\n\n            for (let j = 0; j < this.state.menuMap[i].sub.length; j += 1) {\n              let dtype = this.state.menuMap[i].sub[j].type;\n              let dtitle = this.state.menuMap[i].sub[j].title; //=======================TOPIC====================\n\n              if (dtype === 'topic') {\n                dropdownitem.push( /*#__PURE__*/React.createElement(Dropdown.Header, {\n                  key: `${title}-${dtitle}`,\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 78,\n                    columnNumber: 41\n                  }\n                }, dtitle.toUpperCase())); //=======================DIVIDER====================\n              } else if (dtype === 'divider') {\n                dropdownitem.push( /*#__PURE__*/React.createElement(Dropdown.Divider, {\n                  key: `${title}-divider-${j}`,\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 81,\n                    columnNumber: 41\n                  }\n                })); //=======================BUTTON====================\n              } else if (dtype === 'button') {\n                dropdownitem.push( /*#__PURE__*/React.createElement(Dropdown.Item, {\n                  key: `${title}-${dtitle}`,\n                  id: `${title}-${dtitle}`,\n                  active: this.state.activeItem === `${title}-${dtitle}`,\n                  onClick: this.props.handleItemUpdate,\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 85,\n                    columnNumber: 25\n                  }\n                }, dtitle.toUpperCase()));\n              } else if (dtype === 'dropdown') {\n                let dropdownitemsub = [];\n\n                for (let k = 0; k < this.state.menuMap[i].sub[j].sub.length; k += 1) {\n                  let ddtype = this.state.menuMap[i].sub[j].sub[k].type;\n                  let ddtitle = this.state.menuMap[i].sub[j].sub[k].title; //=======================TOPIC====================\n\n                  if (ddtype === 'topic') {\n                    dropdownitemsub.push( /*#__PURE__*/React.createElement(Dropdown.Header, {\n                      key: `${title}-${dtitle}-${ddtitle}`,\n                      __self: this,\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 100,\n                        columnNumber: 56\n                      }\n                    }, ddtitle.toUpperCase())); //=======================DIVIDER====================\n                  } else if (ddtype === 'divider') {\n                    dropdownitemsub.push( /*#__PURE__*/React.createElement(Dropdown.Divider, {\n                      key: `${title}-${dtitle}-divider-${j}`,\n                      __self: this,\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 103,\n                        columnNumber: 56\n                      }\n                    })); //=======================BUTTON====================\n                  } else if (ddtype === 'button') {\n                    dropdownitemsub.push( /*#__PURE__*/React.createElement(Dropdown.Item, {\n                      key: `${title}-${dtitle}-${ddtitle}`,\n                      id: `${title}-${dtitle}-${ddtitle}`,\n                      active: this.state.activeItem === `${title}-${dtitle}-${ddtitle}`,\n                      onClick: this.props.handleItemUpdate,\n                      __self: this,\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 107,\n                        columnNumber: 37\n                      }\n                    }, ddtitle.toUpperCase()));\n                  }\n                }\n\n                dropdownitem.push( /*#__PURE__*/React.createElement(Dropdown, {\n                  text: dtitle.toUpperCase(),\n                  key: `${title}-${dtitle}`,\n                  pointing: true,\n                  className: \"link item left\",\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 118,\n                    columnNumber: 31\n                  }\n                }, /*#__PURE__*/React.createElement(Dropdown.Menu, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 119,\n                    columnNumber: 33\n                  }\n                }, dropdownitemsub)));\n              }\n            }\n\n            menuitem.push( /*#__PURE__*/React.createElement(Dropdown, {\n              text: title.toUpperCase(),\n              key: title,\n              pointing: true,\n              className: \"link item\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(Dropdown.Menu, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 23\n              }\n            }, dropdownitem)));\n          }\n        }\n      }\n\n      return menuitem;\n    };\n\n    this.state = {\n      activeItem: null\n    };\n  }\n\n  componentDidMount() {\n    fetch(menuMapurl).then(response => {\n      return response.text();\n    }).then(data => {\n      this.setState({\n        menuMap: JSON.parse(data)\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(HeaderContain, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Menu, {\n      style: {\n        fontFamily: 'Titillium Web',\n        fontSize: '1.1em'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Menu.Item, {\n      key: \"logo-menu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(SpinLogo, {\n      src: logo,\n      alt: \"logo-spin\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 38\n      }\n    }), \" CFR Lab \"), this.menurender()));\n  }\n\n}","map":{"version":3,"sources":["D:/chrlab/src/component/menuComponent/menuComponent.js"],"names":["React","Menu","Dropdown","styled","keyframes","spin","SpinLogo","img","HeaderContain","div","menuMapurl","MenuComponent","Component","constructor","props","menurender","menuitem","state","menuMap","i","length","type","title","push","activeItem","handleItemUpdate","toUpperCase","dropdownitem","j","sub","dtype","dtitle","dropdownitemsub","k","ddtype","ddtitle","componentDidMount","fetch","then","response","text","data","setState","JSON","parse","catch","error","console","log","render","fontFamily","fontSize","logo"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Menu, Dropdown} from 'semantic-ui-react';\r\nimport logo from './assets/logo.svg';\r\nimport styled, { keyframes } from 'styled-components';\r\n\t\r\n\t// stlyed \r\n\t//======================logo======================\r\n    const spin = keyframes`\r\n    \t0% { transform: rotate(0deg); }\r\n    \t25% { transform: rotate(360deg); }\r\n    \t50% { transform: rotate(0deg); }\r\n    \t75% { transform: rotate(-360deg); }\r\n    \t100% { transform: rotate(0deg); }\r\n\t`;\r\n\r\n  const SpinLogo = styled.img`\r\n\t \tanimation: ${spin} 4s linear infinite;\r\n\t `;\r\n\t//======================menutab======================\r\n\tconst HeaderContain = styled.div`\r\n\t\twidth:100%;\r\n\t`;\r\n\r\n  const menuMapurl = './assets/json/menuMap.json';\r\n\r\nexport default class MenuComponent extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      activeItem: null\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(menuMapurl)\r\n    .then((response)=>{\r\n      return response.text();\r\n    })\r\n    .then((data)=>{\r\n      this.setState({menuMap:JSON.parse(data)});\r\n    })\r\n    .catch((error)=>{\r\n      console.log(error);\r\n    });    \r\n  }\r\n\r\n\r\n  menurender = () =>{\r\n    let menuitem=[];\r\n\r\n    if (this.state.menuMap!=null){\r\n\r\n      for(let i=0; i<this.state.menuMap.length; i+=1){\r\n            let type = this.state.menuMap[i].type;\r\n            let title = this.state.menuMap[i].title;\r\n\r\n            //=======================BUTTOn====================\r\n            if (type==='button'){\r\n              menuitem.push(\r\n              <Menu.Item \r\n                key={title} id={title} \r\n                active={this.state.activeItem === {title}}\r\n                onClick={this.props.handleItemUpdate}\r\n              >\r\n                {title.toUpperCase()}\r\n              </Menu.Item>);\r\n\r\n              //=======================DROPDOWN====================\r\n            }else if(type==='dropdown'){\r\n                let dropdownitem=[];\r\n\r\n                for(let j=0; j<this.state.menuMap[i].sub.length; j+=1){\r\n                    let dtype = this.state.menuMap[i].sub[j].type;\r\n                    let dtitle = this.state.menuMap[i].sub[j].title;\r\n                    //=======================TOPIC====================\r\n                    if (dtype==='topic'){\r\n                      dropdownitem.push(<Dropdown.Header key={`${title}-${dtitle}`}>{dtitle.toUpperCase()}</Dropdown.Header>);\r\n                    //=======================DIVIDER====================\r\n                    }else if (dtype==='divider'){\r\n                      dropdownitem.push(<Dropdown.Divider key={`${title}-divider-${j}`}/>);\r\n                    //=======================BUTTON====================\r\n                    }else if (dtype==='button'){\r\n                      dropdownitem.push(\r\n                        <Dropdown.Item\r\n                          key={`${title}-${dtitle}`} id={`${title}-${dtitle}`}\r\n                          active={this.state.activeItem === `${title}-${dtitle}`}\r\n                          onClick={this.props.handleItemUpdate}\r\n                        >\r\n                          {dtitle.toUpperCase()}\r\n                        </Dropdown.Item>);\r\n                    }else if (dtype==='dropdown'){\r\n                            let dropdownitemsub=[];\r\n\r\n                            for(let k=0; k<this.state.menuMap[i].sub[j].sub.length; k+=1){\r\n                                let ddtype = this.state.menuMap[i].sub[j].sub[k].type;\r\n                                let ddtitle = this.state.menuMap[i].sub[j].sub[k].title;\r\n                                //=======================TOPIC====================\r\n                                if (ddtype==='topic'){\r\n                                  dropdownitemsub.push(<Dropdown.Header key={`${title}-${dtitle}-${ddtitle}`}>{ddtitle.toUpperCase()}</Dropdown.Header>);\r\n                                //=======================DIVIDER====================\r\n                                }else if (ddtype==='divider'){\r\n                                  dropdownitemsub.push(<Dropdown.Divider key={`${title}-${dtitle}-divider-${j}`}/>);\r\n                                //=======================BUTTON====================\r\n                                }else if (ddtype==='button'){\r\n                                  dropdownitemsub.push(\r\n                                    <Dropdown.Item\r\n                                      key={`${title}-${dtitle}-${ddtitle}`} id={`${title}-${dtitle}-${ddtitle}`}\r\n                                      active={this.state.activeItem === `${title}-${dtitle}-${ddtitle}`}\r\n                                      onClick={this.props.handleItemUpdate}\r\n                                    >\r\n                                      {ddtitle.toUpperCase()}\r\n                                    </Dropdown.Item>);\r\n                                }\r\n                            }\r\n\r\n                            dropdownitem.push(\r\n                              <Dropdown text={dtitle.toUpperCase()} key={`${title}-${dtitle}`} pointing className='link item left'>\r\n                                <Dropdown.Menu>\r\n                                  {dropdownitemsub}\r\n                                </Dropdown.Menu>\r\n                              </Dropdown>\r\n                            );\r\n                    }\r\n                }\r\n\r\n                menuitem.push(\r\n                    <Dropdown text={title.toUpperCase()} key={title} pointing className='link item'>\r\n                      <Dropdown.Menu>\r\n                        {dropdownitem}\r\n                      </Dropdown.Menu>\r\n                    </Dropdown>\r\n                );\r\n            }\r\n            \r\n      }\r\n    }\r\n    return menuitem;\r\n  };\r\n  \r\n  \r\n  render() {\r\n\r\n\r\n    return (\r\n      <HeaderContain>\r\n        <Menu style={{ fontFamily: 'Titillium Web', fontSize:'1.1em'}}>\r\n          <Menu.Item key='logo-menu'><SpinLogo src={logo} alt='logo-spin'></SpinLogo> CFR Lab </Menu.Item>\r\n          {this.menurender()}\r\n        </Menu>\r\n      </HeaderContain>\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}