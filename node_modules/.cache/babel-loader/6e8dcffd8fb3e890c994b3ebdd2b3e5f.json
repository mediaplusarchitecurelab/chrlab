{"ast":null,"code":"import { Interpolant } from '../Interpolant.js';\n/**\n *\n * Interpolant that evaluates to the sample value at the position preceeding\n * the parameter.\n *\n * @author tschw\n */\n\nfunction DiscreteInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n  Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n}\n\nDiscreteInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {\n  constructor: DiscreteInterpolant,\n  interpolate_: function (i1\n  /*, t0, t, t1 */\n  ) {\n    return this.copySampleValue_(i1 - 1);\n  }\n});\nexport { DiscreteInterpolant };","map":{"version":3,"sources":["D:/chrlab/src/component/panelComponent/Canvas/threejs/src/math/interpolants/DiscreteInterpolant.js"],"names":["Interpolant","DiscreteInterpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","call","prototype","Object","assign","create","constructor","interpolate_","i1","copySampleValue_"],"mappings":"AAAA,SAASA,WAAT,QAA4B,mBAA5B;AAEA;;;;;;;;AAQA,SAASC,mBAAT,CAA8BC,kBAA9B,EAAkDC,YAAlD,EAAgEC,UAAhE,EAA4EC,YAA5E,EAA2F;AAE1FL,EAAAA,WAAW,CAACM,IAAZ,CAAkB,IAAlB,EAAwBJ,kBAAxB,EAA4CC,YAA5C,EAA0DC,UAA1D,EAAsEC,YAAtE;AAEA;;AAEDJ,mBAAmB,CAACM,SAApB,GAAgCC,MAAM,CAACC,MAAP,CAAeD,MAAM,CAACE,MAAP,CAAeV,WAAW,CAACO,SAA3B,CAAf,EAAuD;AAEtFI,EAAAA,WAAW,EAAEV,mBAFyE;AAItFW,EAAAA,YAAY,EAAE,UAAWC;AAAG;AAAd,IAAiC;AAE9C,WAAO,KAAKC,gBAAL,CAAuBD,EAAE,GAAG,CAA5B,CAAP;AAEA;AARqF,CAAvD,CAAhC;AAaA,SAASZ,mBAAT","sourcesContent":["import { Interpolant } from '../Interpolant.js';\n\n/**\n *\n * Interpolant that evaluates to the sample value at the position preceeding\n * the parameter.\n *\n * @author tschw\n */\n\nfunction DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n}\n\nDiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\n\n\tconstructor: DiscreteInterpolant,\n\n\tinterpolate_: function ( i1 /*, t0, t, t1 */ ) {\n\n\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t}\n\n} );\n\n\nexport { DiscreteInterpolant };\n"]},"metadata":{},"sourceType":"module"}