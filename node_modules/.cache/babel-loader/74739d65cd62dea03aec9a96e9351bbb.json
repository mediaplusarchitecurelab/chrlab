{"ast":null,"code":"/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n */\nimport { MathUtils } from './MathUtils.js';\n\nfunction Quaternion(x, y, z, w) {\n  this._x = x || 0;\n  this._y = y || 0;\n  this._z = z || 0;\n  this._w = w !== undefined ? w : 1;\n}\n\nObject.assign(Quaternion, {\n  slerp: function (qa, qb, qm, t) {\n    return qm.copy(qa).slerp(qb, t);\n  },\n  slerpFlat: function (dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {\n    // fuzz-free, array-based Quaternion SLERP operation\n    var x0 = src0[srcOffset0 + 0],\n        y0 = src0[srcOffset0 + 1],\n        z0 = src0[srcOffset0 + 2],\n        w0 = src0[srcOffset0 + 3],\n        x1 = src1[srcOffset1 + 0],\n        y1 = src1[srcOffset1 + 1],\n        z1 = src1[srcOffset1 + 2],\n        w1 = src1[srcOffset1 + 3];\n\n    if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {\n      var s = 1 - t,\n          cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n          dir = cos >= 0 ? 1 : -1,\n          sqrSin = 1 - cos * cos; // Skip the Slerp for tiny steps to avoid numeric problems:\n\n      if (sqrSin > Number.EPSILON) {\n        var sin = Math.sqrt(sqrSin),\n            len = Math.atan2(sin, cos * dir);\n        s = Math.sin(s * len) / sin;\n        t = Math.sin(t * len) / sin;\n      }\n\n      var tDir = t * dir;\n      x0 = x0 * s + x1 * tDir;\n      y0 = y0 * s + y1 * tDir;\n      z0 = z0 * s + z1 * tDir;\n      w0 = w0 * s + w1 * tDir; // Normalize in case we just did a lerp:\n\n      if (s === 1 - t) {\n        var f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);\n        x0 *= f;\n        y0 *= f;\n        z0 *= f;\n        w0 *= f;\n      }\n    }\n\n    dst[dstOffset] = x0;\n    dst[dstOffset + 1] = y0;\n    dst[dstOffset + 2] = z0;\n    dst[dstOffset + 3] = w0;\n  }\n});\nObject.defineProperties(Quaternion.prototype, {\n  x: {\n    get: function () {\n      return this._x;\n    },\n    set: function (value) {\n      this._x = value;\n\n      this._onChangeCallback();\n    }\n  },\n  y: {\n    get: function () {\n      return this._y;\n    },\n    set: function (value) {\n      this._y = value;\n\n      this._onChangeCallback();\n    }\n  },\n  z: {\n    get: function () {\n      return this._z;\n    },\n    set: function (value) {\n      this._z = value;\n\n      this._onChangeCallback();\n    }\n  },\n  w: {\n    get: function () {\n      return this._w;\n    },\n    set: function (value) {\n      this._w = value;\n\n      this._onChangeCallback();\n    }\n  }\n});\nObject.assign(Quaternion.prototype, {\n  isQuaternion: true,\n  set: function (x, y, z, w) {\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n\n    this._onChangeCallback();\n\n    return this;\n  },\n  clone: function () {\n    return new this.constructor(this._x, this._y, this._z, this._w);\n  },\n  copy: function (quaternion) {\n    this._x = quaternion.x;\n    this._y = quaternion.y;\n    this._z = quaternion.z;\n    this._w = quaternion.w;\n\n    this._onChangeCallback();\n\n    return this;\n  },\n  setFromEuler: function (euler, update) {\n    if (!(euler && euler.isEuler)) {\n      throw new Error('THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.');\n    }\n\n    var x = euler._x,\n        y = euler._y,\n        z = euler._z,\n        order = euler.order; // http://www.mathworks.com/matlabcentral/fileexchange/\n    // \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n    //\tcontent/SpinCalc.m\n\n    var cos = Math.cos;\n    var sin = Math.sin;\n    var c1 = cos(x / 2);\n    var c2 = cos(y / 2);\n    var c3 = cos(z / 2);\n    var s1 = sin(x / 2);\n    var s2 = sin(y / 2);\n    var s3 = sin(z / 2);\n\n    if (order === 'XYZ') {\n      this._x = s1 * c2 * c3 + c1 * s2 * s3;\n      this._y = c1 * s2 * c3 - s1 * c2 * s3;\n      this._z = c1 * c2 * s3 + s1 * s2 * c3;\n      this._w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === 'YXZ') {\n      this._x = s1 * c2 * c3 + c1 * s2 * s3;\n      this._y = c1 * s2 * c3 - s1 * c2 * s3;\n      this._z = c1 * c2 * s3 - s1 * s2 * c3;\n      this._w = c1 * c2 * c3 + s1 * s2 * s3;\n    } else if (order === 'ZXY') {\n      this._x = s1 * c2 * c3 - c1 * s2 * s3;\n      this._y = c1 * s2 * c3 + s1 * c2 * s3;\n      this._z = c1 * c2 * s3 + s1 * s2 * c3;\n      this._w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === 'ZYX') {\n      this._x = s1 * c2 * c3 - c1 * s2 * s3;\n      this._y = c1 * s2 * c3 + s1 * c2 * s3;\n      this._z = c1 * c2 * s3 - s1 * s2 * c3;\n      this._w = c1 * c2 * c3 + s1 * s2 * s3;\n    } else if (order === 'YZX') {\n      this._x = s1 * c2 * c3 + c1 * s2 * s3;\n      this._y = c1 * s2 * c3 + s1 * c2 * s3;\n      this._z = c1 * c2 * s3 - s1 * s2 * c3;\n      this._w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === 'XZY') {\n      this._x = s1 * c2 * c3 - c1 * s2 * s3;\n      this._y = c1 * s2 * c3 - s1 * c2 * s3;\n      this._z = c1 * c2 * s3 + s1 * s2 * c3;\n      this._w = c1 * c2 * c3 + s1 * s2 * s3;\n    }\n\n    if (update !== false) this._onChangeCallback();\n    return this;\n  },\n  setFromAxisAngle: function (axis, angle) {\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n    // assumes axis is normalized\n    var halfAngle = angle / 2,\n        s = Math.sin(halfAngle);\n    this._x = axis.x * s;\n    this._y = axis.y * s;\n    this._z = axis.z * s;\n    this._w = Math.cos(halfAngle);\n\n    this._onChangeCallback();\n\n    return this;\n  },\n  setFromRotationMatrix: function (m) {\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n    var te = m.elements,\n        m11 = te[0],\n        m12 = te[4],\n        m13 = te[8],\n        m21 = te[1],\n        m22 = te[5],\n        m23 = te[9],\n        m31 = te[2],\n        m32 = te[6],\n        m33 = te[10],\n        trace = m11 + m22 + m33,\n        s;\n\n    if (trace > 0) {\n      s = 0.5 / Math.sqrt(trace + 1.0);\n      this._w = 0.25 / s;\n      this._x = (m32 - m23) * s;\n      this._y = (m13 - m31) * s;\n      this._z = (m21 - m12) * s;\n    } else if (m11 > m22 && m11 > m33) {\n      s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n      this._w = (m32 - m23) / s;\n      this._x = 0.25 * s;\n      this._y = (m12 + m21) / s;\n      this._z = (m13 + m31) / s;\n    } else if (m22 > m33) {\n      s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n      this._w = (m13 - m31) / s;\n      this._x = (m12 + m21) / s;\n      this._y = 0.25 * s;\n      this._z = (m23 + m32) / s;\n    } else {\n      s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n      this._w = (m21 - m12) / s;\n      this._x = (m13 + m31) / s;\n      this._y = (m23 + m32) / s;\n      this._z = 0.25 * s;\n    }\n\n    this._onChangeCallback();\n\n    return this;\n  },\n  setFromUnitVectors: function (vFrom, vTo) {\n    // assumes direction vectors vFrom and vTo are normalized\n    var EPS = 0.000001;\n    var r = vFrom.dot(vTo) + 1;\n\n    if (r < EPS) {\n      r = 0;\n\n      if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n        this._x = -vFrom.y;\n        this._y = vFrom.x;\n        this._z = 0;\n        this._w = r;\n      } else {\n        this._x = 0;\n        this._y = -vFrom.z;\n        this._z = vFrom.y;\n        this._w = r;\n      }\n    } else {\n      // crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n      this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n      this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n      this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n      this._w = r;\n    }\n\n    return this.normalize();\n  },\n  angleTo: function (q) {\n    return 2 * Math.acos(Math.abs(MathUtils.clamp(this.dot(q), -1, 1)));\n  },\n  rotateTowards: function (q, step) {\n    var angle = this.angleTo(q);\n    if (angle === 0) return this;\n    var t = Math.min(1, step / angle);\n    this.slerp(q, t);\n    return this;\n  },\n  inverse: function () {\n    // quaternion is assumed to have unit length\n    return this.conjugate();\n  },\n  conjugate: function () {\n    this._x *= -1;\n    this._y *= -1;\n    this._z *= -1;\n\n    this._onChangeCallback();\n\n    return this;\n  },\n  dot: function (v) {\n    return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n  },\n  lengthSq: function () {\n    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n  },\n  length: function () {\n    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);\n  },\n  normalize: function () {\n    var l = this.length();\n\n    if (l === 0) {\n      this._x = 0;\n      this._y = 0;\n      this._z = 0;\n      this._w = 1;\n    } else {\n      l = 1 / l;\n      this._x = this._x * l;\n      this._y = this._y * l;\n      this._z = this._z * l;\n      this._w = this._w * l;\n    }\n\n    this._onChangeCallback();\n\n    return this;\n  },\n  multiply: function (q, p) {\n    if (p !== undefined) {\n      console.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.');\n      return this.multiplyQuaternions(q, p);\n    }\n\n    return this.multiplyQuaternions(this, q);\n  },\n  premultiply: function (q) {\n    return this.multiplyQuaternions(q, this);\n  },\n  multiplyQuaternions: function (a, b) {\n    // from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n    var qax = a._x,\n        qay = a._y,\n        qaz = a._z,\n        qaw = a._w;\n    var qbx = b._x,\n        qby = b._y,\n        qbz = b._z,\n        qbw = b._w;\n    this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n    this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n    this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n    this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n    this._onChangeCallback();\n\n    return this;\n  },\n  slerp: function (qb, t) {\n    if (t === 0) return this;\n    if (t === 1) return this.copy(qb);\n    var x = this._x,\n        y = this._y,\n        z = this._z,\n        w = this._w; // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n    var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n    if (cosHalfTheta < 0) {\n      this._w = -qb._w;\n      this._x = -qb._x;\n      this._y = -qb._y;\n      this._z = -qb._z;\n      cosHalfTheta = -cosHalfTheta;\n    } else {\n      this.copy(qb);\n    }\n\n    if (cosHalfTheta >= 1.0) {\n      this._w = w;\n      this._x = x;\n      this._y = y;\n      this._z = z;\n      return this;\n    }\n\n    var sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n    if (sqrSinHalfTheta <= Number.EPSILON) {\n      var s = 1 - t;\n      this._w = s * w + t * this._w;\n      this._x = s * x + t * this._x;\n      this._y = s * y + t * this._y;\n      this._z = s * z + t * this._z;\n      this.normalize();\n\n      this._onChangeCallback();\n\n      return this;\n    }\n\n    var sinHalfTheta = Math.sqrt(sqrSinHalfTheta);\n    var halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);\n    var ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,\n        ratioB = Math.sin(t * halfTheta) / sinHalfTheta;\n    this._w = w * ratioA + this._w * ratioB;\n    this._x = x * ratioA + this._x * ratioB;\n    this._y = y * ratioA + this._y * ratioB;\n    this._z = z * ratioA + this._z * ratioB;\n\n    this._onChangeCallback();\n\n    return this;\n  },\n  equals: function (quaternion) {\n    return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;\n  },\n  fromArray: function (array, offset) {\n    if (offset === undefined) offset = 0;\n    this._x = array[offset];\n    this._y = array[offset + 1];\n    this._z = array[offset + 2];\n    this._w = array[offset + 3];\n\n    this._onChangeCallback();\n\n    return this;\n  },\n  toArray: function (array, offset) {\n    if (array === undefined) array = [];\n    if (offset === undefined) offset = 0;\n    array[offset] = this._x;\n    array[offset + 1] = this._y;\n    array[offset + 2] = this._z;\n    array[offset + 3] = this._w;\n    return array;\n  },\n  fromBufferAttribute: function (attribute, index) {\n    this._x = attribute.getX(index);\n    this._y = attribute.getY(index);\n    this._z = attribute.getZ(index);\n    this._w = attribute.getW(index);\n    return this;\n  },\n  _onChange: function (callback) {\n    this._onChangeCallback = callback;\n    return this;\n  },\n  _onChangeCallback: function () {}\n});\nexport { Quaternion };","map":{"version":3,"sources":["H:/chrlab/src/component/panelComponent/Canvas/threejs/src/math/Quaternion.js"],"names":["MathUtils","Quaternion","x","y","z","w","_x","_y","_z","_w","undefined","Object","assign","slerp","qa","qb","qm","t","copy","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","s","cos","dir","sqrSin","Number","EPSILON","sin","Math","sqrt","len","atan2","tDir","f","defineProperties","prototype","get","set","value","_onChangeCallback","isQuaternion","clone","constructor","quaternion","setFromEuler","euler","update","isEuler","Error","order","c1","c2","c3","s1","s2","s3","setFromAxisAngle","axis","angle","halfAngle","setFromRotationMatrix","m","te","elements","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","setFromUnitVectors","vFrom","vTo","EPS","r","dot","abs","normalize","angleTo","q","acos","clamp","rotateTowards","step","min","inverse","conjugate","v","lengthSq","length","l","multiply","p","console","warn","multiplyQuaternions","premultiply","a","b","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","equals","fromArray","array","offset","toArray","fromBufferAttribute","attribute","index","getX","getY","getZ","getW","_onChange","callback"],"mappings":"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","sourcesContent":["/**\n * @author mikael emtinger / http://gomo.se/\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author bhouston / http://clara.io\n */\n\nimport { MathUtils } from './MathUtils.js';\n\nfunction Quaternion( x, y, z, w ) {\n\n\tthis._x = x || 0;\n\tthis._y = y || 0;\n\tthis._z = z || 0;\n\tthis._w = ( w !== undefined ) ? w : 1;\n\n}\n\nObject.assign( Quaternion, {\n\n\tslerp: function ( qa, qb, qm, t ) {\n\n\t\treturn qm.copy( qa ).slerp( qb, t );\n\n\t},\n\n\tslerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\tvar x0 = src0[ srcOffset0 + 0 ],\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\tw0 = src0[ srcOffset0 + 3 ],\n\n\t\t\tx1 = src1[ srcOffset1 + 0 ],\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\tvar s = 1 - t,\n\n\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\n\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\tvar sin = Math.sqrt( sqrSin ),\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t}\n\n\t\t\tvar tDir = t * dir;\n\n\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t// Normalize in case we just did a lerp:\n\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\tx0 *= f;\n\t\t\t\ty0 *= f;\n\t\t\t\tz0 *= f;\n\t\t\t\tw0 *= f;\n\n\t\t\t}\n\n\t\t}\n\n\t\tdst[ dstOffset ] = x0;\n\t\tdst[ dstOffset + 1 ] = y0;\n\t\tdst[ dstOffset + 2 ] = z0;\n\t\tdst[ dstOffset + 3 ] = w0;\n\n\t}\n\n} );\n\nObject.defineProperties( Quaternion.prototype, {\n\n\tx: {\n\n\t\tget: function () {\n\n\t\t\treturn this._x;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._x = value;\n\t\t\tthis._onChangeCallback();\n\n\t\t}\n\n\t},\n\n\ty: {\n\n\t\tget: function () {\n\n\t\t\treturn this._y;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._y = value;\n\t\t\tthis._onChangeCallback();\n\n\t\t}\n\n\t},\n\n\tz: {\n\n\t\tget: function () {\n\n\t\t\treturn this._z;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._z = value;\n\t\t\tthis._onChangeCallback();\n\n\t\t}\n\n\t},\n\n\tw: {\n\n\t\tget: function () {\n\n\t\t\treturn this._w;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._w = value;\n\t\t\tthis._onChangeCallback();\n\n\t\t}\n\n\t}\n\n} );\n\nObject.assign( Quaternion.prototype, {\n\n\tisQuaternion: true,\n\n\tset: function ( x, y, z, w ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tclone: function () {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t},\n\n\tcopy: function ( quaternion ) {\n\n\t\tthis._x = quaternion.x;\n\t\tthis._y = quaternion.y;\n\t\tthis._z = quaternion.z;\n\t\tthis._w = quaternion.w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromEuler: function ( euler, update ) {\n\n\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\tvar x = euler._x, y = euler._y, z = euler._z, order = euler.order;\n\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t//\tcontent/SpinCalc.m\n\n\t\tvar cos = Math.cos;\n\t\tvar sin = Math.sin;\n\n\t\tvar c1 = cos( x / 2 );\n\t\tvar c2 = cos( y / 2 );\n\t\tvar c3 = cos( z / 2 );\n\n\t\tvar s1 = sin( x / 2 );\n\t\tvar s2 = sin( y / 2 );\n\t\tvar s3 = sin( z / 2 );\n\n\t\tif ( order === 'XYZ' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( order === 'YXZ' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t} else if ( order === 'ZXY' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( order === 'ZYX' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t} else if ( order === 'YZX' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\n\t\t} else if ( order === 'XZY' ) {\n\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\n\t\t}\n\n\t\tif ( update !== false ) this._onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromAxisAngle: function ( axis, angle ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t// assumes axis is normalized\n\n\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\tthis._x = axis.x * s;\n\t\tthis._y = axis.y * s;\n\t\tthis._z = axis.z * s;\n\t\tthis._w = Math.cos( halfAngle );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromRotationMatrix: function ( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tvar te = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\ttrace = m11 + m22 + m33,\n\t\t\ts;\n\n\t\tif ( trace > 0 ) {\n\n\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\tthis._w = 0.25 / s;\n\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\tthis._x = 0.25 * s;\n\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t} else if ( m22 > m33 ) {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\tthis._y = 0.25 * s;\n\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t} else {\n\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\tthis._z = 0.25 * s;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tsetFromUnitVectors: function ( vFrom, vTo ) {\n\n\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\tvar EPS = 0.000001;\n\n\t\tvar r = vFrom.dot( vTo ) + 1;\n\n\t\tif ( r < EPS ) {\n\n\t\t\tr = 0;\n\n\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\tthis._x = - vFrom.y;\n\t\t\t\tthis._y = vFrom.x;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = r;\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = - vFrom.z;\n\t\t\t\tthis._z = vFrom.y;\n\t\t\t\tthis._w = r;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\n\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\tthis._w = r;\n\n\t\t}\n\n\t\treturn this.normalize();\n\n\t},\n\n\tangleTo: function ( q ) {\n\n\t\treturn 2 * Math.acos( Math.abs( MathUtils.clamp( this.dot( q ), - 1, 1 ) ) );\n\n\t},\n\n\trotateTowards: function ( q, step ) {\n\n\t\tvar angle = this.angleTo( q );\n\n\t\tif ( angle === 0 ) return this;\n\n\t\tvar t = Math.min( 1, step / angle );\n\n\t\tthis.slerp( q, t );\n\n\t\treturn this;\n\n\t},\n\n\tinverse: function () {\n\n\t\t// quaternion is assumed to have unit length\n\n\t\treturn this.conjugate();\n\n\t},\n\n\tconjugate: function () {\n\n\t\tthis._x *= - 1;\n\t\tthis._y *= - 1;\n\t\tthis._z *= - 1;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tdot: function ( v ) {\n\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t},\n\n\tlengthSq: function () {\n\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t},\n\n\tlength: function () {\n\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t},\n\n\tnormalize: function () {\n\n\t\tvar l = this.length();\n\n\t\tif ( l === 0 ) {\n\n\t\t\tthis._x = 0;\n\t\t\tthis._y = 0;\n\t\t\tthis._z = 0;\n\t\t\tthis._w = 1;\n\n\t\t} else {\n\n\t\t\tl = 1 / l;\n\n\t\t\tthis._x = this._x * l;\n\t\t\tthis._y = this._y * l;\n\t\t\tthis._z = this._z * l;\n\t\t\tthis._w = this._w * l;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tmultiply: function ( q, p ) {\n\n\t\tif ( p !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t}\n\n\t\treturn this.multiplyQuaternions( this, q );\n\n\t},\n\n\tpremultiply: function ( q ) {\n\n\t\treturn this.multiplyQuaternions( q, this );\n\n\t},\n\n\tmultiplyQuaternions: function ( a, b ) {\n\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tslerp: function ( qb, t ) {\n\n\t\tif ( t === 0 ) return this;\n\t\tif ( t === 1 ) return this.copy( qb );\n\n\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\tthis._w = - qb._w;\n\t\t\tthis._x = - qb._x;\n\t\t\tthis._y = - qb._y;\n\t\t\tthis._z = - qb._z;\n\n\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t} else {\n\n\t\t\tthis.copy( qb );\n\n\t\t}\n\n\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\tthis._w = w;\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\n\n\t\t\tvar s = 1 - t;\n\t\t\tthis._w = s * w + t * this._w;\n\t\t\tthis._x = s * x + t * this._x;\n\t\t\tthis._y = s * y + t * this._y;\n\t\t\tthis._z = s * z + t * this._z;\n\n\t\t\tthis.normalize();\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tvar sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\n\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\tequals: function ( quaternion ) {\n\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t},\n\n\tfromArray: function ( array, offset ) {\n\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tthis._x = array[ offset ];\n\t\tthis._y = array[ offset + 1 ];\n\t\tthis._z = array[ offset + 2 ];\n\t\tthis._w = array[ offset + 3 ];\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t},\n\n\ttoArray: function ( array, offset ) {\n\n\t\tif ( array === undefined ) array = [];\n\t\tif ( offset === undefined ) offset = 0;\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._w;\n\n\t\treturn array;\n\n\t},\n\n\tfromBufferAttribute: function ( attribute, index ) {\n\n\t\tthis._x = attribute.getX( index );\n\t\tthis._y = attribute.getY( index );\n\t\tthis._z = attribute.getZ( index );\n\t\tthis._w = attribute.getW( index );\n\n\t\treturn this;\n\n\t},\n\n\t_onChange: function ( callback ) {\n\n\t\tthis._onChangeCallback = callback;\n\n\t\treturn this;\n\n\t},\n\n\t_onChangeCallback: function () {}\n\n} );\n\n\nexport { Quaternion };\n"]},"metadata":{},"sourceType":"module"}