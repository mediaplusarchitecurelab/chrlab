{"ast":null,"code":"import * as THREE from 'three'; //import { RectAreaLightUniformsLib } from '../../threejs/examples/jsm/lights/RectAreaLightUniformsLib.js';\n//import { RectAreaLightHelper } from '../../threejs/examples/jsm/helpers/RectAreaLightHelper.js';\n\nexport default (scene => {\n  //lights\n\n  /*\r\n                  var width = 50;\r\n                  var height = 50;\r\n                  var intensity = 10;\r\n  \r\n                  RectAreaLightUniformsLib.init();\r\n  \r\n                  var blueRectLight = new THREE.RectAreaLight( 0xf3aaaa, intensity, width, height );\r\n                  blueRectLight.position.set( 99, 5, 0 );\r\n                  blueRectLight.lookAt( 0, 5, 0 );\r\n                  scene.add( blueRectLight );\r\n  \r\n                  var blueRectLightHelper = new THREE.RectAreaLightHelper( blueRectLight, 0xffffff );\r\n                  blueRectLight.add( blueRectLightHelper );\r\n  \r\n                  var redRectLight = new THREE.RectAreaLight( 0x9aaeff, intensity, width, height );\r\n                  redRectLight.position.set( - 99, 5, 0 );\r\n                  redRectLight.lookAt( 0, 5, 0 );\r\n                  scene.add( redRectLight );\r\n  \r\n                  var redRectLightHelper = new THREE.RectAreaLightHelper( redRectLight, 0xffffff );\r\n                  redRectLight.add( redRectLightHelper );\r\n  */\n\n  /*                \r\n      const lightAmbient = new THREE.AmbientLight( 0xcccccc,0.4 );\r\n  //    const lightSpot = new THREE.SpotLight( 0xffffff );\r\n      const lightDirect = new THREE.DirectionalLight( 0xffffff, 1.3 );\r\n  \r\n      //spot light\r\n      lightSpot.angle = Math.PI / 5;\r\n      lightSpot.penumbra = 0.2;\r\n      lightSpot.position.set( 2, 3, 3 );\r\n      lightSpot.castShadow = true;\r\n      lightSpot.shadow.camera.near = 3;\r\n      lightSpot.shadow.camera.far = 10;\r\n      lightSpot.shadow.mapSize.width = 1024;\r\n      lightSpot.shadow.mapSize.height = 1024;\r\n     \r\n      // direct light\r\n      lightDirect.position.set( 10, 10, -10 );\r\n      lightDirect.castShadow = true;\r\n      lightDirect.lightProbeIntensity=1.0;\r\n      lightDirect.directionalLightIntensity=0.2;\r\n      lightDirect.envMapIntensity=1;\r\n      /*\r\n      lightDirect.shadow.camera.near = 1;\r\n      lightDirect.shadow.camera.far = 10;\r\n      lightDirect.shadow.camera.right = 1;\r\n      lightDirect.shadow.camera.left = - 1;\r\n      lightDirect.shadow.camera.top  = 1;\r\n      lightDirect.shadow.camera.bottom = - 1;\r\n      \r\n      lightDirect.shadow.mapSize.width = 1024;\r\n      lightDirect.shadow.mapSize.height = 1024;\r\n      \r\n      // add light            \r\n      scene.add(lightAmbient);\r\n      scene.add(lightDirect);\r\n  \r\n      //moving light\r\n      const particleLight1 = new THREE.PointLight( 0xff3333, 0.15);\r\n      const particleLight2 = new THREE.PointLight( 0x3333ff, 0.15);\r\n  \r\n      particleLight1.position.y = 10;\r\n      particleLight2.position.y = 10;\r\n  \r\n      scene.add( particleLight1 );\r\n      scene.add( particleLight2 );\r\n  \r\n      const startTime = Date.now();\r\n  */\n  function update() {\n    /*\r\n        var currentTime = Date.now();\r\n        var timer = ( currentTime - startTime ) / 4000;\r\n          particleLight1.position.x = Math.sin( timer * 3 ) * 10;\r\n        particleLight1.position.z = Math.cos( timer * 3 ) * 10;\r\n          particleLight2.position.x = Math.sin( timer * 3 ) * -10;\r\n        particleLight2.position.z = Math.cos( timer * 3 ) * -10;\r\n        //console.log('a');\r\n    */\n  }\n\n  return {\n    update\n  };\n});","map":{"version":3,"sources":["H:/chrlab/src/component/panelComponent/Canvas/Opencvjs/threejs/GeneralLights.js"],"names":["THREE","scene","update"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB,C,CAEA;AACA;;AAEA,gBAAeC,KAAK,IAAI;AACxB;;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDI,WAASC,MAAT,GAAkB;AACd;;;;;;;;;AAWH;;AAED,SAAO;AACHA,IAAAA;AADG,GAAP;AAGH,CA3FD","sourcesContent":["import * as THREE from 'three'\r\n\r\n//import { RectAreaLightUniformsLib } from '../../threejs/examples/jsm/lights/RectAreaLightUniformsLib.js';\r\n//import { RectAreaLightHelper } from '../../threejs/examples/jsm/helpers/RectAreaLightHelper.js';\r\n\r\nexport default scene => {    \r\n//lights\r\n/*\r\n                var width = 50;\r\n                var height = 50;\r\n                var intensity = 10;\r\n\r\n                RectAreaLightUniformsLib.init();\r\n\r\n                var blueRectLight = new THREE.RectAreaLight( 0xf3aaaa, intensity, width, height );\r\n                blueRectLight.position.set( 99, 5, 0 );\r\n                blueRectLight.lookAt( 0, 5, 0 );\r\n                scene.add( blueRectLight );\r\n\r\n                var blueRectLightHelper = new THREE.RectAreaLightHelper( blueRectLight, 0xffffff );\r\n                blueRectLight.add( blueRectLightHelper );\r\n\r\n                var redRectLight = new THREE.RectAreaLight( 0x9aaeff, intensity, width, height );\r\n                redRectLight.position.set( - 99, 5, 0 );\r\n                redRectLight.lookAt( 0, 5, 0 );\r\n                scene.add( redRectLight );\r\n\r\n                var redRectLightHelper = new THREE.RectAreaLightHelper( redRectLight, 0xffffff );\r\n                redRectLight.add( redRectLightHelper );\r\n*/                \r\n/*                \r\n    const lightAmbient = new THREE.AmbientLight( 0xcccccc,0.4 );\r\n//    const lightSpot = new THREE.SpotLight( 0xffffff );\r\n    const lightDirect = new THREE.DirectionalLight( 0xffffff, 1.3 );\r\n\r\n    //spot light\r\n    lightSpot.angle = Math.PI / 5;\r\n    lightSpot.penumbra = 0.2;\r\n    lightSpot.position.set( 2, 3, 3 );\r\n    lightSpot.castShadow = true;\r\n    lightSpot.shadow.camera.near = 3;\r\n    lightSpot.shadow.camera.far = 10;\r\n    lightSpot.shadow.mapSize.width = 1024;\r\n    lightSpot.shadow.mapSize.height = 1024;\r\n   \r\n    // direct light\r\n    lightDirect.position.set( 10, 10, -10 );\r\n    lightDirect.castShadow = true;\r\n    lightDirect.lightProbeIntensity=1.0;\r\n    lightDirect.directionalLightIntensity=0.2;\r\n    lightDirect.envMapIntensity=1;\r\n    /*\r\n    lightDirect.shadow.camera.near = 1;\r\n    lightDirect.shadow.camera.far = 10;\r\n    lightDirect.shadow.camera.right = 1;\r\n    lightDirect.shadow.camera.left = - 1;\r\n    lightDirect.shadow.camera.top  = 1;\r\n    lightDirect.shadow.camera.bottom = - 1;\r\n    \r\n    lightDirect.shadow.mapSize.width = 1024;\r\n    lightDirect.shadow.mapSize.height = 1024;\r\n    \r\n    // add light            \r\n    scene.add(lightAmbient);\r\n    scene.add(lightDirect);\r\n\r\n    //moving light\r\n    const particleLight1 = new THREE.PointLight( 0xff3333, 0.15);\r\n    const particleLight2 = new THREE.PointLight( 0x3333ff, 0.15);\r\n\r\n    particleLight1.position.y = 10;\r\n    particleLight2.position.y = 10;\r\n\r\n    scene.add( particleLight1 );\r\n    scene.add( particleLight2 );\r\n\r\n    const startTime = Date.now();\r\n*/\r\n\r\n    function update() {\r\n        /*\r\n            var currentTime = Date.now();\r\n            var timer = ( currentTime - startTime ) / 4000;\r\n\r\n            particleLight1.position.x = Math.sin( timer * 3 ) * 10;\r\n            particleLight1.position.z = Math.cos( timer * 3 ) * 10;\r\n\r\n            particleLight2.position.x = Math.sin( timer * 3 ) * -10;\r\n            particleLight2.position.z = Math.cos( timer * 3 ) * -10;\r\n            //console.log('a');\r\n        */\r\n    }\r\n\r\n    return {\r\n        update\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}