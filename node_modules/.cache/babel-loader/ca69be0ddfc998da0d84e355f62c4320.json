{"ast":null,"code":"var _jsxFileName = \"H:\\\\chrlab\\\\src\\\\component\\\\panelComponent\\\\Canvas\\\\Artaskjs\\\\index.js\";\nimport React, { Component } from 'react';\nimport { Header } from 'semantic-ui-react';\nimport threeEntryPoint from \"./threejs/threeEntryPoint\";\nimport \"./canvas.css\";\nvar scene, camera, renderer, clock, deltaTime, totalTime;\nvar arToolkitSource, arToolkitContext;\nvar markerRoot1, markerRoot2;\nvar mesh1;\nexport default class CanvasComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeItem: this.props.activeItem,\n      scriptloaded: false\n    };\n  }\n\n  componentDidMount() {\n    //threeEntryPoint(this.threeRootElement);\n    this.loadscript('./assets/arbuild/js/three.js');\n    this.loadscript('./assets/arbuild/jsartoolkit5/artoolkit.min.js');\n    this.loadscript('./assets/arbuild/jsartoolkit5/artoolkit.api.js');\n    this.loadscript('./assets/arbuild/threex/threex-artoolkitsource.js');\n    this.loadscript('./assets/arbuild/threex/threex-artoolkitcontext.js');\n    this.loadscript('./assets/arbuild/threex/threex-arbasecontrols.js');\n    this.loadscript('./assets/arbuild/threex/threex-armarkercontrols.js');\n    this.setState({\n      scriptloaded: true\n    });\n\n    if (this.state.scriptloaded) {\n      this.init();\n    }\n  }\n\n  async loadscript(url) {\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n\n    if (script.readyState) {\n      //IE\n      script.onreadystatechange = function () {\n        if (script.readyState == \"loaded\" || script.readyState == \"complete\") {\n          script.onreadystatechange = null; //callback();\n        }\n      };\n    } else {\n      //Others\n      script.onload = function () {};\n    }\n\n    script.src = url;\n    document.getElementsByTagName('head')[0].appendChild(script);\n  }\n\n  init() {\n    scene = new window.THREE.Scene();\n    let ambientLight = new window.THREE.AmbientLight(0xcccccc, 0.5);\n    scene.add(ambientLight);\n    camera = new window.THREE.Camera();\n    scene.add(camera);\n    renderer = new window.THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    renderer.setClearColor(new window.THREE.Color('lightgrey'), 0);\n    renderer.setSize(640, 480);\n    renderer.domElement.style.position = 'absolute';\n    renderer.domElement.style.top = '0px';\n    renderer.domElement.style.left = '0px';\n    document.body.appendChild(renderer.domElement);\n    clock = new window.THREE.Clock();\n    deltaTime = 0;\n    totalTime = 0; ////////////////////////////////////////////////////////////\n    // setup arToolkitSource\n    ////////////////////////////////////////////////////////////\n\n    arToolkitSource = new window.THREEx.ArToolkitSource({\n      sourceType: 'webcam'\n    });\n\n    function onResize() {\n      arToolkitSource.onResize();\n      arToolkitSource.copySizeTo(renderer.domElement);\n\n      if (arToolkitContext.arController !== null) {\n        arToolkitSource.copySizeTo(arToolkitContext.arController.canvas);\n      }\n    }\n\n    arToolkitSource.init(function onReady() {\n      onResize();\n    }); // handle resize event\n\n    window.addEventListener('resize', function () {\n      onResize();\n    }); ////////////////////////////////////////////////////////////\n    // setup arToolkitContext\n    ////////////////////////////////////////////////////////////  \n    // create atToolkitContext\n\n    arToolkitContext = new THREEx.ArToolkitContext({\n      cameraParametersUrl: '../arbuild/data/camera_para.dat',\n      detectionMode: 'mono'\n    }); // copy projection matrix to camera when initialization complete\n\n    arToolkitContext.init(function onCompleted() {\n      camera.projectionMatrix.copy(arToolkitContext.getProjectionMatrix());\n    }); ////////////////////////////////////////////////////////////\n    // setup markerRoots\n    ////////////////////////////////////////////////////////////\n    // build markerControls\n\n    markerRoot1 = new window.THREE.Group();\n    scene.add(markerRoot1);\n    let markerControls1 = new window.THREEx.ArMarkerControls(arToolkitContext, markerRoot1, {\n      type: 'pattern',\n      patternUrl: \"../arbuild/data/hiro.patt\"\n    });\n    let geometry1 = new window.THREE.CubeGeometry(1, 1, 1);\n    let material1 = new window.THREE.MeshNormalMaterial({\n      transparent: true,\n      opacity: 0.5,\n      side: THREE.DoubleSide\n    });\n    mesh1 = new window.THREE.Mesh(geometry1, material1);\n    mesh1.position.y = 0.5;\n    markerRoot1.add(mesh1);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"panel-canvas\",\n      className: \"panel-canvas\",\n      ref: element => this.threeRootElement = element,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"canvas-gui-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      as: \"h2\",\n      color: \"black\",\n      inverted: true,\n      \"text-align\": \"center\",\n      key: this.state.activeItem,\n      style: {\n        fontFamily: 'Titillium Web'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }\n    }, this.state.activeItem.toUpperCase())));\n  }\n\n}","map":{"version":3,"sources":["H:/chrlab/src/component/panelComponent/Canvas/Artaskjs/index.js"],"names":["React","Component","Header","threeEntryPoint","scene","camera","renderer","clock","deltaTime","totalTime","arToolkitSource","arToolkitContext","markerRoot1","markerRoot2","mesh1","CanvasComponent","constructor","props","state","activeItem","scriptloaded","componentDidMount","loadscript","setState","init","url","script","document","createElement","type","readyState","onreadystatechange","onload","src","getElementsByTagName","appendChild","window","THREE","Scene","ambientLight","AmbientLight","add","Camera","WebGLRenderer","antialias","alpha","setClearColor","Color","setSize","domElement","style","position","top","left","body","Clock","THREEx","ArToolkitSource","sourceType","onResize","copySizeTo","arController","canvas","onReady","addEventListener","ArToolkitContext","cameraParametersUrl","detectionMode","onCompleted","projectionMatrix","copy","getProjectionMatrix","Group","markerControls1","ArMarkerControls","patternUrl","geometry1","CubeGeometry","material1","MeshNormalMaterial","transparent","opacity","side","DoubleSide","Mesh","y","render","element","threeRootElement","fontFamily","toUpperCase"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Header} from 'semantic-ui-react';\r\nimport threeEntryPoint from \"./threejs/threeEntryPoint\";\r\nimport \"./canvas.css\";\r\n\r\n    var scene, camera, renderer, clock, deltaTime, totalTime;\r\n    var arToolkitSource, arToolkitContext;\r\n    var markerRoot1, markerRoot2;\r\n    var mesh1;\r\n\r\nexport default class CanvasComponent extends Component {\r\n\tconstructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        activeItem: this.props.activeItem,\r\n        scriptloaded: false\r\n    };\r\n  }\r\n\r\n\r\n    componentDidMount() {\r\n\t    //threeEntryPoint(this.threeRootElement);\r\n        this.loadscript('./assets/arbuild/js/three.js');\r\n        this.loadscript('./assets/arbuild/jsartoolkit5/artoolkit.min.js');\r\n        this.loadscript('./assets/arbuild/jsartoolkit5/artoolkit.api.js');\r\n        this.loadscript('./assets/arbuild/threex/threex-artoolkitsource.js');\r\n        this.loadscript('./assets/arbuild/threex/threex-artoolkitcontext.js');\r\n        this.loadscript('./assets/arbuild/threex/threex-arbasecontrols.js');\r\n        this.loadscript('./assets/arbuild/threex/threex-armarkercontrols.js');\r\n\r\n        this.setState({scriptloaded:true});\r\n\r\n        if (this.state.scriptloaded){\r\n            this.init();\r\n        }\r\n    }\r\n    async loadscript(url){\r\n        var script = document.createElement('script');\r\n        script.type = 'text/javascript';\r\n        if (script.readyState){  //IE\r\n            script.onreadystatechange = function(){\r\n                if (script.readyState == \"loaded\" ||\r\n                        script.readyState == \"complete\"){\r\n                    script.onreadystatechange = null;\r\n                    //callback();\r\n                }\r\n            };\r\n        } else {  //Others\r\n            script.onload = function(){\r\n            };\r\n        }\r\n        script.src = url;\r\n        document.getElementsByTagName('head')[0].appendChild(script);\r\n    }\r\n\tinit(){\r\n\r\n        scene = new window.THREE.Scene();\r\n        let ambientLight = new window.THREE.AmbientLight( 0xcccccc, 0.5 );\r\n        scene.add( ambientLight );\r\n            \r\n        camera = new window.THREE.Camera();\r\n        scene.add(camera);\r\n\r\n        renderer = new window.THREE.WebGLRenderer({\r\n            antialias : true,\r\n            alpha: true\r\n        });\r\n        renderer.setClearColor(new window.THREE.Color('lightgrey'), 0)\r\n        renderer.setSize( 640, 480 );\r\n        renderer.domElement.style.position = 'absolute'\r\n        renderer.domElement.style.top = '0px'\r\n        renderer.domElement.style.left = '0px'\r\n        document.body.appendChild( renderer.domElement );\r\n\r\n        clock = new window.THREE.Clock();\r\n        deltaTime = 0;\r\n        totalTime = 0;\r\n      \r\n      ////////////////////////////////////////////////////////////\r\n      // setup arToolkitSource\r\n      ////////////////////////////////////////////////////////////\r\n\r\n        arToolkitSource = new window.THREEx.ArToolkitSource({\r\n            sourceType : 'webcam',\r\n        });\r\n\r\n          function onResize()\r\n          {\r\n            arToolkitSource.onResize()  \r\n            arToolkitSource.copySizeTo(renderer.domElement) \r\n            if ( arToolkitContext.arController !== null )\r\n            {\r\n              arToolkitSource.copySizeTo(arToolkitContext.arController.canvas)  \r\n            } \r\n          }\r\n\r\n          arToolkitSource.init(function onReady(){\r\n            onResize()\r\n          });\r\n      \r\n          // handle resize event\r\n          window.addEventListener('resize', function(){\r\n            onResize()\r\n          });\r\n      \r\n          ////////////////////////////////////////////////////////////\r\n          // setup arToolkitContext\r\n          ////////////////////////////////////////////////////////////  \r\n\r\n          // create atToolkitContext\r\n          arToolkitContext = new THREEx.ArToolkitContext({\r\n            cameraParametersUrl: '../arbuild/data/camera_para.dat',\r\n            detectionMode: 'mono'\r\n          });\r\n          \r\n          // copy projection matrix to camera when initialization complete\r\n          arToolkitContext.init( function onCompleted(){\r\n            camera.projectionMatrix.copy( arToolkitContext.getProjectionMatrix() );\r\n          });\r\n\r\n          ////////////////////////////////////////////////////////////\r\n          // setup markerRoots\r\n          ////////////////////////////////////////////////////////////\r\n\r\n          // build markerControls\r\n          markerRoot1 = new window.THREE.Group();\r\n          scene.add(markerRoot1);\r\n          let markerControls1 = new window.THREEx.ArMarkerControls(arToolkitContext, markerRoot1, {\r\n            type: 'pattern', patternUrl: \"../arbuild/data/hiro.patt\",\r\n          })\r\n\r\n          let geometry1 = new window.THREE.CubeGeometry(1,1,1);\r\n          let material1 = new window.THREE.MeshNormalMaterial({\r\n            transparent: true,\r\n            opacity: 0.5,\r\n            side: THREE.DoubleSide\r\n          }); \r\n          \r\n          mesh1 = new window.THREE.Mesh( geometry1, material1 );\r\n          mesh1.position.y = 0.5;\r\n          \r\n          markerRoot1.add( mesh1 );\r\n    }\r\n    render () {\r\n    \t\r\n        return (\r\n        \t\r\n            <div id=\"panel-canvas\" className=\"panel-canvas\" ref={element => this.threeRootElement = element}>\r\n            \t  \r\n            \t  <div id=\"canvas-gui-container\">\r\n            \t  \t<Header as='h2' color='black' inverted text-align='center' key={this.state.activeItem}  style={{fontFamily: 'Titillium Web'}}>{this.state.activeItem.toUpperCase()}</Header>\r\n            \t  </div>\r\n            </div>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}