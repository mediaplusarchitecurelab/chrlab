{"ast":null,"code":"import * as THREE from 'three';\nimport SceneSubject from './SceneSubject';\nimport GeneralLights from './GeneralLights';\nexport default (canvas => {\n  const clock = new THREE.Clock();\n  const origin = new THREE.Vector3(0, 500, 0);\n  const screenDimensions = {\n    width: canvas.width,\n    height: canvas.height\n  };\n  const mousePosition = {\n    x: 0,\n    y: 0\n  };\n  const scene = buildScene();\n  const renderer = buildRender(screenDimensions);\n  const camera = buildCamera(screenDimensions);\n  const sceneSubjects = createSceneSubjects(scene);\n\n  function buildScene() {\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(\"#000\");\n    return scene;\n  }\n\n  function buildRender({\n    width,\n    height\n  }) {\n    const renderer = new THREE.WebGLRenderer({\n      canvas: canvas,\n      antialias: true,\n      alpha: true\n    });\n    const DPR = window.devicePixelRatio ? window.devicePixelRatio : 1;\n    renderer.setPixelRatio(DPR);\n    renderer.setSize(width, height);\n    renderer.gammaInput = true;\n    renderer.gammaOutput = true;\n    return renderer;\n  }\n\n  function buildCamera({\n    width,\n    height\n  }) {\n    const aspectRatio = width / height;\n    const fieldOfView = 1200;\n    const nearPlane = 1000;\n    const farPlane = 100;\n    const camera = new THREE.PerspectiveCamera(fieldOfView, aspectRatio, nearPlane, farPlane);\n    camera.position.z = 2500; //camera.position.x = 800;\n\n    camera.position.y = 1200;\n    return camera;\n  }\n\n  function createSceneSubjects(scene) {\n    const sceneSubjects = [GeneralLights(scene), SceneSubject(scene)]; //const sceneSubjects = SceneSubject(scene);\n\n    return sceneSubjects;\n  }\n\n  function update() {\n    const elapsedTime = clock.getElapsedTime();\n\n    for (let i = 0; i < sceneSubjects.length; i++) sceneSubjects[i].update(elapsedTime);\n\n    updateCameraPositionRelativeToMouse();\n    renderer.render(scene, camera);\n  }\n\n  function updateCameraPositionRelativeToMouse() {\n    camera.position.x += (mousePosition.x * 0.15 - camera.position.x) * 0.15; //camera.position.y += ( -(mousePosition.y * 0.05) - camera.position.y ) * 0.05;\n\n    camera.lookAt(origin);\n  }\n\n  function onWindowResize() {\n    const {\n      width,\n      height\n    } = canvas;\n    screenDimensions.width = width;\n    screenDimensions.height = height;\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n    renderer.setSize(width, height);\n  }\n\n  function onMouseMove(x, y) {\n    mousePosition.x = x;\n    mousePosition.y = y;\n  }\n\n  return {\n    update,\n    onWindowResize,\n    onMouseMove\n  };\n});","map":{"version":3,"sources":["H:/chrlab/src/component/Canvas/threejs/SceneManager.js"],"names":["THREE","SceneSubject","GeneralLights","canvas","clock","Clock","origin","Vector3","screenDimensions","width","height","mousePosition","x","y","scene","buildScene","renderer","buildRender","camera","buildCamera","sceneSubjects","createSceneSubjects","Scene","background","Color","WebGLRenderer","antialias","alpha","DPR","window","devicePixelRatio","setPixelRatio","setSize","gammaInput","gammaOutput","aspectRatio","fieldOfView","nearPlane","farPlane","PerspectiveCamera","position","z","update","elapsedTime","getElapsedTime","i","length","updateCameraPositionRelativeToMouse","render","lookAt","onWindowResize","aspect","updateProjectionMatrix","onMouseMove"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\r\nimport SceneSubject from './SceneSubject';\r\nimport GeneralLights from './GeneralLights';\r\n\r\nexport default canvas => {\r\n\r\n    const clock = new THREE.Clock();\r\n    const origin = new THREE.Vector3(0,500,0);\r\n\r\n    const screenDimensions = {\r\n        width: canvas.width,\r\n        height: canvas.height\r\n    }\r\n\r\n    const mousePosition = {\r\n        x: 0,\r\n        y: 0\r\n    }\r\n\r\n    const scene = buildScene();\r\n    const renderer = buildRender(screenDimensions);\r\n    const camera = buildCamera(screenDimensions);\r\n    const sceneSubjects = createSceneSubjects(scene);\r\n\r\n    function buildScene() {\r\n        const scene = new THREE.Scene();\r\n        scene.background = new THREE.Color(\"#000\");\r\n\r\n        return scene;\r\n    }\r\n\r\n    function buildRender({ width, height }) {\r\n        const renderer = new THREE.WebGLRenderer({ canvas: canvas, antialias: true, alpha: true }); \r\n        const DPR = window.devicePixelRatio ? window.devicePixelRatio : 1;\r\n        renderer.setPixelRatio(DPR);\r\n        renderer.setSize(width, height);\r\n\r\n        renderer.gammaInput = true;\r\n        renderer.gammaOutput = true; \r\n\r\n        return renderer;\r\n    }\r\n\r\n    function buildCamera({ width, height }) {\r\n        const aspectRatio = width / height;\r\n        const fieldOfView = 1200;\r\n        const nearPlane = 1000;\r\n        const farPlane = 100; \r\n        const camera = new THREE.PerspectiveCamera(fieldOfView, aspectRatio, nearPlane, farPlane);\r\n\r\n        camera.position.z = 2500;\r\n        //camera.position.x = 800;\r\n        camera.position.y = 1200;\r\n\r\n        return camera;\r\n    }\r\n\r\n    function createSceneSubjects(scene) {\r\n        \r\n        const sceneSubjects = [\r\n            GeneralLights(scene),\r\n            SceneSubject(scene)\r\n        ];\r\n        \r\n        //const sceneSubjects = SceneSubject(scene);\r\n\r\n        return sceneSubjects;\r\n    }\r\n\r\n    function update() {\r\n        const elapsedTime = clock.getElapsedTime();\r\n\r\n        for(let i=0; i<sceneSubjects.length; i++)\r\n            sceneSubjects[i].update(elapsedTime);\r\n\r\n        updateCameraPositionRelativeToMouse();\r\n        renderer.render(scene, camera);\r\n    }\r\n\r\n    function updateCameraPositionRelativeToMouse() {\r\n        camera.position.x += (  (mousePosition.x * 0.15) - camera.position.x ) * 0.15;\r\n        //camera.position.y += ( -(mousePosition.y * 0.05) - camera.position.y ) * 0.05;\r\n        \r\n        camera.lookAt(origin);\r\n    }\r\n\r\n    function onWindowResize() {\r\n        const { width, height } = canvas;\r\n        \r\n        screenDimensions.width = width;\r\n        screenDimensions.height = height;\r\n\r\n        camera.aspect = width / height;\r\n        camera.updateProjectionMatrix();\r\n        \r\n        renderer.setSize(width, height);\r\n    }\r\n\r\n    function onMouseMove(x, y) {\r\n        mousePosition.x = x;\r\n        mousePosition.y = y;\r\n    }\r\n\r\n    return {\r\n        update,\r\n        onWindowResize,\r\n        onMouseMove\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}