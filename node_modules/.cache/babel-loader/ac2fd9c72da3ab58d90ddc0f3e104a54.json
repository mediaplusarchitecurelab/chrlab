{"ast":null,"code":"import { Matrix4 } from '../math/Matrix4.js';\nimport { MathUtils } from '../math/MathUtils.js';\nimport { PerspectiveCamera } from './PerspectiveCamera.js';\n\nvar _eyeRight = new Matrix4();\n\nvar _eyeLeft = new Matrix4();\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\n\nfunction StereoCamera() {\n  this.type = 'StereoCamera';\n  this.aspect = 1;\n  this.eyeSep = 0.064;\n  this.cameraL = new PerspectiveCamera();\n  this.cameraL.layers.enable(1);\n  this.cameraL.matrixAutoUpdate = false;\n  this.cameraR = new PerspectiveCamera();\n  this.cameraR.layers.enable(2);\n  this.cameraR.matrixAutoUpdate = false;\n  this._cache = {\n    focus: null,\n    fov: null,\n    aspect: null,\n    near: null,\n    far: null,\n    zoom: null,\n    eyeSep: null\n  };\n}\n\nObject.assign(StereoCamera.prototype, {\n  update: function (camera) {\n    var cache = this._cache;\n    var needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov || cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near || cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n    if (needsUpdate) {\n      cache.focus = camera.focus;\n      cache.fov = camera.fov;\n      cache.aspect = camera.aspect * this.aspect;\n      cache.near = camera.near;\n      cache.far = camera.far;\n      cache.zoom = camera.zoom;\n      cache.eyeSep = this.eyeSep; // Off-axis stereoscopic effect based on\n      // http://paulbourke.net/stereographics/stereorender/\n\n      var projectionMatrix = camera.projectionMatrix.clone();\n      var eyeSepHalf = cache.eyeSep / 2;\n      var eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n      var ymax = cache.near * Math.tan(MathUtils.DEG2RAD * cache.fov * 0.5) / cache.zoom;\n      var xmin, xmax; // translate xOffset\n\n      _eyeLeft.elements[12] = -eyeSepHalf;\n      _eyeRight.elements[12] = eyeSepHalf; // for left eye\n\n      xmin = -ymax * cache.aspect + eyeSepOnProjection;\n      xmax = ymax * cache.aspect + eyeSepOnProjection;\n      projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);\n      projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n      this.cameraL.projectionMatrix.copy(projectionMatrix); // for right eye\n\n      xmin = -ymax * cache.aspect - eyeSepOnProjection;\n      xmax = ymax * cache.aspect - eyeSepOnProjection;\n      projectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);\n      projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n      this.cameraR.projectionMatrix.copy(projectionMatrix);\n    }\n\n    this.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(_eyeLeft);\n    this.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(_eyeRight);\n  }\n});\nexport { StereoCamera };","map":{"version":3,"sources":["H:/chrlab/src/component/panelComponent/Canvas/threejs/src/cameras/StereoCamera.js"],"names":["Matrix4","MathUtils","PerspectiveCamera","_eyeRight","_eyeLeft","StereoCamera","type","aspect","eyeSep","cameraL","layers","enable","matrixAutoUpdate","cameraR","_cache","focus","fov","near","far","zoom","Object","assign","prototype","update","camera","cache","needsUpdate","projectionMatrix","clone","eyeSepHalf","eyeSepOnProjection","ymax","Math","tan","DEG2RAD","xmin","xmax","elements","copy","matrixWorld","multiply"],"mappings":"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","sourcesContent":["import { Matrix4 } from '../math/Matrix4.js';\nimport { MathUtils } from '../math/MathUtils.js';\nimport { PerspectiveCamera } from './PerspectiveCamera.js';\n\nvar _eyeRight = new Matrix4();\nvar _eyeLeft = new Matrix4();\n\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nfunction StereoCamera() {\n\n\tthis.type = 'StereoCamera';\n\n\tthis.aspect = 1;\n\n\tthis.eyeSep = 0.064;\n\n\tthis.cameraL = new PerspectiveCamera();\n\tthis.cameraL.layers.enable( 1 );\n\tthis.cameraL.matrixAutoUpdate = false;\n\n\tthis.cameraR = new PerspectiveCamera();\n\tthis.cameraR.layers.enable( 2 );\n\tthis.cameraR.matrixAutoUpdate = false;\n\n\tthis._cache = {\n\t\tfocus: null,\n\t\tfov: null,\n\t\taspect: null,\n\t\tnear: null,\n\t\tfar: null,\n\t\tzoom: null,\n\t\teyeSep: null\n\t};\n\n}\n\nObject.assign( StereoCamera.prototype, {\n\n\tupdate: function ( camera ) {\n\n\t\tvar cache = this._cache;\n\n\t\tvar needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||\n\t\t\tcache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||\n\t\t\tcache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n\t\tif ( needsUpdate ) {\n\n\t\t\tcache.focus = camera.focus;\n\t\t\tcache.fov = camera.fov;\n\t\t\tcache.aspect = camera.aspect * this.aspect;\n\t\t\tcache.near = camera.near;\n\t\t\tcache.far = camera.far;\n\t\t\tcache.zoom = camera.zoom;\n\t\t\tcache.eyeSep = this.eyeSep;\n\n\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t\t\tvar eyeSepHalf = cache.eyeSep / 2;\n\t\t\tvar eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n\t\t\tvar ymax = ( cache.near * Math.tan( MathUtils.DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;\n\t\t\tvar xmin, xmax;\n\n\t\t\t// translate xOffset\n\n\t\t\t_eyeLeft.elements[ 12 ] = - eyeSepHalf;\n\t\t\t_eyeRight.elements[ 12 ] = eyeSepHalf;\n\n\t\t\t// for left eye\n\n\t\t\txmin = - ymax * cache.aspect + eyeSepOnProjection;\n\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\n\n\t\t\tprojectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\n\n\t\t\t// for right eye\n\n\t\t\txmin = - ymax * cache.aspect - eyeSepOnProjection;\n\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\n\n\t\t\tprojectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\n\n\t\t}\n\n\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );\n\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );\n\n\t}\n\n} );\n\n\nexport { StereoCamera };\n"]},"metadata":{},"sourceType":"module"}