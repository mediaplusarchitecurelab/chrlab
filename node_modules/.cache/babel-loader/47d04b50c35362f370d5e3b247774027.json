{"ast":null,"code":"/**\n * @author mrdoob / http://mrdoob.com/\n */\nimport { ArrayCamera } from '../../cameras/ArrayCamera.js';\nimport { EventDispatcher } from '../../core/EventDispatcher.js';\nimport { Group } from '../../objects/Group.js';\nimport { PerspectiveCamera } from '../../cameras/PerspectiveCamera.js';\nimport { Vector3 } from '../../math/Vector3.js';\nimport { Vector4 } from '../../math/Vector4.js';\nimport { WebGLAnimation } from '../webgl/WebGLAnimation.js';\n\nfunction WebXRManager(renderer, gl) {\n  var scope = this;\n  var session = null;\n  var framebufferScaleFactor = 1.0;\n  var referenceSpace = null;\n  var referenceSpaceType = 'local-floor';\n  var pose = null;\n  var controllers = [];\n  var inputSourcesMap = new Map(); //\n\n  var cameraL = new PerspectiveCamera();\n  cameraL.layers.enable(1);\n  cameraL.viewport = new Vector4();\n  var cameraR = new PerspectiveCamera();\n  cameraR.layers.enable(2);\n  cameraR.viewport = new Vector4();\n  var cameraVR = new ArrayCamera([cameraL, cameraR]);\n  cameraVR.layers.enable(1);\n  cameraVR.layers.enable(2);\n  var _currentDepthNear = null;\n  var _currentDepthFar = null; //\n\n  this.enabled = false;\n  this.isPresenting = false;\n\n  this.getController = function (id) {\n    var controller = controllers[id];\n\n    if (controller === undefined) {\n      controller = {};\n      controllers[id] = controller;\n    }\n\n    if (controller.targetRay === undefined) {\n      controller.targetRay = new Group();\n      controller.targetRay.matrixAutoUpdate = false;\n      controller.targetRay.visible = false;\n    }\n\n    return controller.targetRay;\n  };\n\n  this.getControllerGrip = function (id) {\n    var controller = controllers[id];\n\n    if (controller === undefined) {\n      controller = {};\n      controllers[id] = controller;\n    }\n\n    if (controller.grip === undefined) {\n      controller.grip = new Group();\n      controller.grip.matrixAutoUpdate = false;\n      controller.grip.visible = false;\n    }\n\n    return controller.grip;\n  }; //\n\n\n  function onSessionEvent(event) {\n    var controller = inputSourcesMap.get(event.inputSource);\n\n    if (controller) {\n      if (controller.targetRay) {\n        controller.targetRay.dispatchEvent({\n          type: event.type\n        });\n      }\n\n      if (controller.grip) {\n        controller.grip.dispatchEvent({\n          type: event.type\n        });\n      }\n    }\n  }\n\n  function onSessionEnd() {\n    inputSourcesMap.forEach(function (controller, inputSource) {\n      if (controller.targetRay) {\n        controller.targetRay.dispatchEvent({\n          type: 'disconnected',\n          data: inputSource\n        });\n        controller.targetRay.visible = false;\n      }\n\n      if (controller.grip) {\n        controller.grip.dispatchEvent({\n          type: 'disconnected',\n          data: inputSource\n        });\n        controller.grip.visible = false;\n      }\n    });\n    inputSourcesMap.clear(); //\n\n    renderer.setFramebuffer(null);\n    renderer.setRenderTarget(renderer.getRenderTarget()); // Hack #15830\n\n    animation.stop();\n    scope.isPresenting = false;\n    scope.dispatchEvent({\n      type: 'sessionend'\n    });\n  }\n\n  function onRequestReferenceSpace(value) {\n    referenceSpace = value;\n    animation.setContext(session);\n    animation.start();\n    scope.isPresenting = true;\n    scope.dispatchEvent({\n      type: 'sessionstart'\n    });\n  }\n\n  this.setFramebufferScaleFactor = function (value) {\n    framebufferScaleFactor = value; // Warn if function is used while presenting\n\n    if (scope.isPresenting == true) {\n      console.warn(\"WebXRManager: Cannot change framebuffer scale while presenting VR content\");\n    }\n  };\n\n  this.setReferenceSpaceType = function (value) {\n    referenceSpaceType = value;\n  };\n\n  this.getReferenceSpace = function () {\n    return referenceSpace;\n  };\n\n  this.getSession = function () {\n    return session;\n  };\n\n  this.setSession = function (value) {\n    session = value;\n\n    if (session !== null) {\n      session.addEventListener('select', onSessionEvent);\n      session.addEventListener('selectstart', onSessionEvent);\n      session.addEventListener('selectend', onSessionEvent);\n      session.addEventListener('squeeze', onSessionEvent);\n      session.addEventListener('squeezestart', onSessionEvent);\n      session.addEventListener('squeezeend', onSessionEvent);\n      session.addEventListener('end', onSessionEnd);\n      var attributes = gl.getContextAttributes();\n      var layerInit = {\n        antialias: attributes.antialias,\n        alpha: attributes.alpha,\n        depth: attributes.depth,\n        stencil: attributes.stencil,\n        framebufferScaleFactor: framebufferScaleFactor\n      }; // eslint-disable-next-line no-undef\n\n      var baseLayer = new XRWebGLLayer(session, gl, layerInit);\n      session.updateRenderState({\n        baseLayer: baseLayer\n      });\n      session.requestReferenceSpace(referenceSpaceType).then(onRequestReferenceSpace); //\n\n      session.addEventListener('inputsourceschange', updateInputSources);\n    }\n  };\n\n  function updateInputSources(event) {\n    var inputSources = session.inputSources; // Assign inputSources to available controllers\n\n    for (var i = 0; i < controllers.length; i++) {\n      inputSourcesMap.set(inputSources[i], controllers[i]);\n    } // Notify disconnected\n\n\n    for (var i = 0; i < event.removed.length; i++) {\n      var inputSource = event.removed[i];\n      var controller = inputSourcesMap.get(inputSource);\n\n      if (controller) {\n        if (controller.targetRay) {\n          controller.targetRay.dispatchEvent({\n            type: 'disconnected',\n            data: inputSource\n          });\n        }\n\n        if (controller.grip) {\n          controller.grip.dispatchEvent({\n            type: 'disconnected',\n            data: inputSource\n          });\n        }\n\n        inputSourcesMap.delete(inputSource);\n      }\n    } // Notify connected\n\n\n    for (var i = 0; i < event.added.length; i++) {\n      var inputSource = event.added[i];\n      var controller = inputSourcesMap.get(inputSource);\n\n      if (controller) {\n        if (controller.targetRay) {\n          controller.targetRay.dispatchEvent({\n            type: 'connected',\n            data: inputSource\n          });\n        }\n\n        if (controller.grip) {\n          controller.grip.dispatchEvent({\n            type: 'connected',\n            data: inputSource\n          });\n        }\n      }\n    }\n  } //\n\n\n  var cameraLPos = new Vector3();\n  var cameraRPos = new Vector3();\n  /**\n   * @author jsantell / https://www.jsantell.com/\n   *\n   * Assumes 2 cameras that are parallel and share an X-axis, and that\n   * the cameras' projection and world matrices have already been set.\n   * And that near and far planes are identical for both cameras.\n   * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n   */\n\n  function setProjectionFromUnion(camera, cameraL, cameraR) {\n    cameraLPos.setFromMatrixPosition(cameraL.matrixWorld);\n    cameraRPos.setFromMatrixPosition(cameraR.matrixWorld);\n    var ipd = cameraLPos.distanceTo(cameraRPos);\n    var projL = cameraL.projectionMatrix.elements;\n    var projR = cameraR.projectionMatrix.elements; // VR systems will have identical far and near planes, and\n    // most likely identical top and bottom frustum extents.\n    // Use the left camera for these values.\n\n    var near = projL[14] / (projL[10] - 1);\n    var far = projL[14] / (projL[10] + 1);\n    var topFov = (projL[9] + 1) / projL[5];\n    var bottomFov = (projL[9] - 1) / projL[5];\n    var leftFov = (projL[8] - 1) / projL[0];\n    var rightFov = (projR[8] + 1) / projR[0];\n    var left = near * leftFov;\n    var right = near * rightFov; // Calculate the new camera's position offset from the\n    // left camera. xOffset should be roughly half `ipd`.\n\n    var zOffset = ipd / (-leftFov + rightFov);\n    var xOffset = zOffset * -leftFov; // TODO: Better way to apply this offset?\n\n    cameraL.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);\n    camera.translateX(xOffset);\n    camera.translateZ(zOffset);\n    camera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);\n    camera.matrixWorldInverse.getInverse(camera.matrixWorld); // Find the union of the frustum values of the cameras and scale\n    // the values so that the near plane's position does not change in world space,\n    // although must now be relative to the new union camera.\n\n    var near2 = near + zOffset;\n    var far2 = far + zOffset;\n    var left2 = left - xOffset;\n    var right2 = right + (ipd - xOffset);\n    var top2 = topFov * far / far2 * near2;\n    var bottom2 = bottomFov * far / far2 * near2;\n    camera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);\n  }\n\n  function updateCamera(camera, parent) {\n    if (parent === null) {\n      camera.matrixWorld.copy(camera.matrix);\n    } else {\n      camera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);\n    }\n\n    camera.matrixWorldInverse.getInverse(camera.matrixWorld);\n  }\n\n  this.getCamera = function (camera) {\n    cameraVR.near = cameraR.near = cameraL.near = camera.near;\n    cameraVR.far = cameraR.far = cameraL.far = camera.far;\n\n    if (_currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far) {\n      // Note that the new renderState won't apply until the next frame. See #18320\n      session.updateRenderState({\n        depthNear: cameraVR.near,\n        depthFar: cameraVR.far\n      });\n      _currentDepthNear = cameraVR.near;\n      _currentDepthFar = cameraVR.far;\n    }\n\n    var parent = camera.parent;\n    var cameras = cameraVR.cameras;\n    updateCamera(cameraVR, parent);\n\n    for (var i = 0; i < cameras.length; i++) {\n      updateCamera(cameras[i], parent);\n    } // update camera and its children\n\n\n    camera.matrixWorld.copy(cameraVR.matrixWorld);\n    var children = camera.children;\n\n    for (var i = 0, l = children.length; i < l; i++) {\n      children[i].updateMatrixWorld(true);\n    }\n\n    setProjectionFromUnion(cameraVR, cameraL, cameraR);\n    return cameraVR;\n  }; // Animation Loop\n\n\n  var onAnimationFrameCallback = null;\n\n  function onAnimationFrame(time, frame) {\n    pose = frame.getViewerPose(referenceSpace);\n\n    if (pose !== null) {\n      var views = pose.views;\n      var baseLayer = session.renderState.baseLayer;\n      renderer.setFramebuffer(baseLayer.framebuffer);\n\n      for (var i = 0; i < views.length; i++) {\n        var view = views[i];\n        var viewport = baseLayer.getViewport(view);\n        var camera = cameraVR.cameras[i];\n        camera.matrix.fromArray(view.transform.matrix);\n        camera.projectionMatrix.fromArray(view.projectionMatrix);\n        camera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);\n\n        if (i === 0) {\n          cameraVR.matrix.copy(camera.matrix);\n        }\n      }\n    } //\n\n\n    var inputSources = session.inputSources;\n\n    for (var i = 0; i < controllers.length; i++) {\n      var controller = controllers[i];\n      var inputSource = inputSources[i];\n      var inputPose = null;\n      var gripPose = null;\n\n      if (inputSource) {\n        if (controller.targetRay) {\n          inputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);\n\n          if (inputPose !== null) {\n            controller.targetRay.matrix.fromArray(inputPose.transform.matrix);\n            controller.targetRay.matrix.decompose(controller.targetRay.position, controller.targetRay.rotation, controller.targetRay.scale);\n          }\n        }\n\n        if (controller.grip && inputSource.gripSpace) {\n          gripPose = frame.getPose(inputSource.gripSpace, referenceSpace);\n\n          if (gripPose !== null) {\n            controller.grip.matrix.fromArray(gripPose.transform.matrix);\n            controller.grip.matrix.decompose(controller.grip.position, controller.grip.rotation, controller.grip.scale);\n          }\n        }\n      }\n\n      if (controller.targetRay) {\n        controller.targetRay.visible = inputPose !== null;\n      }\n\n      if (controller.grip) {\n        controller.grip.visible = gripPose !== null;\n      }\n    }\n\n    if (onAnimationFrameCallback) onAnimationFrameCallback(time, frame);\n  }\n\n  var animation = new WebGLAnimation();\n  animation.setAnimationLoop(onAnimationFrame);\n\n  this.setAnimationLoop = function (callback) {\n    onAnimationFrameCallback = callback;\n  };\n\n  this.dispose = function () {};\n}\n\nObject.assign(WebXRManager.prototype, EventDispatcher.prototype);\nexport { WebXRManager };","map":{"version":3,"sources":["H:/chrlab/src/component/panelComponent/Canvas/threejs/src/renderers/webxr/WebXRManager.js"],"names":["ArrayCamera","EventDispatcher","Group","PerspectiveCamera","Vector3","Vector4","WebGLAnimation","WebXRManager","renderer","gl","scope","session","framebufferScaleFactor","referenceSpace","referenceSpaceType","pose","controllers","inputSourcesMap","Map","cameraL","layers","enable","viewport","cameraR","cameraVR","_currentDepthNear","_currentDepthFar","enabled","isPresenting","getController","id","controller","undefined","targetRay","matrixAutoUpdate","visible","getControllerGrip","grip","onSessionEvent","event","get","inputSource","dispatchEvent","type","onSessionEnd","forEach","data","clear","setFramebuffer","setRenderTarget","getRenderTarget","animation","stop","onRequestReferenceSpace","value","setContext","start","setFramebufferScaleFactor","console","warn","setReferenceSpaceType","getReferenceSpace","getSession","setSession","addEventListener","attributes","getContextAttributes","layerInit","antialias","alpha","depth","stencil","baseLayer","XRWebGLLayer","updateRenderState","requestReferenceSpace","then","updateInputSources","inputSources","i","length","set","removed","delete","added","cameraLPos","cameraRPos","setProjectionFromUnion","camera","setFromMatrixPosition","matrixWorld","ipd","distanceTo","projL","projectionMatrix","elements","projR","near","far","topFov","bottomFov","leftFov","rightFov","left","right","zOffset","xOffset","decompose","position","quaternion","scale","translateX","translateZ","compose","matrixWorldInverse","getInverse","near2","far2","left2","right2","top2","bottom2","makePerspective","updateCamera","parent","copy","matrix","multiplyMatrices","getCamera","depthNear","depthFar","cameras","children","l","updateMatrixWorld","onAnimationFrameCallback","onAnimationFrame","time","frame","getViewerPose","views","renderState","framebuffer","view","getViewport","fromArray","transform","x","y","width","height","inputPose","gripPose","getPose","targetRaySpace","rotation","gripSpace","setAnimationLoop","callback","dispose","Object","assign","prototype"],"mappings":"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","sourcesContent":["/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nimport { ArrayCamera } from '../../cameras/ArrayCamera.js';\nimport { EventDispatcher } from '../../core/EventDispatcher.js';\nimport { Group } from '../../objects/Group.js';\nimport { PerspectiveCamera } from '../../cameras/PerspectiveCamera.js';\nimport { Vector3 } from '../../math/Vector3.js';\nimport { Vector4 } from '../../math/Vector4.js';\nimport { WebGLAnimation } from '../webgl/WebGLAnimation.js';\n\nfunction WebXRManager( renderer, gl ) {\n\n\tvar scope = this;\n\n\tvar session = null;\n\n\tvar framebufferScaleFactor = 1.0;\n\n\tvar referenceSpace = null;\n\tvar referenceSpaceType = 'local-floor';\n\n\tvar pose = null;\n\n\tvar controllers = [];\n\tvar inputSourcesMap = new Map();\n\n\t//\n\n\tvar cameraL = new PerspectiveCamera();\n\tcameraL.layers.enable( 1 );\n\tcameraL.viewport = new Vector4();\n\n\tvar cameraR = new PerspectiveCamera();\n\tcameraR.layers.enable( 2 );\n\tcameraR.viewport = new Vector4();\n\n\tvar cameraVR = new ArrayCamera( [ cameraL, cameraR ] );\n\tcameraVR.layers.enable( 1 );\n\tcameraVR.layers.enable( 2 );\n\n\tvar _currentDepthNear = null;\n\tvar _currentDepthFar = null;\n\n\t//\n\n\tthis.enabled = false;\n\n\tthis.isPresenting = false;\n\n\tthis.getController = function ( id ) {\n\n\t\tvar controller = controllers[ id ];\n\n\t\tif ( controller === undefined ) {\n\n\t\t\tcontroller = {};\n\t\t\tcontrollers[ id ] = controller;\n\n\t\t}\n\n\t\tif ( controller.targetRay === undefined ) {\n\n\t\t\tcontroller.targetRay = new Group();\n\t\t\tcontroller.targetRay.matrixAutoUpdate = false;\n\t\t\tcontroller.targetRay.visible = false;\n\n\t\t}\n\n\t\treturn controller.targetRay;\n\n\t};\n\n\tthis.getControllerGrip = function ( id ) {\n\n\t\tvar controller = controllers[ id ];\n\n\t\tif ( controller === undefined ) {\n\n\t\t\tcontroller = {};\n\t\t\tcontrollers[ id ] = controller;\n\n\t\t}\n\n\t\tif ( controller.grip === undefined ) {\n\n\t\t\tcontroller.grip = new Group();\n\t\t\tcontroller.grip.matrixAutoUpdate = false;\n\t\t\tcontroller.grip.visible = false;\n\n\t\t}\n\n\t\treturn controller.grip;\n\n\t};\n\n\t//\n\n\tfunction onSessionEvent( event ) {\n\n\t\tvar controller = inputSourcesMap.get( event.inputSource );\n\n\t\tif ( controller ) {\n\n\t\t\tif ( controller.targetRay ) {\n\n\t\t\t\tcontroller.targetRay.dispatchEvent( { type: event.type } );\n\n\t\t\t}\n\n\t\t\tif ( controller.grip ) {\n\n\t\t\t\tcontroller.grip.dispatchEvent( { type: event.type } );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction onSessionEnd() {\n\n\t\tinputSourcesMap.forEach( function ( controller, inputSource ) {\n\n\t\t\tif ( controller.targetRay ) {\n\n\t\t\t\tcontroller.targetRay.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\t\t\t\tcontroller.targetRay.visible = false;\n\n\t\t\t}\n\n\t\t\tif ( controller.grip ) {\n\n\t\t\t\tcontroller.grip.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\t\t\t\tcontroller.grip.visible = false;\n\n\t\t\t}\n\n\t\t} );\n\n\t\tinputSourcesMap.clear();\n\n\t\t//\n\n\t\trenderer.setFramebuffer( null );\n\t\trenderer.setRenderTarget( renderer.getRenderTarget() ); // Hack #15830\n\t\tanimation.stop();\n\n\t\tscope.isPresenting = false;\n\n\t\tscope.dispatchEvent( { type: 'sessionend' } );\n\n\t}\n\n\tfunction onRequestReferenceSpace( value ) {\n\n\t\treferenceSpace = value;\n\n\t\tanimation.setContext( session );\n\t\tanimation.start();\n\n\t\tscope.isPresenting = true;\n\n\t\tscope.dispatchEvent( { type: 'sessionstart' } );\n\n\t}\n\n\tthis.setFramebufferScaleFactor = function ( value ) {\n\n\t\tframebufferScaleFactor = value;\n\n\t\t// Warn if function is used while presenting\n\t\tif ( scope.isPresenting == true ) {\n\n\t\t\tconsole.warn( \"WebXRManager: Cannot change framebuffer scale while presenting VR content\" );\n\n\t\t}\n\n\t};\n\n\tthis.setReferenceSpaceType = function ( value ) {\n\n\t\treferenceSpaceType = value;\n\n\t};\n\n\tthis.getReferenceSpace = function () {\n\n\t\treturn referenceSpace;\n\n\t};\n\n\tthis.getSession = function () {\n\n\t\treturn session;\n\n\t};\n\n\tthis.setSession = function ( value ) {\n\n\t\tsession = value;\n\n\t\tif ( session !== null ) {\n\n\t\t\tsession.addEventListener( 'select', onSessionEvent );\n\t\t\tsession.addEventListener( 'selectstart', onSessionEvent );\n\t\t\tsession.addEventListener( 'selectend', onSessionEvent );\n\t\t\tsession.addEventListener( 'squeeze', onSessionEvent );\n\t\t\tsession.addEventListener( 'squeezestart', onSessionEvent );\n\t\t\tsession.addEventListener( 'squeezeend', onSessionEvent );\n\t\t\tsession.addEventListener( 'end', onSessionEnd );\n\n\t\t\tvar attributes = gl.getContextAttributes();\n\n\t\t\tvar layerInit = {\n\t\t\t\tantialias: attributes.antialias,\n\t\t\t\talpha: attributes.alpha,\n\t\t\t\tdepth: attributes.depth,\n\t\t\t\tstencil: attributes.stencil,\n\t\t\t\tframebufferScaleFactor: framebufferScaleFactor\n\t\t\t};\n\n\t\t\t// eslint-disable-next-line no-undef\n\t\t\tvar baseLayer = new XRWebGLLayer( session, gl, layerInit );\n\n\t\t\tsession.updateRenderState( { baseLayer: baseLayer } );\n\n\t\t\tsession.requestReferenceSpace( referenceSpaceType ).then( onRequestReferenceSpace );\n\n\t\t\t//\n\n\t\t\tsession.addEventListener( 'inputsourceschange', updateInputSources );\n\n\t\t}\n\n\t};\n\n\tfunction updateInputSources( event ) {\n\n\t\tvar inputSources = session.inputSources;\n\n\t\t// Assign inputSources to available controllers\n\n\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\n\n\t\t\tinputSourcesMap.set( inputSources[ i ], controllers[ i ] );\n\n\t\t}\n\n\t\t// Notify disconnected\n\n\t\tfor ( var i = 0; i < event.removed.length; i ++ ) {\n\n\t\t\tvar inputSource = event.removed[ i ];\n\t\t\tvar controller = inputSourcesMap.get( inputSource );\n\n\t\t\tif ( controller ) {\n\n\t\t\t\tif ( controller.targetRay ) {\n\n\t\t\t\t\tcontroller.targetRay.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\n\t\t\t\t}\n\n\t\t\t\tif ( controller.grip ) {\n\n\t\t\t\t\tcontroller.grip.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\n\t\t\t\t}\n\n\t\t\t\tinputSourcesMap.delete( inputSource );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Notify connected\n\n\t\tfor ( var i = 0; i < event.added.length; i ++ ) {\n\n\t\t\tvar inputSource = event.added[ i ];\n\t\t\tvar controller = inputSourcesMap.get( inputSource );\n\n\t\t\tif ( controller ) {\n\n\t\t\t\tif ( controller.targetRay ) {\n\n\t\t\t\t\tcontroller.targetRay.dispatchEvent( { type: 'connected', data: inputSource } );\n\n\t\t\t\t}\n\n\t\t\t\tif ( controller.grip ) {\n\n\t\t\t\t\tcontroller.grip.dispatchEvent( { type: 'connected', data: inputSource } );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t//\n\n\tvar cameraLPos = new Vector3();\n\tvar cameraRPos = new Vector3();\n\n\t/**\n\t * @author jsantell / https://www.jsantell.com/\n\t *\n\t * Assumes 2 cameras that are parallel and share an X-axis, and that\n\t * the cameras' projection and world matrices have already been set.\n\t * And that near and far planes are identical for both cameras.\n\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n\t */\n\tfunction setProjectionFromUnion( camera, cameraL, cameraR ) {\n\n\t\tcameraLPos.setFromMatrixPosition( cameraL.matrixWorld );\n\t\tcameraRPos.setFromMatrixPosition( cameraR.matrixWorld );\n\n\t\tvar ipd = cameraLPos.distanceTo( cameraRPos );\n\n\t\tvar projL = cameraL.projectionMatrix.elements;\n\t\tvar projR = cameraR.projectionMatrix.elements;\n\n\t\t// VR systems will have identical far and near planes, and\n\t\t// most likely identical top and bottom frustum extents.\n\t\t// Use the left camera for these values.\n\t\tvar near = projL[ 14 ] / ( projL[ 10 ] - 1 );\n\t\tvar far = projL[ 14 ] / ( projL[ 10 ] + 1 );\n\t\tvar topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];\n\t\tvar bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];\n\n\t\tvar leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];\n\t\tvar rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];\n\t\tvar left = near * leftFov;\n\t\tvar right = near * rightFov;\n\n\t\t// Calculate the new camera's position offset from the\n\t\t// left camera. xOffset should be roughly half `ipd`.\n\t\tvar zOffset = ipd / ( - leftFov + rightFov );\n\t\tvar xOffset = zOffset * - leftFov;\n\n\t\t// TODO: Better way to apply this offset?\n\t\tcameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );\n\t\tcamera.translateX( xOffset );\n\t\tcamera.translateZ( zOffset );\n\t\tcamera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t\t// Find the union of the frustum values of the cameras and scale\n\t\t// the values so that the near plane's position does not change in world space,\n\t\t// although must now be relative to the new union camera.\n\t\tvar near2 = near + zOffset;\n\t\tvar far2 = far + zOffset;\n\t\tvar left2 = left - xOffset;\n\t\tvar right2 = right + ( ipd - xOffset );\n\t\tvar top2 = topFov * far / far2 * near2;\n\t\tvar bottom2 = bottomFov * far / far2 * near2;\n\n\t\tcamera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );\n\n\t}\n\n\tfunction updateCamera( camera, parent ) {\n\n\t\tif ( parent === null ) {\n\n\t\t\tcamera.matrixWorld.copy( camera.matrix );\n\n\t\t} else {\n\n\t\t\tcamera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );\n\n\t\t}\n\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\n\n\t}\n\n\tthis.getCamera = function ( camera ) {\n\n\t\tcameraVR.near = cameraR.near = cameraL.near = camera.near;\n\t\tcameraVR.far = cameraR.far = cameraL.far = camera.far;\n\n\t\tif ( _currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far ) {\n\n\t\t\t// Note that the new renderState won't apply until the next frame. See #18320\n\n\t\t\tsession.updateRenderState( {\n\t\t\t\tdepthNear: cameraVR.near,\n\t\t\t\tdepthFar: cameraVR.far\n\t\t\t} );\n\n\t\t\t_currentDepthNear = cameraVR.near;\n\t\t\t_currentDepthFar = cameraVR.far;\n\n\t\t}\n\n\t\tvar parent = camera.parent;\n\t\tvar cameras = cameraVR.cameras;\n\n\t\tupdateCamera( cameraVR, parent );\n\n\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\n\n\t\t\tupdateCamera( cameras[ i ], parent );\n\n\t\t}\n\n\t\t// update camera and its children\n\n\t\tcamera.matrixWorld.copy( cameraVR.matrixWorld );\n\n\t\tvar children = camera.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].updateMatrixWorld( true );\n\n\t\t}\n\n\t\tsetProjectionFromUnion( cameraVR, cameraL, cameraR );\n\n\t\treturn cameraVR;\n\n\t};\n\n\t// Animation Loop\n\n\tvar onAnimationFrameCallback = null;\n\n\tfunction onAnimationFrame( time, frame ) {\n\n\t\tpose = frame.getViewerPose( referenceSpace );\n\n\t\tif ( pose !== null ) {\n\n\t\t\tvar views = pose.views;\n\t\t\tvar baseLayer = session.renderState.baseLayer;\n\n\t\t\trenderer.setFramebuffer( baseLayer.framebuffer );\n\n\t\t\tfor ( var i = 0; i < views.length; i ++ ) {\n\n\t\t\t\tvar view = views[ i ];\n\t\t\t\tvar viewport = baseLayer.getViewport( view );\n\n\t\t\t\tvar camera = cameraVR.cameras[ i ];\n\t\t\t\tcamera.matrix.fromArray( view.transform.matrix );\n\t\t\t\tcamera.projectionMatrix.fromArray( view.projectionMatrix );\n\t\t\t\tcamera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );\n\n\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\tcameraVR.matrix.copy( camera.matrix );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar inputSources = session.inputSources;\n\n\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\n\n\t\t\tvar controller = controllers[ i ];\n\n\t\t\tvar inputSource = inputSources[ i ];\n\n\t\t\tvar inputPose = null;\n\t\t\tvar gripPose = null;\n\n\t\t\tif ( inputSource ) {\n\n\t\t\t\tif ( controller.targetRay ) {\n\n\t\t\t\t\tinputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );\n\n\t\t\t\t\tif ( inputPose !== null ) {\n\n\t\t\t\t\t\tcontroller.targetRay.matrix.fromArray( inputPose.transform.matrix );\n\t\t\t\t\t\tcontroller.targetRay.matrix.decompose( controller.targetRay.position, controller.targetRay.rotation, controller.targetRay.scale );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( controller.grip && inputSource.gripSpace ) {\n\n\t\t\t\t\tgripPose = frame.getPose( inputSource.gripSpace, referenceSpace );\n\n\t\t\t\t\tif ( gripPose !== null ) {\n\n\t\t\t\t\t\tcontroller.grip.matrix.fromArray( gripPose.transform.matrix );\n\t\t\t\t\t\tcontroller.grip.matrix.decompose( controller.grip.position, controller.grip.rotation, controller.grip.scale );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( controller.targetRay ) {\n\n\t\t\t\tcontroller.targetRay.visible = inputPose !== null;\n\n\t\t\t}\n\n\t\t\tif ( controller.grip ) {\n\n\t\t\t\tcontroller.grip.visible = gripPose !== null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( onAnimationFrameCallback ) onAnimationFrameCallback( time, frame );\n\n\t}\n\n\tvar animation = new WebGLAnimation();\n\tanimation.setAnimationLoop( onAnimationFrame );\n\n\tthis.setAnimationLoop = function ( callback ) {\n\n\t\tonAnimationFrameCallback = callback;\n\n\t};\n\n\tthis.dispose = function () {};\n\n}\n\nObject.assign( WebXRManager.prototype, EventDispatcher.prototype );\n\nexport { WebXRManager };\n"]},"metadata":{},"sourceType":"module"}