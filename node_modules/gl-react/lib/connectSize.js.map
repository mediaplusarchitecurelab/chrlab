{"version":3,"sources":["../src/connectSize.js"],"names":["connectSize","GLComponent","Component","getGLSize","props","width","height","context","glSizable","cw","ch","getChildContext","render","onConnectSizeComponentRef","displayName","name","PropTypes","number","object","isRequired"],"mappings":";;;;;;;AACA;;AACA;;;;;;;;;;AAEA;;;;;;;;;;;;;;AAcA,MAAMA,WAAW,GAAIC,WAAD;AAAA;;AAAA,0BAClB,cAAcC,gBAAd,CAKG;AAAA;AAAA;;AAAA;AAAA;;AAiBDC,IAAAA,SAAS,GAAqB;AAC5B,YAAM;AACJC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,KAAF;AAASC,UAAAA;AAAT,SADH;AAEJC,QAAAA,OAAO,EAAE;AAAEC,UAAAA;AAAF;AAFL,UAGF,IAHJ;AAIA,UAAIH,KAAK,IAAIC,MAAb,EAAqB,OAAO,CAACD,KAAD,EAAQC,MAAR,CAAP;AACrB,YAAM,CAACG,EAAD,EAAKC,EAAL,IAAWF,SAAS,CAACL,SAAV,EAAjB;AACA,aAAO,CAACE,KAAK,IAAII,EAAV,EAAcH,MAAM,IAAII,EAAxB,CAAP;AACD;;AACDC,IAAAA,eAAe,GAAG;AAChB,aAAO;AACLH,QAAAA,SAAS,EAAE;AADN,OAAP;AAGD;;AACDI,IAAAA,MAAM,GAAG;AACP,YAAM;AAAEC,QAAAA;AAAF,UAAgC,KAAKT,KAA3C;AACA,YAAM,CAACC,KAAD,EAAQC,MAAR,IAAkB,KAAKH,SAAL,EAAxB;AACA,aACE,6BAAC,WAAD;AACE,QAAA,GAAG,EAAEU;AADP,SAEM,KAAKT,KAFX;AAGE,QAAA,KAAK,EAAEC,KAHT;AAIE,QAAA,MAAM,EAAEC;AAJV,SADF;AAQD;;AA1CA,GANe,yCAUM,eAAcL,WAAW,CAACa,WAAZ,IAClCb,WAAW,CAACc,IADsB,IAElC,GAAI,GAZU,wCAaG;AACjBV,IAAAA,KAAK,EAAEW,mBAAUC,MADA;AAEjBX,IAAAA,MAAM,EAAEU,mBAAUC;AAFD,GAbH,2CAiBM;AACpBT,IAAAA,SAAS,EAAEQ,mBAAUE,MAAV,CAAiBC;AADR,GAjBN,gDAoBW;AACzBX,IAAAA,SAAS,EAAEQ,mBAAUE,MAAV,CAAiBC;AADH,GApBX;AAAA,CAApB;;eAmDenB,W","sourcesContent":["//@flow\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * A High Order Component (HOC) function that provides\n * the contextual `width` and `height` props to a GL Component.\n * It also merge optional width,height props to override the contextual size\n * @function connectSize\n * @param GLComponent - a React Component that receives width and height props\n * @returns {ReactClass<*>} a Component that merge width and height props\n * with context and renders `GLComponent`.\n * @example\n *  const Foo = ({ width, height }) => <Node uniforms={{ width, height }} />;\n *  const FooConnected = connectSize(Foo);\n *  <FooConnected /> // you don't have to provide width, height.\n *  <FooConnected width={64} height={64} /> // If you do, you override width,height in the context as well, so <Node> is implicitly receiving the new width/height.\n */\nconst connectSize = (GLComponent: *) =>\n  class extends Component<{\n    width?: number,\n    height?: number,\n    children?: any,\n    onConnectSizeComponentRef?: (ref: GLComponent) => void\n  }> {\n    context: {\n      glSizable: { +getGLSize: () => [number, number] }\n    };\n    static displayName = `connectSize(${GLComponent.displayName ||\n      GLComponent.name ||\n      \"?\"})`;\n    static propTypes = {\n      width: PropTypes.number,\n      height: PropTypes.number\n    };\n    static contextTypes = {\n      glSizable: PropTypes.object.isRequired\n    };\n    static childContextTypes = {\n      glSizable: PropTypes.object.isRequired\n    };\n    getGLSize(): [number, number] {\n      const {\n        props: { width, height },\n        context: { glSizable }\n      } = this;\n      if (width && height) return [width, height];\n      const [cw, ch] = glSizable.getGLSize();\n      return [width || cw, height || ch];\n    }\n    getChildContext() {\n      return {\n        glSizable: this\n      };\n    }\n    render() {\n      const { onConnectSizeComponentRef } = this.props;\n      const [width, height] = this.getGLSize();\n      return (\n        <GLComponent\n          ref={onConnectSizeComponentRef}\n          {...this.props}\n          width={width}\n          height={height}\n        />\n      );\n    }\n  };\n\nexport default connectSize;\n"],"file":"connectSize.js"}