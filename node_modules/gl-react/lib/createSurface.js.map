{"version":3,"sources":["../src/createSurface.js"],"names":["__DEV__","process","env","NODE_ENV","prependGLSLName","glsl","name","SurfacePropTypes","children","PropTypes","any","isRequired","style","preload","array","onLoad","func","onLoadError","onContextLost","onContextRestored","visitor","object","surfaceId","_instances","list","slice","allSurfaceProps","Object","keys","GLView","RenderLessElement","mapRenderableContent","requestFrame","cancelFrame","Surface","Component","ready","rebootId","debug","_needsRedraw","_draw","gl","onSuccess","setState","_handleLoad","e","_handleError","_prepareGL","props","_stopLoop","_destroyGL","root","_onContextLost","_onContextRestored","_handleRestoredSuccess","_handleRestoredFailure","ref","glView","console","error","redraw","flush","_startLoop","warn","getGLName","getChildContext","glParent","glSurface","glSizable","componentDidMount","push","getVisitors","forEach","v","onSurfaceMount","componentWillUnmount","i","indexOf","splice","onSurfaceUnmount","componentDidUpdate","render","state","rest","key","_onRef","_onContextCreate","_onContextFailure","rebootForDebug","Visitors","get","concat","getGLSize","drawingBufferWidth","drawingBufferHeight","id","getGLShortName","captureAsDataURL","args","displayName","captureAsBlob","capture","x","y","w","h","glIsAvailable","getEmptyTexture","_emptyTexture","createTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","Uint8Array","deleteTexture","loaderResolver","dispose","k","shaders","deleteBuffer","buffer","map","onSurfaceGLContextChange","onError","LoaderResolver","pixelStorei","UNPACK_FLIP_Y_WEBGL","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","all","raw","loader","input","_resolveTextureLoader","loadedAlready","load","_preparingGL","length","Promise","then","_addGLNodeChild","node","_addDependent","_removeGLNodeChild","resolve","_makeShader","frag","vert","shader","attributes","_p","pointer","_getShader","shaderId","Shaders","getName","_bindRootNode","bindFramebuffer","FRAMEBUFFER","width","height","viewport","_loopRaf","loop","visitors","onSurfaceDrawSkipped","onSurfaceDrawStart","beforeDraw","silent","onSurfaceDrawError","debugError","longMessage","afterDraw","onSurfaceDrawEnd"],"mappings":"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","sourcesContent":["//@flow\nimport invariant from \"invariant\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport createShader from \"gl-shader\";\nimport Bus from \"./Bus\";\nimport Shaders from \"./Shaders\";\nimport Visitors from \"./Visitors\";\nimport { LoaderResolver } from \"webgltexture-loader\";\nimport type { NDArray } from \"ndarray\";\nimport type { ShaderIdentifier, ShaderInfo } from \"./Shaders\";\nimport type { Shader } from \"gl-shader\";\nimport type { VisitorLike } from \"./Visitor\";\nimport type { WebGLTextureLoader } from \"webgltexture-loader\";\nimport type Node from \"./Node\";\n\nconst __DEV__ = process.env.NODE_ENV === \"development\";\n\nconst prependGLSLName = (glsl: string, name: ?string) =>\n  !name ? glsl : \"#define SHADER_NAME \" + name + \"\\n\" + glsl;\n\ntype SurfaceProps = {\n  children?: any,\n  style?: Object,\n  preload?: Array<mixed>,\n  onLoad?: () => void,\n  onLoadError?: (e: Error) => void,\n  onContextLost?: () => void,\n  onContextRestored?: () => void,\n  visitor?: VisitorLike\n};\n\ninterface ISurface extends Component<SurfaceProps, *> {\n  props: SurfaceProps;\n  gl: ?WebGLRenderingContext;\n  RenderLessElement: React$ComponentType<*>;\n  root: ?Node;\n  id: number;\n\n  +mapRenderableContent: ?(inst: mixed) => mixed;\n  +getVisitors: () => Array<VisitorLike>;\n  +getGLSize: () => [number, number];\n  +getGLName: () => string;\n  +getGLShortName: () => string;\n  +captureAsDataURL: (...args: any) => string;\n  +captureAsBlob: (...args: any) => Promise<Blob>;\n  +capture: (x?: number, y?: number, w?: number, h?: number) => NDArray;\n  +redraw: () => void;\n  +flush: () => void;\n  +getEmptyTexture: () => WebGLTexture;\n  +glIsAvailable: () => boolean;\n\n  +rebootForDebug: () => void;\n  +_addGLNodeChild: (node: Node) => void;\n  +_removeGLNodeChild: (node: Node) => void;\n  +_resolveTextureLoader: (\n    raw: any\n  ) => { loader: ?WebGLTextureLoader<*>, input: mixed };\n  +_getShader: (shaderId: ShaderIdentifier) => Shader;\n  +_makeShader: (shaderInfo: ShaderInfo) => Shader;\n  +_draw: () => void;\n  +_bindRootNode: () => void;\n}\n\nexport type Surface = ISurface;\n\nexport type SurfaceContext = {\n  glParent: Node | Surface | Bus,\n  glSurface: Surface,\n  glSizable: { +getGLSize: () => [number, number] }\n};\n\nconst SurfacePropTypes = {\n  children: PropTypes.any.isRequired,\n  style: PropTypes.any,\n  preload: PropTypes.array,\n  onLoad: PropTypes.func,\n  onLoadError: PropTypes.func,\n  onContextLost: PropTypes.func,\n  onContextRestored: PropTypes.func,\n  visitor: PropTypes.object\n};\n\nlet surfaceId = 0;\nconst _instances: Array<ISurface> = [];\nexport const list = (): Array<ISurface> => _instances.slice(0);\n\nconst allSurfaceProps = Object.keys(SurfacePropTypes);\n\ntype SurfaceOpts = {\n  GLView: *,\n  RenderLessElement: React$ComponentType<*>,\n  mapRenderableContent?: (instance: mixed) => mixed,\n  requestFrame: (f: Function) => number,\n  cancelFrame: (id: number) => void\n};\n\nexport default ({\n  GLView,\n  RenderLessElement,\n  mapRenderableContent,\n  requestFrame,\n  cancelFrame\n}: SurfaceOpts): Class<ISurface> => {\n  /**\n   * **Renders the final tree of [Node](#node) in a WebGL Canvas / OpenGLView /...**\n   *\n   * `<Surface>` performs the final GL draws for a given implementation.\n   *\n   * `width` and `height` props are required for `gl-react-dom` and `gl-react-headless`, but are not supported for React Native, where the paradigm is to use `style` (and either use flexbox or set a width/height from there).\n   *\n   * > Surface is the only component that isn't \"universal\",\n   * therefore **Surface is exposed by the platform implementation**\n   * (`gl-react-dom` / `gl-react-native` / ...),\n   * unlike the rest of the API exposed through `gl-react`.\n   * Each platform have its own implementation but most props are shared.\n   * If you write a gl-react library, you shouldn't use `<Surface>` but only\n   * let the final user doing it. Therefore your code should remain platform-independant.\n   *\n   * @class Surface\n   * @extends Component\n   * @prop {any} children - a tree of React Element that renders some [Node](#node) and/or [Bus](#bus).\n   * @prop {number} [width] **(only for DOM)** - width of the Surface. multiplied by `pixelRatio` for the actual canvas pixel size.\n   * @prop {number} [height] **(only for DOM)** - height of the Surface. multiplied by `pixelRatio` for the actual canvas pixel size.\n   * @prop {object} [style] - CSS styles that get passed to the underlying `<canvas/>` or `<View/>`\n   * @prop {Array<any>} [preload] - an array of things to preload before the Surface start rendering. Help avoiding blinks and providing required textures to render an initial state.\n   * @prop {function} [onLoad] - a callback called when Surface is ready and just after it rendered.\n   * @prop {function(error:Error):void} [onLoadError] - a callback called when the Surface was not able to load initially.\n   * @prop {function} [onContextLost] - a callback called when the Surface context was lost.\n   * @prop {function} [onContextRestored] - a callback called when the Surface was restored and ready.\n   * @prop {Visitor} [visitor] - an internal visitor used for logs and tests.\n   *\n   * @prop {WebGLContextAttributes} [webglContextAttributes] **(gl-react-dom only)** a optional set of attributes to init WebGL with.\n   * @prop {number} [pixelRatio=window.devicePixelRatio] **(gl-react-dom only)** allows to override the pixelRatio. (default `devicePixelRatio`)\n   *\n   * @example\n   *\n   *  <Surface width={300} height={200}>\n   *    <Node shader={shaders.helloGL} />\n   *  </Surface>\n   *\n   * @example\n   *\n   *  <Surface width={200} height={100}>\n   *    <HelloGL />\n   *  </Surface>\n   *\n   * @example\n   *\n   *  <Surface width={200} height={100}>\n   *    <Blur factor={2}>\n   *      <Negative>\n   *        https://i.imgur.com/wxqlQkh.jpg\n   *      </Negative>\n   *    </Blur>\n   *  </Surface>\n   */\n  return class Surface extends Component<\n    SurfaceProps,\n    {\n      ready: boolean,\n      rebootId: number,\n      debug: boolean\n    }\n  > {\n    id: number = ++surfaceId;\n    gl: ?WebGLRenderingContext;\n    buffer: WebGLBuffer;\n    loaderResolver: ?LoaderResolver;\n    glView: *;\n    root: ?Node;\n    shaders: { [key: string]: Shader } = {};\n    _preparingGL: Array<*> = [];\n    _needsRedraw: boolean = false;\n    state = {\n      ready: false,\n      rebootId: 0,\n      debug: false\n    };\n\n    RenderLessElement = RenderLessElement;\n    mapRenderableContent = mapRenderableContent;\n\n    static propTypes = SurfacePropTypes;\n    static childContextTypes: { [_: $Keys<SurfaceContext>]: any } = {\n      glSurface: PropTypes.object.isRequired,\n      glParent: PropTypes.object.isRequired,\n      glSizable: PropTypes.object.isRequired\n    };\n\n    getChildContext(): SurfaceContext {\n      return {\n        glParent: this,\n        glSurface: this,\n        glSizable: this\n      };\n    }\n\n    componentDidMount() {\n      _instances.push(this);\n      this.getVisitors().forEach(v => v.onSurfaceMount(this));\n    }\n\n    componentWillUnmount() {\n      this._stopLoop();\n      this._destroyGL();\n      const i = _instances.indexOf(this);\n      if (i !== -1) _instances.splice(i, 1);\n      this.getVisitors().forEach(v => v.onSurfaceUnmount(this));\n    }\n\n    componentDidUpdate() {\n      this.redraw();\n    }\n\n    render() {\n      const {\n        props,\n        state: { ready, rebootId, debug }\n      } = this;\n      const { children, style } = props;\n\n      // We allow to pass-in all props we don't know so you can hook to DOM events.\n      const rest = {};\n      Object.keys(props).forEach(key => {\n        if (allSurfaceProps.indexOf(key) === -1) {\n          rest[key] = props[key];\n        }\n      });\n\n      return (\n        <GLView\n          key={rebootId}\n          debug={debug}\n          ref={this._onRef}\n          onContextCreate={this._onContextCreate}\n          onContextFailure={this._onContextFailure}\n          onContextLost={this._onContextLost}\n          onContextRestored={this._onContextRestored}\n          style={style}\n          {...rest}\n        >\n          {ready ? children : null}\n        </GLView>\n      );\n    }\n\n    rebootForDebug() {\n      // FIXME: there is a bug somewhere that breaks rendering if this is called at startup time.\n      this._stopLoop();\n      this._destroyGL();\n      this.setState(({ rebootId }) => ({\n        rebootId: rebootId + 1,\n        ready: false,\n        debug: true\n      }));\n    }\n\n    getVisitors(): Array<VisitorLike> {\n      return Visitors.get().concat(this.props.visitor || []);\n    }\n\n    getGLSize(): [number, number] {\n      const { gl } = this;\n      return [gl ? gl.drawingBufferWidth : 0, gl ? gl.drawingBufferHeight : 0];\n    }\n\n    getGLName(): string {\n      return `Surface#${this.id}`;\n    }\n\n    getGLShortName(): string {\n      return \"Surface\";\n    }\n\n    /**\n     * see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL\n     * @param {string} mimeType (optional) the image MimeType\n     * @param {number} quality (optional) the image quality\n     * @memberof Surface\n     * @instance\n     */\n    captureAsDataURL(...args: any): string {\n      const { glView } = this;\n      invariant(glView, \"GLView is mounted\");\n      invariant(\n        glView.captureAsDataURL,\n        \"captureAsDataURL is not defined in %s\",\n        GLView.displayName || GLView.name\n      );\n      return glView.captureAsDataURL(...args);\n    }\n\n    /**\n     * see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob\n     * @param {string} mimeType (optional) the image MimeType\n     * @param {number} quality (optional) the image quality\n     * @memberof Surface\n     * @instance\n     */\n    captureAsBlob(...args: any): Promise<Blob> {\n      const { glView } = this;\n      invariant(glView, \"GLView is mounted\");\n      invariant(\n        glView.captureAsBlob,\n        \"captureAsBlob is not defined in %s\",\n        GLView.displayName || GLView.name\n      );\n      return glView.captureAsBlob(...args);\n    }\n\n    /**\n     * capture the root Node pixels. Make sure you have set `preserveDrawingBuffer: true` in `webglContextAttributes` prop.\n     * @memberof Surface\n     * @instance\n     */\n    capture(x?: number, y?: number, w?: number, h?: number): NDArray {\n      invariant(\n        this.root,\n        \"Surface#capture: surface is not yet ready or don't have any root Node\"\n      );\n      return this.root.capture(x, y, w, h);\n    }\n\n    /**\n     * Schedule a redraw of the Surface.\n     * @memberof Surface\n     * @instance\n     * @function\n     */\n    redraw = (): void => {\n      this._needsRedraw = true;\n    };\n\n    /**\n     * Force the redraw (if any) to happen now, synchronously.\n     * @memberof Surface\n     * @instance\n     * @function\n     */\n    flush = (): void => {\n      this._draw();\n    };\n\n    glIsAvailable(): boolean {\n      return !!this.gl;\n    }\n\n    _emptyTexture: ?WebGLTexture;\n    getEmptyTexture(): WebGLTexture {\n      let { gl, _emptyTexture } = this;\n      invariant(gl, \"getEmptyTexture called while gl was not defined\");\n      if (!_emptyTexture) {\n        this._emptyTexture = _emptyTexture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, _emptyTexture);\n        gl.texImage2D(\n          gl.TEXTURE_2D,\n          0,\n          gl.RGBA,\n          2,\n          2,\n          0,\n          gl.RGBA,\n          gl.UNSIGNED_BYTE,\n          new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n        );\n      }\n      return _emptyTexture;\n    }\n\n    _onContextCreate = (gl: WebGLRenderingContext): void => {\n      const onSuccess = () => {\n        this.setState(\n          {\n            ready: true\n          },\n          () => {\n            try {\n              this._handleLoad();\n            } catch (e) {\n              this._handleError(e);\n            }\n          }\n        );\n      };\n      this._prepareGL(gl, onSuccess, this._handleError);\n    };\n\n    _onContextFailure = (e: Error): void => {\n      this._handleError(e);\n    };\n\n    _onContextLost = (): void => {\n      if (this.props.onContextLost) this.props.onContextLost();\n      this._stopLoop();\n      this._destroyGL();\n      if (this.root) this.root._onContextLost();\n    };\n\n    _onContextRestored = (gl: WebGLRenderingContext) => {\n      if (this.root) this.root._onContextRestored(gl);\n      this._prepareGL(\n        gl,\n        this._handleRestoredSuccess,\n        this._handleRestoredFailure\n      );\n    };\n\n    _destroyGL() {\n      const { gl } = this;\n      if (gl) {\n        this.gl = null;\n        if (this._emptyTexture) {\n          gl.deleteTexture(this._emptyTexture);\n          this._emptyTexture = null;\n        }\n        if (this.loaderResolver) {\n          this.loaderResolver.dispose();\n        }\n        for (let k in this.shaders) {\n          this.shaders[k].dispose();\n        }\n        this.shaders = {};\n        gl.deleteBuffer(this.buffer);\n        this.getVisitors().map(v => v.onSurfaceGLContextChange(this, null));\n      }\n    }\n\n    _prepareGL(\n      gl: WebGLRenderingContext,\n      onSuccess: () => void,\n      onError: (e: Error) => void\n    ) {\n      this.gl = gl;\n      this.getVisitors().map(v => v.onSurfaceGLContextChange(this, gl));\n\n      this.loaderResolver = new LoaderResolver(gl);\n\n      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1);\n\n      const buffer = gl.createBuffer();\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n      gl.bufferData(\n        gl.ARRAY_BUFFER,\n        new Float32Array([-1, -1, -1, 4, 4, -1]), // see a-big-triangle\n        gl.STATIC_DRAW\n      );\n      this.buffer = buffer;\n\n      const { preload } = this.props;\n\n      const all: Array<Promise<*>> = [];\n\n      (preload || []).forEach(raw => {\n        if (!raw) {\n          console.warn(\"Can't preload value\", raw);\n          return;\n        }\n        const { loader, input } = this._resolveTextureLoader(raw);\n        if (!loader) {\n          console.warn(\"Can't preload input\", raw, input);\n          return;\n        }\n        const loadedAlready = loader.get(input);\n        if (loadedAlready) return;\n        all.push(loader.load(input));\n      });\n\n      this._preparingGL = all;\n\n      if (all.length > 0) {\n        Promise.all(all).then(onSuccess, onError); // FIXME make sure this never finish if _prepareGL is called again.\n      } else {\n        onSuccess();\n      }\n    }\n\n    _onRef = (ref: ?GLView): void => {\n      this.glView = ref;\n    };\n\n    _addGLNodeChild(node: Node): void {\n      invariant(\n        !this.root,\n        \"Surface can only contains a single root. Got: %s\",\n        this.root && this.root.getGLName()\n      );\n      this.root = node;\n      node._addDependent(this);\n      this.redraw();\n    }\n    _removeGLNodeChild(node: Node): void {\n      this.root = null;\n      this.redraw();\n    }\n\n    _handleError = (e: Error): void => {\n      const { onLoadError } = this.props;\n      if (onLoadError) onLoadError(e);\n      else {\n        console.error(e);\n      }\n    };\n\n    _handleRestoredFailure = (): void => {\n      // there is nothing we can do. it's a dead end.\n    };\n\n    _handleRestoredSuccess = (): void => {\n      this.redraw();\n      this.flush();\n      this._startLoop();\n      if (this.props.onContextRestored) this.props.onContextRestored();\n    };\n\n    _handleLoad = (): void => {\n      if (!this.root) {\n        console.warn(\n          this.getGLName() + \" children does not contain any discoverable Node\"\n        );\n      }\n      const { onLoad } = this.props;\n      this.redraw();\n      this.flush();\n      this._startLoop();\n      if (onLoad) onLoad();\n    };\n\n    _resolveTextureLoader(\n      raw: mixed\n    ): { loader: ?WebGLTextureLoader<*>, input: any } {\n      let input = raw;\n      let loader: ?WebGLTextureLoader<*> =\n        this.loaderResolver && this.loaderResolver.resolve(input);\n      return { loader, input };\n    }\n\n    _makeShader({ frag, vert }: ShaderInfo, name?: string): Shader {\n      const { gl } = this;\n      invariant(gl, \"gl is not available\");\n      const shader = createShader(\n        gl,\n        prependGLSLName(vert, name),\n        prependGLSLName(frag, name)\n      );\n      shader.attributes._p.pointer();\n      return shader;\n    }\n\n    _getShader(shaderId: ShaderIdentifier): Shader {\n      const { shaders } = this;\n      return (\n        shaders[shaderId.id] ||\n        (shaders[shaderId.id] = this._makeShader(\n          Shaders.get(shaderId),\n          Shaders.getName(shaderId)\n        ))\n      );\n    }\n\n    _bindRootNode(): void {\n      const { gl } = this;\n      invariant(gl, \"gl context not available\");\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n      const [width, height] = this.getGLSize();\n      gl.viewport(0, 0, width, height);\n    }\n\n    _loopRaf: any;\n    _startLoop(): void {\n      cancelFrame(this._loopRaf);\n      const loop = () => {\n        this._loopRaf = requestFrame(loop);\n        if (this._needsRedraw) this._draw();\n      };\n      this._loopRaf = requestFrame(loop);\n    }\n\n    _stopLoop(): void {\n      cancelFrame(this._loopRaf);\n    }\n\n    _draw(): void {\n      const { gl, root, glView } = this;\n      invariant(glView, \"GLView is mounted\");\n      const visitors = this.getVisitors();\n      if (!gl || !root || !this._needsRedraw) {\n        visitors.forEach(v => v.onSurfaceDrawSkipped(this));\n        return;\n      }\n      this._needsRedraw = false;\n      visitors.forEach(v => v.onSurfaceDrawStart(this));\n      if (glView.beforeDraw) glView.beforeDraw(gl);\n      try {\n        root._draw();\n      } catch (e) {\n        let silent = false;\n        visitors.forEach(v => {\n          silent = v.onSurfaceDrawError(e) || silent;\n        });\n        if (!silent) {\n          if (\n            __DEV__ &&\n            glView.debugError &&\n            e.longMessage /* duck typing an \"interesting\" GLError (from lib gl-shader) */\n          ) {\n            glView.debugError(e);\n          } else {\n            console.warn(e);\n            throw e;\n          }\n        }\n        return;\n      }\n      if (glView.afterDraw) glView.afterDraw(gl);\n      visitors.forEach(v => v.onSurfaceDrawEnd(this));\n    }\n  };\n};\n"],"file":"createSurface.js"}