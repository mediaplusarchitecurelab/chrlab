{"version":3,"sources":["../src/Bus.js"],"names":["Bus","Component","ref","glBusRootNode","dependents","forEach","d","redraw","componentDidMount","uniform","index","props","glParent","context","Node","_addUniformBus","componentWillUnmount","_removeUniformBus","componentDidUpdate","oldUniform","oldIndex","getChildContext","_addGLNodeChild","node","glNode","_removeGLNodeChild","_addDependent","i","indexOf","push","_removeDependent","splice","getGLRenderableNode","getGLRenderableContent","mapRenderableContent","glSurface","getGLName","String","getGLShortName","content","shortContentName","constructor","name","capture","x","y","w","h","_onContextLost","_onContextRestored","gl","render","children","RenderLessElement","onRef","undefined","PropTypes","object","isRequired"],"mappings":"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","sourcesContent":["//@flow\nimport invariant from \"invariant\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Node from \"./Node\";\nimport invariantNoDependentsLoop from \"./helpers/invariantNoDependentsLoop\";\nimport genId from \"./genId\";\n\nimport type { Surface } from \"./createSurface\";\nimport type { NDArray } from \"ndarray\";\n\ntype Props = {|\n  children?: React$Element<*> | ((redraw?: () => void) => React$Element<*>),\n  uniform?: string,\n  index: number\n|};\n\n/**\n * a **Bus is a container to \"cache\" and re-use content** (tree of Node, canvas, video,...) somewhere else in your GL graph.\n * To use it, use the Bus `ref`:\n * - provide it in another Node texture uniform so you can share computation (send a Node texture to multiple Nodes dependent) (more exactly, a working pattern is to give a `()=>ref` function that will be resolved in `DidUpdate` lifecycle)\n * - You have a `capture()` method to snapshot the underlying Node (because Node can be hidden being nested React components).\n *\n *\n * @prop {any} children the content to render. It can also be a function that takes a redraw function and render an element.\n * @prop {string} [uniform] In case you want to explicitely draw Bus directly into a uniform, you can give the uniform name of the parent node.\n * If this prop is not used, the Bus does not directly belong to a Node and a ref can be used to indirectly give a texture to a node.\n * `uniform` is equivalent to directly pass your VDOM inside the Node uniforms prop.\n *\n * **Usage Example**\n *\n * [![](https://github.com/ProjectSeptemberInc/gl-react/raw/master/docs/examples/blur.gif)](/blurmapmouse)\n *\n * @example\n *\n * <Surface ...>\n *   <Bus ref=\"myBus\">\n *     //here, glEffects or content like a canvas/video...\n *   </Bus>\n *   <Node uniforms={{\n *     texture: () => this.refs.myBus\n *   }} ... />\n * </Surface>\n *\n */\nexport default class Bus extends Component<Props, *> {\n  id: number = genId();\n  context: {\n    glParent: Surface | Node,\n    glSurface: Surface\n  };\n  dependents: Array<Node | Surface> = [];\n\n  static defaultProps = {\n    index: 0\n  };\n\n  static contextTypes = {\n    glParent: PropTypes.object.isRequired,\n    glSurface: PropTypes.object.isRequired\n  };\n\n  static childContextTypes = {\n    glParent: PropTypes.object.isRequired\n  };\n\n  componentDidMount() {\n    const { uniform, index } = this.props;\n    if (uniform) {\n      const { glParent } = this.context;\n      invariant(\n        glParent instanceof Node,\n        'a <Bus uniform=\"..\" /> needs to be inside a Node'\n      );\n      glParent._addUniformBus(this, uniform, index);\n    }\n    this.redraw();\n  }\n\n  componentWillUnmount() {\n    const { uniform, index } = this.props;\n    if (uniform) {\n      const { glParent } = this.context;\n      invariant(\n        glParent instanceof Node,\n        'a <Bus uniform=\"..\" /> needs to be inside a Node'\n      );\n      glParent._removeUniformBus(this, uniform, index);\n    }\n  }\n\n  componentDidUpdate({ uniform: oldUniform, index: oldIndex }: *) {\n    const { uniform, index } = this.props;\n    if (uniform && (uniform !== oldUniform || index !== oldIndex)) {\n      const { glParent } = this.context;\n      invariant(\n        glParent instanceof Node,\n        'a <Bus uniform=\"..\" /> needs to be inside a Node'\n      );\n      if (oldUniform) glParent._removeUniformBus(this, oldUniform, oldIndex);\n      glParent._addUniformBus(this, uniform, index);\n    }\n    this.redraw();\n  }\n\n  getChildContext(): { glParent: Bus } {\n    return {\n      glParent: this\n    };\n  }\n\n  glNode: ?Node = null;\n  _addGLNodeChild(node: Node) {\n    this.glNode = node;\n    this.context.glParent.redraw();\n  }\n  _removeGLNodeChild(node: Node) {\n    this.glNode = null;\n  }\n\n  _addDependent(node: Node | Surface) {\n    const i = this.dependents.indexOf(node);\n    if (i === -1) {\n      invariantNoDependentsLoop(this, node);\n      this.dependents.push(node);\n    }\n  }\n\n  _removeDependent(node: Node | Surface) {\n    const i = this.dependents.indexOf(node);\n    if (i !== -1) this.dependents.splice(i, 1);\n  }\n\n  getGLRenderableNode(): ?Node {\n    return this.glNode;\n  }\n\n  getGLRenderableContent(): mixed {\n    const { mapRenderableContent } = this.context.glSurface;\n    const { glBusRootNode } = this;\n    return glBusRootNode && mapRenderableContent\n      ? mapRenderableContent(glBusRootNode)\n      : null;\n  }\n\n  getGLName(): string {\n    return `Bus(${\n      this.glNode\n        ? this.glNode.getGLName()\n        : String(this.getGLRenderableContent())\n    })`;\n  }\n\n  getGLShortName(): string {\n    const content = this.getGLRenderableContent();\n    const shortContentName = String(\n      (content && content.constructor && content.constructor.name) || content\n    );\n    return `Bus(${\n      this.glNode ? this.glNode.getGLShortName() : shortContentName\n    })`;\n  }\n\n  /**\n   * Capture the underlying Node pixels.\n   * NB it only works for nodes, not for content like video/canvas.\n   */\n  capture(x?: number, y?: number, w?: number, h?: number): NDArray {\n    invariant(this.glNode, \"Bus does not contain any Node\");\n    return this.glNode.capture(x, y, w, h);\n  }\n\n  glBusRootNode: ?mixed;\n  onRef = (ref: mixed) => {\n    this.glBusRootNode = ref;\n  };\n\n  /**\n   * Schedule a redraw of all nodes that depends on this Bus.\n   *\n   * @function\n   */\n  redraw = () => {\n    this.dependents.forEach(d => d.redraw());\n  };\n\n  _onContextLost() {\n    const { glNode } = this;\n    if (glNode) glNode._onContextLost();\n  }\n\n  _onContextRestored(gl: WebGLRenderingContext) {\n    const { glNode } = this;\n    if (glNode) glNode._onContextRestored(gl);\n  }\n\n  _draw = () => {\n    // FIXME: _draw() on a Bus? (would a third party need this?)\n  };\n\n  render() {\n    const { children } = this.props;\n    const {\n      glSurface: { RenderLessElement, mapRenderableContent }\n    } = this.context;\n    return (\n      <RenderLessElement ref={mapRenderableContent ? this.onRef : undefined}>\n        {typeof children === \"function\" ? children(this.redraw) : children}\n      </RenderLessElement>\n    );\n  }\n}\n"],"file":"Bus.js"}