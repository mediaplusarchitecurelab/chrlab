"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _webgltextureLoader = require("webgltexture-loader");

var _drawNDArrayTexture = _interopRequireDefault(require("./drawNDArrayTexture"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class NDArrayTextureLoader extends _webgltextureLoader.WebGLTextureLoaderSyncHashCache {
  constructor(gl) {
    super(gl);

    _defineProperty(this, "floatSupported", void 0);

    this.floatSupported = gl.getExtension("OES_texture_float") && gl.getExtension("OES_texture_float_linear");
  }

  canLoad(obj) {
    return obj.shape && obj.data && obj.stride;
  }

  inputHash(input) {
    return input;
  }

  getNoCache(input) {
    const {
      gl
    } = this;
    const texture = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, texture);
    const [width, height] = input.shape;
    (0, _drawNDArrayTexture.default)(gl, texture, input, this.floatSupported);
    return {
      texture,
      width,
      height
    };
  }

  update(input) {
    // For now we assume the NDArray always change & need a redraw but we might try to only update if changes later
    const {
      gl
    } = this;
    const {
      texture
    } = this.get(input);
    gl.bindTexture(gl.TEXTURE_2D, texture);
    (0, _drawNDArrayTexture.default)(gl, texture, input, this.floatSupported);
  }

}

_webgltextureLoader.globalRegistry.add(NDArrayTextureLoader);

var _default = NDArrayTextureLoader;
exports.default = _default;
//# sourceMappingURL=NDArrayTextureLoader.js.map