{"version":3,"sources":["../src/drawNDArrayTexture.js"],"names":["Buffer","global","b","isPacked","shape","stride","length","convertFloatToUint8","out","inp","ops","muls","gl","texture","array","floatSupported","dtype","slice","maxSize","getParameter","MAX_TEXTURE_SIZE","Error","packed","type","FLOAT","UNSIGNED_BYTE","format","LUMINANCE","data","offset","ALPHA","LUMINANCE_ALPHA","RGB","RGBA","buffer","buf_store","size","pool","malloc","buf_array","assign","subarray","texImage2D","TEXTURE_2D","free"],"mappings":"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","sourcesContent":["//@flow\nimport type { NDArray } from \"ndarray\";\nimport ndarray from \"ndarray\";\nimport ops from \"ndarray-ops\";\nimport pool from \"typedarray-pool\";\n\nif (typeof Buffer === \"undefined\") {\n  global.Buffer = class Buffer {\n    // mock shim so pool don't crash..\n    static isBuffer = b => b instanceof Buffer;\n  };\n}\n\n// code is partly taken from https://github.com/stackgl/gl-texture2d/blob/master/texture.js\n\nfunction isPacked(shape, stride) {\n  if (shape.length === 3) {\n    return (\n      stride[2] === 1 &&\n      stride[1] === shape[0] * shape[2] &&\n      stride[0] === shape[2]\n    );\n  }\n  return stride[0] === 1 && stride[1] === shape[0];\n}\n\nfunction convertFloatToUint8(out, inp) {\n  ops.muls(out, inp, 255.0);\n}\n\nexport default (\n  gl: WebGLRenderingContext,\n  texture: WebGLTexture,\n  array: NDArray,\n  floatSupported: boolean\n) => {\n  let dtype = array.dtype;\n  let shape = array.shape.slice();\n  let maxSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n  if (\n    shape[0] < 0 ||\n    shape[0] > maxSize ||\n    shape[1] < 0 ||\n    shape[1] > maxSize\n  ) {\n    throw new Error(\"gl-react: Invalid texture size\");\n  }\n  let packed = isPacked(shape, array.stride.slice());\n  let type = 0;\n  if (dtype === \"float32\") {\n    type = gl.FLOAT;\n  } else if (dtype === \"float64\") {\n    type = gl.FLOAT;\n    packed = false;\n    dtype = \"float32\";\n  } else if (dtype === \"uint8\") {\n    type = gl.UNSIGNED_BYTE;\n  } else {\n    type = gl.UNSIGNED_BYTE;\n    packed = false;\n    dtype = \"uint8\";\n  }\n  let format = 0;\n  if (shape.length === 2) {\n    format = gl.LUMINANCE;\n    shape = [shape[0], shape[1], 1];\n    array = ndarray(\n      array.data,\n      shape,\n      [array.stride[0], array.stride[1], 1],\n      array.offset\n    );\n  } else if (shape.length === 3) {\n    if (shape[2] === 1) {\n      format = gl.ALPHA;\n    } else if (shape[2] === 2) {\n      format = gl.LUMINANCE_ALPHA;\n    } else if (shape[2] === 3) {\n      format = gl.RGB;\n    } else if (shape[2] === 4) {\n      format = gl.RGBA;\n    } else {\n      throw new Error(\"gl-texture2d: Invalid shape for pixel coords\");\n    }\n  } else {\n    throw new Error(\"gl-texture2d: Invalid shape for texture\");\n  }\n  if (type === gl.FLOAT && !floatSupported) {\n    type = gl.UNSIGNED_BYTE;\n    packed = false;\n  }\n  let buffer, buf_store;\n  let size = array.size;\n  if (!packed) {\n    let stride = [shape[2], shape[2] * shape[0], 1];\n    buf_store = pool.malloc(size, dtype);\n    let buf_array = ndarray(buf_store, shape, stride, 0);\n    if (\n      (dtype === \"float32\" || dtype === \"float64\") &&\n      type === gl.UNSIGNED_BYTE\n    ) {\n      convertFloatToUint8(buf_array, array);\n    } else {\n      ops.assign(buf_array, array);\n    }\n    buffer = buf_store.subarray(0, size);\n  } else if (array.offset === 0 && array.data.length === size) {\n    buffer = array.data;\n  } else {\n    buffer = array.data.subarray(array.offset, array.offset + size);\n  }\n  gl.texImage2D(\n    gl.TEXTURE_2D,\n    0,\n    format,\n    shape[0],\n    shape[1],\n    0,\n    format,\n    type,\n    buffer\n  );\n  if (buf_store) {\n    pool.free(buf_store);\n  }\n};\n"],"file":"drawNDArrayTexture.js"}