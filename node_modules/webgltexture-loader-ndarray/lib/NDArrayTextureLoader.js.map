{"version":3,"sources":["../src/NDArrayTextureLoader.js"],"names":["NDArrayTextureLoader","WebGLTextureLoaderSyncHashCache","constructor","gl","floatSupported","getExtension","canLoad","obj","shape","data","stride","inputHash","input","getNoCache","texture","createTexture","bindTexture","TEXTURE_2D","width","height","update","get","globalRegistry","add"],"mappings":";;;;;;;AACA;;AAKA;;;;;;AAEA,MAAMA,oBAAN,SAAmCC,mDAAnC,CAA4E;AAE1EC,EAAAA,WAAW,CAACC,EAAD,EAAQ;AACjB,UAAMA,EAAN;;AADiB;;AAEjB,SAAKC,cAAL,GACED,EAAE,CAACE,YAAH,CAAgB,mBAAhB,KACAF,EAAE,CAACE,YAAH,CAAgB,0BAAhB,CAFF;AAGD;;AAEDC,EAAAA,OAAO,CAACC,GAAD,EAAW;AAChB,WAAOA,GAAG,CAACC,KAAJ,IAAaD,GAAG,CAACE,IAAjB,IAAyBF,GAAG,CAACG,MAApC;AACD;;AAEDC,EAAAA,SAAS,CAACC,KAAD,EAAiB;AACxB,WAAOA,KAAP;AACD;;AAEDC,EAAAA,UAAU,CAACD,KAAD,EAAiB;AACzB,UAAM;AAAET,MAAAA;AAAF,QAAS,IAAf;AACA,UAAMW,OAAO,GAAGX,EAAE,CAACY,aAAH,EAAhB;AACAZ,IAAAA,EAAE,CAACa,WAAH,CAAeb,EAAE,CAACc,UAAlB,EAA8BH,OAA9B;AACA,UAAM,CAACI,KAAD,EAAQC,MAAR,IAAkBP,KAAK,CAACJ,KAA9B;AACA,qCAAmBL,EAAnB,EAAuBW,OAAvB,EAAgCF,KAAhC,EAAuC,KAAKR,cAA5C;AACA,WAAO;AAAEU,MAAAA,OAAF;AAAWI,MAAAA,KAAX;AAAkBC,MAAAA;AAAlB,KAAP;AACD;;AAEDC,EAAAA,MAAM,CAACR,KAAD,EAAiB;AACrB;AACA,UAAM;AAAET,MAAAA;AAAF,QAAS,IAAf;AACA,UAAM;AAAEW,MAAAA;AAAF,QAAc,KAAKO,GAAL,CAAST,KAAT,CAApB;AACAT,IAAAA,EAAE,CAACa,WAAH,CAAeb,EAAE,CAACc,UAAlB,EAA8BH,OAA9B;AACA,qCAAmBX,EAAnB,EAAuBW,OAAvB,EAAgCF,KAAhC,EAAuC,KAAKR,cAA5C;AACD;;AAhCyE;;AAmC5EkB,mCAAeC,GAAf,CAAmBvB,oBAAnB;;eAEeA,oB","sourcesContent":["//@flow\nimport {\n  WebGLTextureLoaderSyncHashCache,\n  globalRegistry\n} from \"webgltexture-loader\";\nimport type { NDArray } from \"ndarray\";\nimport drawNDArrayTexture from \"./drawNDArrayTexture\";\n\nclass NDArrayTextureLoader extends WebGLTextureLoaderSyncHashCache<NDArray> {\n  floatSupported: boolean;\n  constructor(gl: *) {\n    super(gl);\n    this.floatSupported =\n      gl.getExtension(\"OES_texture_float\") &&\n      gl.getExtension(\"OES_texture_float_linear\");\n  }\n\n  canLoad(obj: any) {\n    return obj.shape && obj.data && obj.stride;\n  }\n\n  inputHash(input: NDArray) {\n    return input;\n  }\n\n  getNoCache(input: NDArray) {\n    const { gl } = this;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const [width, height] = input.shape;\n    drawNDArrayTexture(gl, texture, input, this.floatSupported);\n    return { texture, width, height };\n  }\n\n  update(input: NDArray) {\n    // For now we assume the NDArray always change & need a redraw but we might try to only update if changes later\n    const { gl } = this;\n    const { texture } = this.get(input);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    drawNDArrayTexture(gl, texture, input, this.floatSupported);\n  }\n}\n\nglobalRegistry.add(NDArrayTextureLoader);\n\nexport default NDArrayTextureLoader;\n"],"file":"NDArrayTextureLoader.js"}