"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ndarray = _interopRequireDefault(require("ndarray"));

var _ndarrayOps = _interopRequireDefault(require("ndarray-ops"));

var _typedarrayPool = _interopRequireDefault(require("typedarray-pool"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

if (typeof Buffer === "undefined") {
  var _class, _temp;

  global.Buffer = (_temp = _class = class Buffer {}, _defineProperty(_class, "isBuffer", b => b instanceof Buffer), _temp);
} // code is partly taken from https://github.com/stackgl/gl-texture2d/blob/master/texture.js


function isPacked(shape, stride) {
  if (shape.length === 3) {
    return stride[2] === 1 && stride[1] === shape[0] * shape[2] && stride[0] === shape[2];
  }

  return stride[0] === 1 && stride[1] === shape[0];
}

function convertFloatToUint8(out, inp) {
  _ndarrayOps.default.muls(out, inp, 255.0);
}

var _default = (gl, texture, array, floatSupported) => {
  let dtype = array.dtype;
  let shape = array.shape.slice();
  let maxSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);

  if (shape[0] < 0 || shape[0] > maxSize || shape[1] < 0 || shape[1] > maxSize) {
    throw new Error("gl-react: Invalid texture size");
  }

  let packed = isPacked(shape, array.stride.slice());
  let type = 0;

  if (dtype === "float32") {
    type = gl.FLOAT;
  } else if (dtype === "float64") {
    type = gl.FLOAT;
    packed = false;
    dtype = "float32";
  } else if (dtype === "uint8") {
    type = gl.UNSIGNED_BYTE;
  } else {
    type = gl.UNSIGNED_BYTE;
    packed = false;
    dtype = "uint8";
  }

  let format = 0;

  if (shape.length === 2) {
    format = gl.LUMINANCE;
    shape = [shape[0], shape[1], 1];
    array = (0, _ndarray.default)(array.data, shape, [array.stride[0], array.stride[1], 1], array.offset);
  } else if (shape.length === 3) {
    if (shape[2] === 1) {
      format = gl.ALPHA;
    } else if (shape[2] === 2) {
      format = gl.LUMINANCE_ALPHA;
    } else if (shape[2] === 3) {
      format = gl.RGB;
    } else if (shape[2] === 4) {
      format = gl.RGBA;
    } else {
      throw new Error("gl-texture2d: Invalid shape for pixel coords");
    }
  } else {
    throw new Error("gl-texture2d: Invalid shape for texture");
  }

  if (type === gl.FLOAT && !floatSupported) {
    type = gl.UNSIGNED_BYTE;
    packed = false;
  }

  let buffer, buf_store;
  let size = array.size;

  if (!packed) {
    let stride = [shape[2], shape[2] * shape[0], 1];
    buf_store = _typedarrayPool.default.malloc(size, dtype);
    let buf_array = (0, _ndarray.default)(buf_store, shape, stride, 0);

    if ((dtype === "float32" || dtype === "float64") && type === gl.UNSIGNED_BYTE) {
      convertFloatToUint8(buf_array, array);
    } else {
      _ndarrayOps.default.assign(buf_array, array);
    }

    buffer = buf_store.subarray(0, size);
  } else if (array.offset === 0 && array.data.length === size) {
    buffer = array.data;
  } else {
    buffer = array.data.subarray(array.offset, array.offset + size);
  }

  gl.texImage2D(gl.TEXTURE_2D, 0, format, shape[0], shape[1], 0, format, type, buffer);

  if (buf_store) {
    _typedarrayPool.default.free(buf_store);
  }
};

exports.default = _default;
//# sourceMappingURL=drawNDArrayTexture.js.map